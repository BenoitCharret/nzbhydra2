GUI
- !!! Reverse proxy support (done in settings)
- !!! Config (getting, setting)
- !! Update notification
- !!! basic Searching
- !!! searching with exclusion
- !!! searching by ID, autocomplete

Searching
- return indexerName access data to show in GUI
- !! pick indexers: show in GUI
- !! exclusions
- !!! rejecting search results: mostly done
- !!! ID conversion: mostly done
- !!! query generation
- !!! search history: mostly done
- !!! hitlimit and downloadlimit
- !!! global retention

Config
- !!! Loading
- !!! Updating
- !!! Setting via web call
- !!! reloading config: Mostly done
- find out which settings require a restart and mark them accordingly
- !! test that yaml is updated with missing/new keys
- !!on first start initialize config with secret, api key, etc and save to file.
- make sure existing file is not overwritten with defaults by mistake
- !! (works I guess) how to migrate from "old" yaml??
- !!show warning: what happens when you overwrite a setting from the command line and then save from the GUI?
- !! make sure that database file starts with ./ for relative paths
- !! sort indexers in config by name to make finding them easier

Downloader support: mostly done
- sabnzbd
- nzbget

NZB handling
- downloading: partly done
- referral, proxying: partly done
- get details
- !! downloading zip of NZBs

Indexer support
- binsearch
- !! nzbindex
- !! anizb (including migration), only support anime
- !! nzbclub is gone!!
- !! checking caps
- !! checking auth / connection: done

Torrent support
- !! special handling
- !! downloading directly
- !! black hole
- show seeder/leecher in tooltip or somewhere
- perhaps add api access to torrents via special url, select only torznab indexers

Updater: Proof of concept with wrapper works
- !! update notification
- self updating
- not now: function to show dialog instead of updating when a manual update is needed for some reason (pulled from repo file)

Process control
- Restart: Works, based on wrapper
- Shutdown: Works, based on wrapper

Authorization https://kielczewski.eu/2014/12/spring-boot-security-application/
- mostly done
- !! log user name for appropriate actions
- enabling auth requires restart

History & stats
- Search history: mostly done
- Download history: mostly done
- Stats: mostly done

Backups
- !! Save
- !! Restore: Using the wrapper
- create periodically (done, but needs to be checked if actually executed
- create before updating
- test what happens when search is executed while backup is made
- !! how to handle differences in config / database file location between command line parameters, old and new config

Windows GUI
- no windows gui for now, service or console

News
- !! poll periodically from repo for news
- !! show news on startup for any given version
- !! only show news to admins
- !! save display state in database instead of cookie
- !! new section for news

General, Ideas
- !! open browser on startup
- !! delete results older than x, perhaps do this as first background task?
- !! package static files in jar when delivering
- !!! user agent http://springinpractice.com/2013/10/27/how-to-send-an-http-header-with-every-request-with-spring-resttemplate
- wrap searches in ~30s timeout to prevent wrong code or other issues fucking up the system
- !! Log / config sanitation
- !! more config validation. make sure auth is properly configured, etc
- !! config validation with error and warning level. warn when eg no indexer capable of id search is enabled
- !! Initialize config
- !! timeout for indexer accesses is "global" (max time spent for access)
- !! migrating from old installation (config and database), either via web call or via loading from file system. dont migrate searchresults. warn for all settings not taken over (like proxy)
- !! restart dialog pings until recognizes successful restart
- !! catch all API errors and let user decide if a) code 500 is returned b) XML with error code c) empty results
- dashboard in stats section, downloads, API searches, normal searches, application errors in the last x days
- !! rss functionality with configurable caching, perhaps with cache interval as parameter
- banner
- verify that retrieving user from remoteuser works with form based login and rememberme
- !! when no indexers configured / available, on search page show a note and link to config
- ! debug tab in system section to execute raw sql queries
- log API access user agent in info column and show in history?
- !! proper GUI filtering of search results
- !!! if indexer statuses is collapsed and at least one indexer had an error show a growl warning
- !! use config setting "isUseLocalUrlForApiAccess"
- !! compare stats from python version and migrated
- !! episodes can be strings
- !! option to download torrent file to predefined folder
- !! caps (don't support audio)
- !! show special message when no search results were found and/or no indexers were picked
- !! won't do it: add business level logger for json, only log important stuff there
- sqlite-jdbc.jar is big, perhaps load only when required?
- delete *.json.* log files
- !! progressbar for search (how many indexers were already searched)
- make sure indexer caps config is complete, don't enable until so
- !! button to switch inclusion of currently disabled indexers in stats
- !! category parsing is not reliable but I don't have any idea how to solve that properly and reliably
- !! apikey generation in chrome only uses the first half of the available characters
- adapt migration to latest version (sslca, removeTrailing, etc...)
- ssl, needs to be explained in wiki/readme
- when all indexers were selected in GUI don't set the parameter
- !! use common data dir instead of settings for database and config file
- !! ip and username must be removed from log when creating debug infos, obviously removing them before doesn't make sense when allowing to log them in the first place
- simple web hook to inform about search and/or download. provide title, downloader id (if available), etc.
- !! fallback to title/query if no results were found when searching with an id
- !! add a "category type" to categories, e.g. comic, anime, audiobook, etc. When a result is found and identified as such (by whatever means) then we use that category's settings (filter, restrictions, etc). it should also override the used newznab category when searching with that category from gui
- !! ignoring warnings when saving config doesn't work
- !! when migrating we need to handle missing category mappings. perhaps add every indexer disabled and let the user do that? or try to check every indexer and disable the failed ones
- !! actually set and use category subtypes, add selection box for it
- !! magazine category, subtype, etc
- replace NZB link text with icon
- !! (by using web security login page) reduce bootstrapped data so only data actually required for the login is contained before user is authenticated. or scramble it
- !! migrate proxies
- check and complete online help
- check logging (sensible output, relevant infos contained, etc)
- account for search type / category (anime, etc) when picking indexers so that anizb is only used for anime searches
- allow only one category per search type, allow getting category by it
- show seeders/peerssc

currently not (yet) supported:
- multiple query generations per search
- ipv6

disclaimer:
- nzbindex is accessed using RSS, so 100 results max


++++
Improvements
- Way faster (searching, database handling, processing, stats). TODO: Get some numbers
- Hopefully more stable in the long run
- proper postfiltering of results in GUI
- Show messages and progress while searching and (somewhat) allow to cancel
- Sends all available identifiers instead of just one (may provide more results for id based searches in some cases)
- rss functionality with configurable caching, with cache interval as parameter
- improved log view in GUI (like in radarr/sonarr except for all messages)
- Fully unicode compatible TODO: Test this ;-)
- Background processes
- In the future: Self updating
- Reverse proxy support is better (doesn't matter if called by trailing slash)
- Option to add and remove categories
- better validation for configuration, including warnings
- store IP address in search / download history. opt-in. use nullable column. show what available in history
- catch all API errors and let user decide if a) code 500 is returned b) XML with error code c) empty results
- option to execute SQL queries for debugging
- option for torrent black hole
- option to display indexers' category names instead of mapped ones
- button to switch inclusion of disabled indexers in stats


...
++++


5 runs with 5 parallel calls to Hydra which will call 5 indexers
Hydra Python: 176s
Hydra Java: 27s

5 runs with 1 parallel call to Hydra which will call 5 indexers
Hydra Python: 7911ms
Hydra Java: 2200ms


Check out:
https://github.com/google/FreeBuilder
https://github.com/amaembo/streamex/blob/master/CHEATSHEET.md and/or http://www.javaslang.io/