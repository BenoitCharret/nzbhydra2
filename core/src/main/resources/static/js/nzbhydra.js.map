{"version":3,"sources":["nzbhydra.js","directives/title-row.js","directives/title-group.js","directives/tab-or-chart.js","directives/send-torrent-to-blackhole.js","directives/selection-button.js","directives/search-result.js","directives/search-result-non-title-columns.js","directives/on-finish-render.js","directives/keep-focus.js","directives/indexer-selection-button.js","directives/indexer-input.js","directives/hydra-updates.js","directives/hydra-news.js","directives/hydra-log.js","directives/focus-on.js","directives/duplicate-group.js","directives/download-nzbzip-button.js","directives/download-nzbs-button.js","directives/dataTableDirectives.js","directives/connection-test.js","directives/click-outside.js","directives/cfg-form-entry.js","directives/backup.js","directives/addable-nzbs.js","directives/addable-nzb.js","update-service.js","update-footer-controller.js","system-controller.js","stats-service.js","stats-controller.js","search-service.js","search-results-controller.js","search-history-service.js","search-history-controller.js","search-controller.js","restart-service.js","nzbhydra-control-service.js","nzb-download-service.js","modal.js","modal-service.js","migration-service.js","login-controller.js","indexer-statuses-controller.js","index-controller.js","hydra-auth-service.js","header-controller.js","generic-error-handler.js","formly-config.js","filters.js","file-selection-service.js","file-download-service.js","downloader-categories-service.js","download-history-controller.js","config-service.js","config-fields-service.js","config-controller.js","categories-service.js","backup-service.js"],"names":[],"mappingsnxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjhHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrhLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvpUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnpztFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7ahjnrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3YA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzvkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbhCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvjJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtnuEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"nzbhydra.js","sourcesContent":["// For caching HTML templates, see http://paulsalaets.com/pre-caching-angular-templates-with-gulp\r\nangular.module('templates', []);\r\n\r\nvar nzbhydraapp = angular.module('nzbhydraApp', ['angular-loading-bar', 'cgBusy', 'ui.bootstrap', 'ipCookie', 'angular-growl', 'angular.filter', 'filters', 'ui.router', 'blockUI', 'mgcrea.ngStrap', 'angularUtils.directives.dirPagination', 'nvd3', 'formly', 'formlyBootstrap', 'frapontillo.bootstrap-switch', 'ui.select', 'ngSanitize', 'checklist-model', 'ngAria', 'ngMessages', 'ui.router.title', 'LocalStorageModule', 'angular.filter', 'ngFileUpload', 'ngCookies', 'angular.chips', 'templates', 'base64', 'angularjs-dropdown-multiselect']);\r\n\r\nnzbhydraapp.config(['$compileProvider', function ($compileProvider) {\r\n    $compileProvider.debugInfoEnabled(false);\r\n}]);\r\n\r\nnzbhydraapp.config(['$animateProvider', function ($animateProvider) {\r\n    //$animateProvider.classNameFilter(/ng-animate-enabled/);\r\n}]);\r\n\r\nangular.module('nzbhydraApp').config([\"$stateProvider\", \"$urlRouterProvider\", \"$locationProvider\", \"blockUIConfig\", \"$urlMatcherFactoryProvider\", \"localStorageServiceProvider\", \"bootstrapped\", function ($stateProvider, $urlRouterProvider, $locationProvider, blockUIConfig, $urlMatcherFactoryProvider, localStorageServiceProvider, bootstrapped) {\r\n    blockUIConfig.autoBlock = false;\r\n    blockUIConfig.resetOnException = false;\r\n    blockUIConfig.autoInjectBodyBlock = false;\r\n    $urlMatcherFactoryProvider.strictMode(false);\r\n\r\n    $urlRouterProvider.otherwise(\"/\");\r\n\r\n    $stateProvider\r\n        .state('root', {\r\n            url: '',\r\n            abstract: true,\r\n            resolve: {\r\n                //loginRequired: loginRequired\r\n            },\r\n            views: {\r\n                'header': {\r\n                    templateUrl: 'static/html/states/header.html',\r\n                    controller: 'HeaderController'\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.config\", {\r\n            url: \"/config\",\r\n            views: {},\r\n            abstract: true\r\n        })\r\n        .state(\"root.config.main\", {\r\n            url: \"/main\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/config.html\",\r\n                    controller: \"ConfigController\",\r\n                    controllerAs: 'ctrl',\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.get();\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 0;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Config (Main)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.config.auth\", {\r\n            url: \"/auth\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/config.html\",\r\n                    controller: \"ConfigController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.get();\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 1;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Config (Auth)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.config.searching\", {\r\n            url: \"/searching\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/config.html\",\r\n                    controller: \"ConfigController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.get();\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 2;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Config (Searching)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.config.categories\", {\r\n            url: \"/categories\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/config.html\",\r\n                    controller: \"ConfigController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.get();\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 3;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Config (Categories)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.config.downloading\", {\r\n            url: \"/downloading\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/config.html\",\r\n                    controller: \"ConfigController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.get();\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 4;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Config (Downloading)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.config.indexers\", {\r\n            url: \"/indexers\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/config.html\",\r\n                    controller: \"ConfigController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.get();\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 5;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Config (Indexers)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.stats\", {\r\n            url: \"/stats\",\r\n            abstract: true,\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/stats.html\",\r\n                    controller: [\"$scope\", \"$state\", function ($scope, $state) {\r\n                        $scope.$state = $state;\r\n                    }],\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"stats\")\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Stats\"\r\n                        }]\r\n                    }\r\n\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.stats.main\", {\r\n            url: \"/stats\",\r\n            views: {\r\n                'stats@root.stats': {\r\n                    templateUrl: \"static/html/states/main-stats.html\",\r\n                    controller: \"StatsController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"stats\")\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Stats\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.stats.indexers\", {\r\n            url: \"/indexers\",\r\n            views: {\r\n                'stats@root.stats': {\r\n                    templateUrl: \"static/html/states/indexer-statuses.html\",\r\n                    controller: IndexerStatusesController,\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"stats\")\r\n                        }],\r\n                        statuses: [\"$http\", function ($http) {\r\n                            return $http.get(\"internalapi/indexerstatuses\").success(function (response) {\r\n                                return response;\r\n                            });\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Stats (Indexers)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.stats.searches\", {\r\n            url: \"/searches\",\r\n            views: {\r\n                'stats@root.stats': {\r\n                    templateUrl: \"static/html/states/search-history.html\",\r\n                    controller: SearchHistoryController,\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"stats\")\r\n                        }],\r\n                        history: ['loginRequired', 'SearchHistoryService', function (loginRequired, SearchHistoryService) {\r\n                            return SearchHistoryService.getSearchHistory();\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Stats (Searches)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.stats.downloads\", {\r\n            url: \"/downloads\",\r\n            views: {\r\n                'stats@root.stats': {\r\n                    templateUrl: 'static/html/states/download-history.html',\r\n                    controller: DownloadHistoryController,\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"stats\")\r\n                        }],\r\n                        downloads: [\"StatsService\", function (StatsService) {\r\n                            return StatsService.getDownloadHistory();\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Stats (Downloads)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.system\", {\r\n            url: \"/system\",\r\n            views: {},\r\n            abstract: true\r\n        })\r\n        .state(\"root.system.control\", {\r\n            url: \"/control\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/system.html\",\r\n                    controller: \"SystemController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        // askAdmin: ['loginRequired', '$http', function (loginRequired, $http) {\r\n                        //     return $http.get(\"internalapi/askadmin\");\r\n                        // }],\r\n                        activeTab: [function () {\r\n                            return 0;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"System\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.system.updates\", {\r\n            url: \"/updates\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/system.html\",\r\n                    controller: \"SystemController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 1;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"System (Updates)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.system.log\", {\r\n            url: \"/log\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/system.html\",\r\n                    controller: \"SystemController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 2;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"System (Log)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.system.backup\", {\r\n            url: \"/backup\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/system.html\",\r\n                    controller: \"SystemController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 3;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"System (Backup)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.system.bugreport\", {\r\n            url: \"/bugreport\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/system.html\",\r\n                    controller: \"SystemController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 4;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"System (Bug report)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.system.news\", {\r\n            url: \"/news\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/system.html\",\r\n                    controller: \"SystemController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 5;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"System (News)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.system.about\", {\r\n            url: \"/about\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/system.html\",\r\n                    controller: \"SystemController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 6;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"System (About)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        .state(\"root.search\", {\r\n            url: \"/?category&query&imdbid&tvdbid&title&season&episode&minsize&maxsize&minage&maxage&offsets&tvrageid&mode&tmdbid&indexers&tvmazeid\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/search.html\",\r\n                    controller: \"SearchController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"search\")\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Search\";\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.search.results\", {\r\n            views: {\r\n                'results@root.search': {\r\n                    templateUrl: \"static/html/states/search-results.html\",\r\n                    controller: \"SearchResultsController\",\r\n                    controllerAs: \"srController\",\r\n                    options: {\r\n                        inherit: true\r\n                    },\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"search\")\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            var title = \"Search results\";\r\n                            var details;\r\n                            if ($stateParams.title) {\r\n                                details = $stateParams.title;\r\n                            } else if ($stateParams.query) {\r\n                                details = $stateParams.query;\r\n                            }\r\n                            if (details) {\r\n                                title += \" (\" + details + \")\";\r\n                            }\r\n                            return title;\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.login\", {\r\n            url: \"/login\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/login.html\",\r\n                    controller: \"LoginController\",\r\n                    resolve: {\r\n                        loginRequired: function () {\r\n                            return null;\r\n                        },\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Login\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    ;\r\n\r\n\r\n    $locationProvider.html5Mode(true);\r\n\r\n\r\n    function loginRequired($q, $timeout, $state, HydraAuthService, type) {\r\n        var deferred = $q.defer();\r\n        var userInfos = HydraAuthService.getUserInfos();\r\n        var allowed = false;\r\n        if (type === \"search\") {\r\n            allowed = !userInfos.searchRestricted || userInfos.maySeeSearch;\r\n        } else if (type === \"stats\") {\r\n            allowed = !userInfos.statsRestricted || userInfos.maySeeStats;\r\n        } else if (type === \"admin\") {\r\n            allowed = !userInfos.adminRestricted || userInfos.maySeeAdmin;\r\n        } else {\r\n            allowed = true;\r\n        }\r\n        if (allowed || userInfos.authType !== \"FORM\") {\r\n            deferred.resolve();\r\n        } else {\r\n            $timeout(function () {\r\n                // This code runs after the authentication promise has been rejected.\r\n                // Go to the log-in page\r\n                $state.go(\"root.login\");\r\n            })\r\n        }\r\n        return deferred.promise;\r\n    }\r\n\r\n\r\n    //Because I don't know for what state the login is required / asked I have a function for each\r\n\r\n    function loginRequiredSearch($q, $timeout, $state, HydraAuthService) {\r\n        var deferred = $q.defer();\r\n        var userInfos = HydraAuthService.getUserInfos();\r\n        if (!userInfos.searchRestricted || userInfos.maySeeSearch || userInfos.authType !== \"FORM\") {\r\n            deferred.resolve();\r\n        } else {\r\n            $timeout(function () {\r\n                // This code runs after the authentication promise has been rejected.\r\n                // Go to the log-in page\r\n                $state.go(\"root.login\");\r\n            })\r\n        }\r\n        return deferred.promise;\r\n    }\r\n\r\n    function loginRequiredStats($q, $timeout, $state, HydraAuthService) {\r\n        var deferred = $q.defer();\r\n\r\n        var userInfos = HydraAuthService.getUserInfos();\r\n        if (!userInfos.statsRestricted || userInfos.maySeeStats || userInfos.authType !== \"FORM\") {\r\n            deferred.resolve();\r\n        } else {\r\n            $timeout(function () {\r\n                // This code runs after the authentication promise has been rejected.\r\n                // Go to the log-in page\r\n                $state.go(\"root.login\");\r\n            })\r\n        }\r\n        return deferred.promise;\r\n    }\r\n\r\n    function loginRequiredAdmin($q, $timeout, $state, HydraAuthService) {\r\n        var deferred = $q.defer();\r\n\r\n        var userInfos = HydraAuthService.getUserInfos();\r\n        if (!userInfos.statsRestricted || userInfos.maySeeAdmin || userInfos.authType != \"form\") {\r\n            deferred.resolve();\r\n        } else {\r\n            $timeout(function () {\r\n                // This code runs after the authentication promise has been rejected.\r\n                // Go to the log-in page\r\n                $state.go(\"root.login\");\r\n            })\r\n        }\r\n        return deferred.promise;\r\n    }\r\n\r\n    localStorageServiceProvider\r\n        .setPrefix('nzbhydra');\r\n    localStorageServiceProvider\r\n        .setNotify(true, false);\r\n}]);\r\n\r\n\r\nnzbhydraapp.config([\"paginationTemplateProvider\", function (paginationTemplateProvider) {\r\n    paginationTemplateProvider.setPath('static/html/dirPagination.tpl.html');\r\n}]);\r\n\r\nnzbhydraapp.config(['cfpLoadingBarProvider', function (cfpLoadingBarProvider) {\r\n    cfpLoadingBarProvider.latencyThreshold = 100;\r\n}]);\r\n\r\nnzbhydraapp.config(['growlProvider', function (growlProvider) {\r\n    growlProvider.globalTimeToLive(5000);\r\n    growlProvider.globalPosition('bottom-right');\r\n}]);\r\n\r\nnzbhydraapp.directive('ngEnter', function () {\r\n    return function (scope, element, attr) {\r\n        element.bind(\"keydown keypress\", function (event) {\r\n            if (event.which === 13) {\r\n                scope.$apply(function () {\r\n                    scope.$evalAsync(attr.ngEnter);\r\n                });\r\n\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    };\r\n});\r\n\r\nnzbhydraapp.filter('nzblink', function () {\r\n    return function (resultItem) {\r\n        var uri = new URI(\"internalapi/getnzb/user/\" + resultItem.searchResultId);\r\n        return uri.toString();\r\n    }\r\n});\r\n\r\nnzbhydraapp.factory('focus', [\"$rootScope\", \"$timeout\", function ($rootScope, $timeout) {\r\n    return function (name) {\r\n        $timeout(function () {\r\n            $rootScope.$broadcast('focusOn', name);\r\n        });\r\n    }\r\n}]);\r\n\r\nnzbhydraapp.run([\"$rootScope\", function ($rootScope) {\r\n    $rootScope.$on('$stateChangeSuccess',\r\n        function (event, toState, toParams, fromState, fromParams) {\r\n            try {\r\n                $rootScope.title = toState.views[Object.keys(toState.views)[0]].resolve.$title[1](toParams);\r\n            } catch (e) {\r\n\r\n            }\r\n\r\n        });\r\n}]);\r\n\r\nnzbhydraapp.filter('dereferer', [\"ConfigService\", function (ConfigService) {\r\n    return function (url) {\r\n        if (ConfigService.getSafe().dereferer) {\r\n            return ConfigService.getSafe().dereferer.replace(\"$s\", escape(url));\r\n        }\r\n        return url;\r\n    }\r\n}]);\r\n\r\nnzbhydraapp.config([\"$provide\", function ($provide) {\r\n    $provide.decorator(\"$exceptionHandler\", ['$delegate', '$injector', function ($delegate, $injector) {\r\n        return function (exception, cause) {\r\n            $delegate(exception, cause);\r\n            try {\r\n\r\n                if (angular.isDefined(exception.stack)) {\r\n                    var stack = exception.stack.split('\\n').map(function (line) {\r\n                        return line.trim();\r\n                    });\r\n                    stack = stack.join(\"\\n\");\r\n                    //$injector.get(\"$http\").put(\"internalapi/logerror\", {error: stack, cause: angular.isDefined(cause) ? cause.toString() : \"No known cause\"});\r\n                }\r\n            } catch (e) {\r\n                console.error(\"Unable to log JS exception to server\", e);\r\n            }\r\n        };\r\n    }]);\r\n}]);\r\n\r\n_.mixin({\r\n    isNullOrEmpty: function (string) {\r\n        return (_.isUndefined(string) || _.isNull(string) || (_.isString(string) && string.length === 0))\r\n    }\r\n});\r\n\r\nnzbhydraapp.factory('sessionInjector', [\"$injector\", function ($injector) {\r\n    var sessionInjector = {\r\n        response: function (response) {\r\n            if (response.headers(\"Hydra-MaySeeAdmin\") != null) {\r\n                $injector.get(\"HydraAuthService\").setLoggedInByBasic(response.headers(\"Hydra-MaySeeStats\") == \"True\", response.headers(\"Hydra-MaySeeAdmin\") == \"True\", response.headers(\"Hydra-Username\"))\r\n            }\r\n\r\n            return response;\r\n        }\r\n    };\r\n    return sessionInjector;\r\n}]);\r\n\r\nnzbhydraapp.config(['$httpProvider', function ($httpProvider) {\r\n    $httpProvider.interceptors.push('sessionInjector');\r\n}]);\r\n\r\nnzbhydraapp.directive('autoFocus', [\"$timeout\", function ($timeout) {\r\n    return {\r\n        restrict: 'AC',\r\n        link: function (_scope, _element) {\r\n            $timeout(function () {\r\n                _element[0].focus();\r\n            }, 0);\r\n        }\r\n    };\r\n}]);\r\n\r\n\r\nnzbhydraapp.factory('responseObserver', [\"$q\", \"$window\", \"growl\", function responseObserver($q, $window, growl) {\r\n    return {\r\n        'responseError': function (errorResponse) {\r\n            switch (errorResponse.status) {\r\n                case 403:\r\n                    growl.info(\"You are not allowed to visit that section.\");\r\n                    break;\r\n            }\r\n            if (angular.isDefined(errorResponse.config)) {\r\n                errorResponse.config.alreadyHandled = true;\r\n            }\r\n            return $q.reject(errorResponse);\r\n        }\r\n    };\r\n}]);\r\n\r\nnzbhydraapp.config([\"$httpProvider\", function ($httpProvider) {\r\n    $httpProvider.interceptors.push('responseObserver');\r\n}]);\r\n\r\n\r\nnzbhydraapp.factory('focus', [\"$timeout\", \"$window\", function ($timeout, $window) {\r\n    return function (id) {\r\n        // timeout makes sure that it is invoked after any other event has been triggered.\r\n        // e.g. click events that need to run before the focus or\r\n        // inputs elements that are in a disabled state but are enabled when those events\r\n        // are triggered.\r\n        $timeout(function () {\r\n            var element = $window.document.getElementById(id);\r\n            if (element)\r\n                element.focus();\r\n        });\r\n    };\r\n}]);\r\n\r\nnzbhydraapp.directive('eventFocus', [\"focus\", function (focus) {\r\n    return function (scope, elem, attr) {\r\n        elem.on(attr.eventFocus, function () {\r\n            focus(attr.eventFocusId);\r\n        });\r\n\r\n        // Removes bound events in the element itself\r\n        // when the scope is destroyed\r\n        scope.$on('$destroy', function () {\r\n            elem.off(attr.eventFocus);\r\n        });\r\n    };\r\n}]);","angular\r\n    .module('nzbhydraApp')\r\n    .directive('titleRow', titleRow);\r\n\r\nfunction titleRow() {\r\n    return {\r\n        templateUrl: 'static/html/directives/title-row.html',\r\n        scope: {\r\n            duplicates: \"<\",\r\n            selected: \"<\",\r\n            rowIndex: \"@\"\r\n        },\r\n        controller: ['$scope', '$element', '$attrs', titleRowController]\r\n    };\r\n\r\n    function titleRowController($scope) {\r\n        $scope.expanded = false;\r\n\r\n        $scope.duplicatesToShow = duplicatesToShow;\r\n\r\n        function duplicatesToShow() {\r\n            if ($scope.expanded && $scope.duplicates.length > 1) {\r\n\r\n                return $scope.duplicates;\r\n            } else {\r\n\r\n                return [$scope.duplicates[0]];\r\n            }\r\n        }\r\n\r\n    }\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('titleGroup', titleGroup);\r\n\r\nfunction titleGroup() {\r\n    return {\r\n        templateUrl: 'static/html/directives/title-group.html',\r\n        scope: {\r\n            titles: \"<\",\r\n            selected: \"=\",\r\n            expanded: \"=\",\r\n            rowIndex: \"<\",\r\n            doShowDuplicates: \"<\",\r\n            internalRowIndex: \"@\"\r\n        },\r\n        controller: ['$scope', '$element', '$attrs', controller],\r\n        multiElement: true\r\n    };\r\n\r\n    function controller($scope, $element, $attrs) {\r\n        $scope.titleGroupExpanded = $scope.expanded.indexOf($scope.titles[0][0].title) > -1;\r\n\r\n        $scope.$on(\"toggleTitleExpansion\", function (event, isExpanded, title) {\r\n            $scope.titleGroupExpanded = isExpanded;\r\n            var index = $scope.expanded.indexOf(title);\r\n            if (!isExpanded && index > -1) {\r\n                $scope.expanded.splice(index, 1);\r\n            } else if(isExpanded){\r\n                $scope.expanded.push(title);\r\n            }\r\n\r\n            event.stopPropagation();\r\n        });\r\n\r\n\r\n        $scope.titlesToShow = titlesToShow;\r\n\r\n        function titlesToShow() {\r\n            return $scope.titles.slice(1);\r\n        }\r\n\r\n    }\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('tabOrChart', tabOrChart);\r\n\r\nfunction tabOrChart() {\r\n    return {\r\n        templateUrl: 'static/html/directives/tab-or-chart.html',\r\n        transclude: {\r\n            \"chartSlot\": \"chart\",\r\n            \"tableSlot\": \"table\"\r\n        },\r\n        restrict: 'E',\r\n        replace: true,\r\n        scope: {\r\n            display: \"@\"\r\n        }\r\n\r\n    };\r\n\r\n}\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('sendTorrentToBlackhole', sendTorrentToBlackhole);\r\n\r\nfunction sendTorrentToBlackhole() {\r\n    controller.$inject = [\"$scope\", \"$http\", \"growl\", \"ConfigService\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/send-torrent-to-blackhole.html',\r\n        scope: {\r\n            searchResultId: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, $http, growl, ConfigService) {\r\n        $scope.useBlackhole = ConfigService.getSafe().downloading.saveTorrentsTo !== null && ConfigService.getSafe().downloading.saveTorrentsTo !== \"\";\r\n        $scope.cssClass = \"glyphicon-save-file\";\r\n        $scope.add = function () {\r\n            $scope.cssClass = \"nzb-spinning\";\r\n            $http.get(\"internalapi/saveTorrent/\" + $scope.searchResultId).then(function (response) {\r\n                if (response.data.successful) {\r\n                    $scope.cssClass = \"glyphicon-ok\";\r\n                } else {\r\n                    $scope.cssClass = \"glyphicon-remove\";\r\n                    growl.error(response.data.message);\r\n                }\r\n            });\r\n\r\n        };\r\n\r\n\r\n    }\r\n}\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('selectionButton', selectionButton);\r\n\r\nfunction selectionButton() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/selection-button.html',\r\n        scope: {\r\n            selected: \"=\",\r\n            selectable: \"=\",\r\n            invertSelection: \"<\",\r\n            selectAll: \"<\",\r\n            deselectAll: \"<\",\r\n            btn: \"@\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n\r\n        if (angular.isUndefined($scope.btn)) {\r\n            $scope.btn = \"default\"; //Will form class \"btn-default\"\r\n        }\r\n\r\n        if (angular.isUndefined($scope.invertSelection)) {\r\n            $scope.invertSelection = function () {\r\n                $scope.selected = _.difference($scope.selectable, $scope.selected);\r\n            };\r\n        }\r\n\r\n        if (angular.isUndefined($scope.selectAll)) {\r\n            $scope.selectAll = function () {\r\n                $scope.selected.push.apply($scope.selected, $scope.selectable);\r\n            };\r\n        }\r\n\r\n        if (angular.isUndefined($scope.deselectAll)) {\r\n            $scope.deselectAll = function () {\r\n                $scope.selected.splice(0, $scope.selected.length);\r\n            };\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('searchResult', searchResult);\r\n\r\nfunction searchResult() {\r\n    return {\r\n        templateUrl: 'static/html/directives/search-result.html',\r\n        require: '^titleGroup',\r\n        scope: {\r\n            titleGroup: \"<\",\r\n            showDuplicates: \"<\",\r\n            selected: \"<\",\r\n            rowIndex: \"<\"\r\n        },\r\n        controller: ['$scope', '$element', '$attrs', controller],\r\n        multiElement: true\r\n    };\r\n\r\n    function controller($scope, $element, $attrs) {\r\n        $scope.titleGroupExpanded = false;\r\n        $scope.hashGroupExpanded = {};\r\n\r\n        $scope.toggleTitleGroup = function () {\r\n            $scope.titleGroupExpanded = !$scope.titleGroupExpanded;\r\n            if (!$scope.titleGroupExpanded) {\r\n                $scope.hashGroupExpanded[$scope.titleGroup[0][0].hash] = false; //Also collapse the first title's duplicates\r\n            }\r\n        };\r\n\r\n        $scope.groupingRowDuplicatesToShow = groupingRowDuplicatesToShow;\r\n\r\n        function groupingRowDuplicatesToShow() {\r\n            if ($scope.showDuplicates && $scope.titleGroup[0].length > 1 && $scope.hashGroupExpanded[$scope.titleGroup[0][0].hash]) {\r\n                return $scope.titleGroup[0].slice(1);\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n\r\n        //<div ng-repeat=\"hashGroup in titleGroup\" ng-if=\"titleGroup.length > 0 && titleGroupExpanded\"  class=\"search-results-row\">\r\n        $scope.otherTitleRowsToShow = otherTitleRowsToShow;\r\n\r\n        function otherTitleRowsToShow() {\r\n            if ($scope.titleGroup.length > 1 && $scope.titleGroupExpanded) {\r\n                return $scope.titleGroup.slice(1);\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n\r\n        $scope.hashGroupDuplicatesToShow = hashGroupDuplicatesToShow;\r\n\r\n        function hashGroupDuplicatesToShow(hashGroup) {\r\n            if ($scope.showDuplicates && $scope.hashGroupExpanded[hashGroup[0].hash]) {\r\n                return hashGroup.slice(1);\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('otherColumns', otherColumns);\r\n\r\nfunction otherColumns($http, $templateCache, $compile, $window) {\r\n    controller.$inject = [\"$scope\", \"$http\", \"$uibModal\", \"growl\", \"HydraAuthService\"];\r\n    return {\r\n        scope: {\r\n            result: \"<\"\r\n        },\r\n        multiElement: true,\r\n\r\n        link: function (scope, element, attrs) {\r\n            $http.get('static/html/directives/search-result-non-title-columns.html', {cache: $templateCache}).success(function (templateContent) {\r\n                element.replaceWith($compile(templateContent)(scope));\r\n            });\r\n\r\n        },\r\n        // templateUrl: 'static/html/directives/search-result-non-title-columns.html',\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, $http, $uibModal, growl, HydraAuthService) {\r\n\r\n        $scope.showDetailsDl = HydraAuthService.getUserInfos().maySeeDetailsDl;\r\n\r\n        $scope.showNfo = showNfo;\r\n\r\n        function showNfo(resultItem) {\r\n            if (resultItem.has_nfo === 0) {\r\n                return;\r\n            }\r\n            var uri = new URI(\"internalapi/nfo/\" + resultItem.searchResultId);\r\n            return $http.get(uri.toString()).then(function (response) {\r\n                if (response.data.successful) {\r\n                    if (response.data.hasNfo) {\r\n                        $scope.openModal(\"lg\", response.data.content)\r\n                    } else {\r\n                        growl.info(\"No NFO available\");\r\n                    }\r\n                } else {\r\n                    growl.error(response.data.content);\r\n                }\r\n            });\r\n        }\r\n\r\n        $scope.openModal = openModal;\r\n\r\n        function openModal(size, nfo) {\r\n            var modalInstance = $uibModal.open({\r\n                template: '<pre class=\"nfo\"><span ng-bind-html=\"nfo\"></span></pre>',\r\n                controller: NfoModalInstanceCtrl,\r\n                size: size,\r\n                resolve: {\r\n                    nfo: function () {\r\n                        return nfo;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then();\r\n        }\r\n\r\n        $scope.downloadNzb = downloadNzb;\r\n\r\n        function downloadNzb(resultItem) {\r\n            //href = \"{{ result.link }}\"\r\n            $window.location.href = resultItem.link;\r\n        }\r\n\r\n        $scope.getNfoTooltip = function () {\r\n            if ($scope.result.hasNfo === \"YES\") {\r\n                return \"Show NFO\"\r\n            } else if ($scope.result.hasNfo === \"MAYBE\") {\r\n                return \"Try to load NFO (may not be available)\";\r\n            } else {\r\n                return \"No NFO available\";\r\n            }\r\n        };\r\n    }\r\n}\r\notherColumns.$inject = [\"$http\", \"$templateCache\", \"$compile\", \"$window\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('NfoModalInstanceCtrl', NfoModalInstanceCtrl);\r\n\r\nfunction NfoModalInstanceCtrl($scope, $uibModalInstance, nfo) {\r\n\r\n    $scope.nfo = nfo;\r\n\r\n    $scope.ok = function () {\r\n        $uibModalInstance.close($scope.selected.item);\r\n    };\r\n\r\n    $scope.cancel = function () {\r\n        $uibModalInstance.dismiss();\r\n    };\r\n}\r\nNfoModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"nfo\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .filter('kify', kify);\r\n\r\nfunction kify() {\r\n    return function (number) {\r\n        if (number > 1000) {\r\n            return Math.round(number / 1000) + \"k\";\r\n        }\r\n        return number;\r\n    }\r\n}","//Can be used in an ng-repeat directive to call a function when the last element was rendered\r\n//We use it to mark the end of sorting / filtering so we can stop blocking the UI\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .directive('onFinishRender', onFinishRender);\r\n\r\nfunction onFinishRender($timeout) {\r\n    function linkFunction(scope, element, attr) {\r\n\r\n        if (scope.$last === true) {\r\n            $timeout(function () {\r\n                scope.$evalAsync(attr.onFinishRender);\r\n            });\r\n        }\r\n    }\r\n\r\n    return {\r\n        link: linkFunction\r\n    }\r\n}\r\nonFinishRender.$inject = [\"$timeout\"];","angular\r\n    .module('nzbhydraApp').directive(\"keepFocus\", ['$timeout', function ($timeout) {\r\n    /*\r\n     Intended use:\r\n     <input keep-focus ng-model='someModel.value'></input>\r\n     */\r\n    return {\r\n        restrict: 'A',\r\n        require: 'ngModel',\r\n        link: function ($scope, $element, attrs, ngModel) {\r\n\r\n            ngModel.$parsers.unshift(function (value) {\r\n                $timeout(function () {\r\n                    $element[0].focus();\r\n                });\r\n                return value;\r\n            });\r\n\r\n        }\r\n    };\r\n}])","/*\r\n *  (C) Copyright 2017 TheOtherP (theotherp@gmx.de)\r\n *\r\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *  you may not use this file except in compliance with the License.\r\n *  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *  Unless required by applicable law or agreed to in writing, software\r\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *  See the License for the specific language governing permissions and\r\n *  limitations under the License.\r\n */\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .directive('indexerSelectionButton', indexerSelectionButton);\r\n\r\nfunction indexerSelectionButton() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/indexer-selection-button.html',\r\n        scope: {\r\n            selectedIndexers: \"=\",\r\n            availableIndexers: \"=\",\r\n            btn: \"@\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n\r\n        $scope.anyTorrentIndexersSelectable = _.any($scope.availableIndexers,\r\n            function (indexer) {\r\n                return indexer.searchModuleType === \"TORZNAB\";\r\n            }\r\n        );\r\n\r\n        $scope.invertSelection = function () {\r\n            _.forEach($scope.availableIndexers, function (x) {\r\n                var index = _.indexOf($scope.selectedIndexers, x.name);\r\n                if (index === -1) {\r\n                    $scope.selectedIndexers.push(x.name);\r\n                } else {\r\n                    $scope.selectedIndexers.splice(index, 1);\r\n                }\r\n            });\r\n        };\r\n\r\n        $scope.selectAll = function () {\r\n            $scope.deselectAll();\r\n            $scope.selectedIndexers.push.apply($scope.selectedIndexers, _.pluck($scope.availableIndexers, \"name\"));\r\n        };\r\n\r\n        $scope.deselectAll = function () {\r\n            $scope.selectedIndexers.splice(0, $scope.selectedIndexers.length);\r\n        };\r\n\r\n        function selectByPredicate(predicate) {\r\n            $scope.deselectAll();\r\n            $scope.selectedIndexers.push.apply($scope.selectedIndexers,\r\n                _.pluck(\r\n                    _.filter($scope.availableIndexers,\r\n                        predicate\r\n                    ), \"name\")\r\n            );\r\n        }\r\n\r\n        $scope.reset = function () {\r\n            selectByPredicate(function (indexer) {\r\n                return indexer.preselect;\r\n            });\r\n        };\r\n\r\n        $scope.selectAllUsenet = function () {\r\n            selectByPredicate(function (indexer) {\r\n                return indexer.searchModuleType !== \"TORZNAB\";\r\n            });\r\n        };\r\n\r\n        $scope.selectAllTorrent = function () {\r\n            selectByPredicate(function (indexer) {\r\n                return indexer.searchModuleType === \"TORZNAB\";\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('indexerInput', indexerInput);\r\n\r\nfunction indexerInput() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/indexer-input.html',\r\n        scope: {\r\n            indexer: \"=\",\r\n            model: \"=\",\r\n            onClick: \"=\"\r\n        },\r\n        replace: true,\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n        $scope.isFocused = false;\r\n\r\n        $scope.onFocus = function () {\r\n            $scope.isFocused = true;\r\n        };\r\n\r\n        $scope.onBlur = function () {\r\n            $scope.isFocused = false;\r\n        };\r\n\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('hydraupdates', hydraupdates);\r\n\r\nfunction hydraupdates() {\r\n    controller.$inject = [\"$scope\", \"UpdateService\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/updates.html',\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, UpdateService) {\r\n\r\n        $scope.loadingPromise = UpdateService.getInfos().then(function (data) {\r\n            $scope.currentVersion = data.data.currentVersion;\r\n            $scope.repVersion = data.data.latestVersion;\r\n            $scope.updateAvailable = data.data.updateAvailable;\r\n            $scope.latestVersionIgnored = data.data.latestVersionIgnored;\r\n            $scope.changelog = data.data.changelog;\r\n            console.log($scope);\r\n        });\r\n\r\n        UpdateService.getVersionHistory().then(function (data) {\r\n            $scope.versionHistory = data.data;\r\n        });\r\n\r\n        $scope.update = function () {\r\n            UpdateService.update();\r\n        };\r\n\r\n        $scope.showChangelog = function () {\r\n            UpdateService.showChanges($scope.changelog);\r\n        };\r\n\r\n        $scope.forceUpdate = function () {\r\n            UpdateService.update()\r\n        };\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('hydraNews', hydraNews);\r\n\r\nfunction hydraNews() {\r\n    controller.$inject = [\"$scope\", \"$http\"];\r\n    return {\r\n        templateUrl: \"static/html/directives/news.html\",\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, $http) {\r\n\r\n        return $http.get(\"internalapi/news\").success(function (data) {\r\n            $scope.news = data;\r\n        });\r\n\r\n\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('hydralog', hydralog);\r\n\r\nfunction hydralog() {\r\n    controller.$inject = [\"$scope\", \"$http\", \"$interval\", \"$uibModal\", \"$sce\", \"localStorageService\", \"growl\"];\r\n    return {\r\n        templateUrl: \"static/html/directives/log.html\",\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, $http, $interval, $uibModal, $sce, localStorageService, growl) {\r\n        $scope.tailInterval = null;\r\n        $scope.doUpdateLog = localStorageService.get(\"doUpdateLog\") !== null ? localStorageService.get(\"doUpdateLog\") : false;\r\n        $scope.doTailLog = localStorageService.get(\"doTailLog\") !== null ? localStorageService.get(\"doTailLog\") : false;\r\n\r\n        $scope.active = 0;\r\n        $scope.currentJsonIndex = 0;\r\n        $scope.hasMoreJsonLines = true;\r\n\r\n        function getLog(index) {\r\n            if ($scope.active === 0) {\r\n                return $http.get(\"internalapi/debuginfos/jsonlogs\", {params: {offset: index, limit: 500}}).success(function (data) {\r\n                    $scope.jsonLogLines = angular.fromJson(data.lines);\r\n                    $scope.hasMoreJsonLines = data.hasMore;\r\n                });\r\n            } else if ($scope.active === 1) {\r\n                return $http.get(\"internalapi/debuginfos/currentlogfile\").success(function (data) {\r\n                    $scope.log = $sce.trustAsHtml(data.replace(/&/g, \"&amp;\")\r\n                        .replace(/</g, \"&lt;\")\r\n                        .replace(/>/g, \"&gt;\")\r\n                        .replace(/\"/g, \"&quot;\")\r\n                        .replace(/'/g, \"&#039;\"));\r\n                }, function(data) {\r\n                    growl.error(data)\r\n                });\r\n            } else if ($scope.active === 2) {\r\n                return $http.get(\"internalapi/debuginfos/logfilenames\").success(function (data) {\r\n                    $scope.logfilenames = data;\r\n                });\r\n            }\r\n        }\r\n\r\n        $scope.logPromise = getLog();\r\n\r\n        $scope.select = function (index) {\r\n            $scope.active = index;\r\n            $scope.update();\r\n        };\r\n\r\n        $scope.scrollToBottom = function () {\r\n            document.getElementById(\"logfile\").scrollTop = 10000000;\r\n            document.getElementById(\"logfile\").scrollTop = 100001000;\r\n        };\r\n\r\n        $scope.update = function () {\r\n            getLog($scope.currentJsonIndex);\r\n            if ($scope.active === 1) {\r\n                $scope.scrollToBottom();\r\n            }\r\n        };\r\n\r\n        $scope.getOlderFormatted = function () {\r\n            getLog($scope.currentJsonIndex + 500).then(function () {\r\n                $scope.currentJsonIndex += 500;\r\n            });\r\n\r\n        };\r\n\r\n        $scope.getNewerFormatted = function () {\r\n            var index = Math.max($scope.currentJsonIndex - 500, 0);\r\n            getLog(index);\r\n            $scope.currentJsonIndex = index;\r\n        };\r\n\r\n        function startUpdateLogInterval() {\r\n            $scope.tailInterval = $interval(function () {\r\n                if ($scope.active === 1) {\r\n                    $scope.update();\r\n                    if ($scope.doTailLog && $scope.active === 1) {\r\n                        $scope.scrollToBottom();\r\n                    }\r\n                }\r\n            }, 5000);\r\n        }\r\n\r\n        $scope.toggleUpdate = function (doUpdateLog) {\r\n            $scope.doUpdateLog = doUpdateLog;\r\n            if ($scope.doUpdateLog) {\r\n                startUpdateLogInterval();\r\n            } else if ($scope.tailInterval !== null) {\r\n                console.log(\"Cancelling\");\r\n                $interval.cancel($scope.tailInterval);\r\n                localStorageService.set(\"doTailLog\", false);\r\n                $scope.doTailLog = false;\r\n            }\r\n            localStorageService.set(\"doUpdateLog\", $scope.doUpdateLog);\r\n        };\r\n\r\n        $scope.toggleTailLog = function () {\r\n            localStorageService.set(\"doTailLog\", $scope.doTailLog);\r\n        };\r\n\r\n        $scope.openModal = function openModal(entry) {\r\n            var modalInstance = $uibModal.open({\r\n                templateUrl: 'log-entry.html',\r\n                controller: LogModalInstanceCtrl,\r\n                size: \"xl\",\r\n                resolve: {\r\n                    entry: function () {\r\n                        return entry;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then();\r\n        };\r\n\r\n        $scope.$on('$destroy', function () {\r\n            if ($scope.tailInterval !== null) {\r\n                $interval.cancel($scope.tailInterval);\r\n            }\r\n        });\r\n\r\n        if ($scope.doUpdateLog) {\r\n            startUpdateLogInterval();\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('LogModalInstanceCtrl', LogModalInstanceCtrl);\r\n\r\nfunction LogModalInstanceCtrl($scope, $uibModalInstance, entry) {\r\n\r\n    $scope.entry = entry;\r\n\r\n    $scope.ok = function () {\r\n        $uibModalInstance.dismiss();\r\n    };\r\n}\r\nLogModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"entry\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .filter('formatTimestamp', formatTimestamp);\r\n\r\nfunction formatTimestamp() {\r\n    return function (date) {\r\n        return moment(date).local().format(\"YYYY-MM-DD HH:mm\");\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .filter('escapeHtml', escapeHtml);\r\n\r\nfunction escapeHtml($sanitize) {\r\n    return function (text) {\r\n        return $sanitize(text);\r\n    }\r\n}\r\nescapeHtml.$inject = [\"$sanitize\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .filter('formatClassname', formatClassname);\r\n\r\nfunction formatClassname() {\r\n    return function (fqn) {\r\n        return fqn.substr(fqn.lastIndexOf(\".\") + 1);\r\n\r\n    }\r\n}","angular\r\n    .module('nzbhydraApp').directive('focusOn', focusOn);\r\n\r\nfunction focusOn() {\r\n    return directive;\r\n\r\n    function directive(scope, elem, attr) {\r\n        scope.$on('focusOn', function (e, name) {\r\n            if (name === attr.focusOn) {\r\n                elem[0].focus();\r\n            }\r\n        });\r\n    }\r\n}\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('duplicateGroup', duplicateGroup);\r\n\r\nfunction duplicateGroup() {\r\n    titleRowController.$inject = [\"$scope\", \"localStorageService\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/duplicate-group.html',\r\n        scope: {\r\n            duplicates: \"<\",\r\n            selected: \"=\",\r\n            isFirstRow: \"<\",\r\n            rowIndex: \"<\",\r\n            displayTitleToggle: \"<\",\r\n            internalRowIndex: \"@\",\r\n            titlesExpanded: \"=\"\r\n        },\r\n        controller: titleRowController\r\n    };\r\n\r\n    function titleRowController($scope, localStorageService) {\r\n        $scope.internalRowIndex = Number($scope.internalRowIndex);\r\n        $scope.rowIndex = Number($scope.rowIndex);\r\n        $scope.duplicatesExpanded = false;\r\n        $scope.foo = {\r\n            duplicatesDisplayed: localStorageService.get(\"duplicatesDisplayed\") !== null ? localStorageService.get(\"duplicatesDisplayed\") : false\r\n        };\r\n        $scope.duplicatesToShow = duplicatesToShow;\r\n\r\n        function duplicatesToShow() {\r\n            return $scope.duplicates.slice(1);\r\n        }\r\n\r\n        $scope.toggleTitleExpansion = function () {\r\n            $scope.titlesExpanded = !$scope.titlesExpanded;\r\n            $scope.$emit(\"toggleTitleExpansion\", $scope.titlesExpanded, $scope.duplicates[0].title);\r\n        };\r\n\r\n        $scope.toggleDuplicateExpansion = function () {\r\n            $scope.duplicatesExpanded = !$scope.duplicatesExpanded;\r\n        };\r\n\r\n        $scope.$on(\"invertSelection\", function () {\r\n            for (var i = 0; i < $scope.duplicates.length; i++) {\r\n                if ($scope.duplicatesExpanded) {\r\n                    invertSelection($scope.selected, $scope.duplicates[i]);\r\n                } else {\r\n                    if (i > 0) {\r\n                        //Always remove duplicates that aren't displayed\r\n                        invertSelection($scope.selected, $scope.duplicates[i], true);\r\n                    } else {\r\n                        invertSelection($scope.selected, $scope.duplicates[i]);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        $scope.$on(\"deselectAll\", function () {\r\n            $scope.selected.splice(0, $scope.selected.length);\r\n\r\n        });\r\n        $scope.$on(\"selectAll\", function () {\r\n            $scope.selected.push.apply($scope.selected, $scope.duplicates);\r\n        });\r\n\r\n        $scope.$on(\"duplicatesDisplayed\", function (event, args) {\r\n            $scope.foo.duplicatesDisplayed = args;\r\n            if (!args) {\r\n                $scope.duplicatesExpanded = false;\r\n            }\r\n        });\r\n\r\n        $scope.clickCheckbox = function (event) {\r\n            var globalCheckboxIndex = $scope.rowIndex * 1000 + $scope.internalRowIndex * 100 + Number(event.currentTarget.dataset.checkboxIndex);\r\n\r\n            $scope.$emit(\"checkboxClicked\", event, globalCheckboxIndex, event.currentTarget.checked);\r\n        };\r\n\r\n        function isBetween(num, betweena, betweenb) {\r\n            return (betweena <= num && num <= betweenb) || (betweena >= num && num >= betweenb);\r\n        }\r\n\r\n        $scope.$on(\"shiftClick\", function (event, startIndex, endIndex, newValue) {\r\n            var globalDuplicateGroupIndex = $scope.rowIndex * 1000 + $scope.internalRowIndex * 100;\r\n            if (isBetween(globalDuplicateGroupIndex, startIndex, endIndex)) {\r\n\r\n                for (var i = 0; i < $scope.duplicates.length; i++) {\r\n                    if (isBetween(globalDuplicateGroupIndex + i, startIndex, endIndex)) {\r\n                        if (i === 0 || $scope.duplicatesExpanded) {\r\n                            console.log(\"Indirectly clicked row with global index \" + (globalDuplicateGroupIndex + i) + \" setting new checkbox value to \" + newValue);\r\n                            var index = _.indexOf($scope.selected, $scope.duplicates[i]);\r\n                            if (index === -1 && newValue) {\r\n                                $scope.selected.push($scope.duplicates[i]);\r\n                            } else if (index > -1 && !newValue) {\r\n                                $scope.selected.splice(index, 1);\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        function invertSelection(a, b, dontPush) {\r\n            var index = _.indexOf(a, b);\r\n            if (index > -1) {\r\n                a.splice(index, 1);\r\n            } else {\r\n                if (!dontPush)\r\n                    a.push(b);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('downloadNzbzipButton', downloadNzbzipButton);\r\n\r\nfunction downloadNzbzipButton() {\r\n    controller.$inject = [\"$scope\", \"growl\", \"$http\", \"FileDownloadService\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/download-nzbzip-button.html',\r\n        require: ['^searchResults'],\r\n        scope: {\r\n            searchResults: \"<\",\r\n            searchTitle: \"<\",\r\n            callback: \"&\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, growl, $http, FileDownloadService) {\r\n\r\n        $scope.download = function () {\r\n            if (angular.isUndefined($scope.searchResults) || $scope.searchResults.length === 0) {\r\n                growl.info(\"You should select at least one result...\");\r\n            } else {\r\n                var values = _.map($scope.searchResults, function (value) {\r\n                    return value.searchResultId;\r\n                });\r\n                var link = \"internalapi/nzbzip\";\r\n\r\n                var searchTitle;\r\n                if (angular.isDefined($scope.searchTitle)) {\r\n                    searchTitle = \" for \" + $scope.searchTitle.replace(\"[^a-zA-Z0-9.-]\", \"_\");\r\n                } else {\r\n                    searchTitle = \"\";\r\n                }\r\n                var filename = \"NZBHydra NZBs\" + searchTitle + \".zip\";\r\n                $http({method: \"post\", url: link, data: values}).success(function (response) {\r\n                    if (response.successful && response.zip !== null) {\r\n                        //FileDownloadService.sendFile($base64.decode(response.zip), filename);\r\n                        link = \"internalapi/nzbzipDownload\";\r\n                        FileDownloadService.downloadFile(link, filename, \"POST\", response.zipFilepath);\r\n                        if (angular.isDefined($scope.callback)) {\r\n                            $scope.callback({result:response.addedIds});\r\n                        }\r\n                        if (response.missedIds.length > 0) {\r\n                            growl.error(\"Unable to add \" + response.missedIds.length + \" out of \" + values.length + \" NZBs to ZIP\");\r\n                        }\r\n                    }\r\n                }).error(function (data, status, headers, config) {\r\n                    growl.error(status);\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('downloadNzbsButton', downloadNzbsButton);\r\n\r\nfunction downloadNzbsButton() {\r\n    controller.$inject = [\"$scope\", \"NzbDownloadService\", \"growl\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/download-nzbs-button.html',\r\n        require: ['^searchResults'],\r\n        scope: {\r\n            searchResults: \"<\",\r\n            callback: \"&\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, NzbDownloadService, growl) {\r\n\r\n        $scope.downloaders = NzbDownloadService.getEnabledDownloaders();\r\n\r\n        $scope.download = function (downloader) {\r\n            if (angular.isUndefined($scope.searchResults) || $scope.searchResults.length === 0) {\r\n                growl.info(\"You should select at least one result...\");\r\n            } else {\r\n\r\n                var values = _.map(_.filter($scope.searchResults, function (value) {\r\n                    if (value.downloadType === \"NZB\") {\r\n                        return true;\r\n                    } else {\r\n                        console.log(\"Not sending result with download type \" +value.downloadType + \" to downloader\");\r\n                        return false;\r\n                    }\r\n                }), function (value) {\r\n                    return value.searchResultId;\r\n                });\r\n\r\n                NzbDownloadService.download(downloader, values).then(function (response) {\r\n                    if (angular.isDefined(response.data)) {\r\n                        if (response !== \"dismissed\") {\r\n                            if (response.data.successful) {\r\n                                growl.info(\"Successfully added all NZBs\");\r\n                            } else {\r\n                                growl.error(response.data.message);\r\n                            }\r\n                        } else {\r\n                            growl.error(\"Error while adding NZBs\");\r\n                        }\r\n                        if (angular.isDefined($scope.callback)) {\r\n                            $scope.callback({result:response.data.addedIds});\r\n                        }\r\n                    }\r\n                }, function () {\r\n                    growl.error(\"Error while adding NZBs\");\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp').directive(\"columnFilterWrapper\", columnFilterWrapper);\r\n\r\nfunction columnFilterWrapper() {\r\n    controller.$inject = [\"$scope\", \"$document\"];\r\n    return {\r\n        restrict: \"E\",\r\n        templateUrl: 'static/html/dataTable/columnFilterOuter.html',\r\n        transclude: true,\r\n        controllerAs: 'columnFilterWrapperCtrl',\r\n        scope: true,\r\n        bindToController: true,\r\n        controller: controller,\r\n        link: function (scope, element, attr) {\r\n            scope.element = element;\r\n\r\n        }\r\n    };\r\n\r\n    function controller($scope, $document) {\r\n        var vm = this;\r\n\r\n        vm.open = false;\r\n        vm.isActive = false;\r\n\r\n        vm.toggle = function () {\r\n            vm.open = !vm.open;\r\n            if (vm.open) {\r\n                $scope.$broadcast(\"opened\");\r\n            }\r\n        };\r\n\r\n        vm.clear = function() {\r\n            if (vm.open) {\r\n                $scope.$broadcast(\"clear\");\r\n            }\r\n        };\r\n\r\n        $scope.$on(\"filter\", function (event, column, filterModel, isActive) {\r\n            vm.open = false;\r\n            vm.isActive = isActive;\r\n        });\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nangular\r\n    .module('nzbhydraApp').directive(\"freetextFilter\", freetextFilter);\r\n\r\nfunction freetextFilter() {\r\n    controller.$inject = [\"$scope\", \"focus\"];\r\n    return {\r\n        template: '<ng-include src=\"\\'static/html/dataTable/columnFilterFreetext.html\\'\"/>',\r\n        require: \"^columnFilterWrapper\",\r\n        controllerAs: 'innerController',\r\n        scope: {\r\n            column: \"@\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, focus) {\r\n        $scope.data = {};\r\n\r\n        $scope.$on(\"opened\", function () {\r\n            focus(\"freetext-filter-input\");\r\n        });\r\n\r\n        $scope.onKeypress = function (keyEvent) {\r\n            if (keyEvent.which === 13) {\r\n                $scope.$emit(\"filter\", $scope.column, {filterValue: $scope.data.filter, filterType: \"freetext\"}, angular.isDefined($scope.data.filter) && $scope.data.filter.length > 0);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp').directive(\"checkboxesFilter\", checkboxesFilter);\r\n\r\nfunction checkboxesFilter() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        template: '<ng-include src=\"\\'static/html/dataTable/columnFilterCheckboxes.html\\'\"/>',\r\n        controllerAs: 'checkboxesFilterController',\r\n        scope: {\r\n            column: \"@\",\r\n            entries: \"<\",\r\n            preselect: \"<\",\r\n            showInvert: \"<\",\r\n            isBoolean: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n        $scope.selected = {\r\n            entries: []\r\n        };\r\n        $scope.active = false;\r\n\r\n        if ($scope.preselect) {\r\n            $scope.selected.entries.push.apply($scope.selected.entries, $scope.entries);\r\n        }\r\n\r\n        $scope.invert = function () {\r\n            $scope.selected.entries = _.difference($scope.entries, $scope.selected.entries);\r\n        };\r\n\r\n        $scope.selectAll = function () {\r\n            $scope.selected.entries.push.apply($scope.selected.entries, $scope.entries);\r\n        };\r\n\r\n        $scope.deselectAll = function () {\r\n            $scope.selected.entries.splice(0, $scope.selected.entries.length);\r\n        };\r\n\r\n        $scope.apply = function () {\r\n            $scope.active =   $scope.selected.entries.length < $scope.entries.length;\r\n            $scope.$emit(\"filter\", $scope.column, {filterValue: _.pluck($scope.selected.entries, \"id\"), filterType: \"checkboxes\", isBoolean: $scope.isBoolean}, $scope.active)\r\n        };\r\n        $scope.clear = function () {\r\n\r\n            $scope.selectAll();\r\n            $scope.active = false;\r\n            $scope.$emit(\"filter\", $scope.column, {filterValue: undefined, filterType: \"checkboxes\", isBoolean: $scope.isBoolean}, $scope.active)\r\n        };\r\n        $scope.$on(\"clear\", $scope.clear);\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp').directive(\"booleanFilter\", booleanFilter);\r\n\r\nfunction booleanFilter() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        template: '<ng-include src=\"\\'static/html/dataTable/columnFilterBoolean.html\\'\"/>',\r\n        controllerAs: 'booleanFilterController',\r\n        scope: {\r\n            column: \"@\",\r\n            options: \"<\",\r\n            preselect: \"@\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n\r\n    function controller($scope) {\r\n        $scope.selected = {value: $scope.options[$scope.preselect].value};\r\n        $scope.active = false;\r\n\r\n        $scope.apply = function () {\r\n            $scope.active = $scope.selected.value !== $scope.options[0].value;\r\n            $scope.$emit(\"filter\", $scope.column, {filterValue: $scope.selected.value, filterType: \"boolean\"}, $scope.active)\r\n        };\r\n        $scope.clear = function () {\r\n            $scope.selected.value = true;\r\n            $scope.active = false;\r\n            $scope.$emit(\"filter\", $scope.column, {filterValue: undefined, filterType: \"boolean\"}, $scope.active)\r\n        };\r\n        $scope.$on(\"clear\", $scope.clear);\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp').directive(\"timeFilter\", timeFilter);\r\n\r\nfunction timeFilter() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        template: '<ng-include src=\"\\'static/html/dataTable/columnFilterTime.html\\'\"/>',\r\n        scope: {\r\n            column: \"@\",\r\n            selected: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n\r\n        $scope.dateOptions = {\r\n            dateDisabled: false,\r\n            formatYear: 'yy',\r\n            startingDay: 1\r\n        };\r\n\r\n        $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];\r\n        $scope.format = $scope.formats[0];\r\n        $scope.altInputFormats = ['M!/d!/yyyy'];\r\n        $scope.active = false;\r\n\r\n        $scope.openAfter = function () {\r\n            $scope.after.opened = true;\r\n        };\r\n\r\n        $scope.openBefore = function () {\r\n            $scope.before.opened = true;\r\n        };\r\n\r\n        $scope.after = {\r\n            opened: false\r\n        };\r\n\r\n        $scope.before = {\r\n            opened: false\r\n        };\r\n\r\n        $scope.apply = function () {\r\n            $scope.active = $scope.selected.beforeDate || $scope.selected.afterDate;\r\n            $scope.$emit(\"filter\", $scope.column, {filterValue: {after: $scope.selected.afterDate, before: $scope.selected.beforeDate}, filterType: \"time\"}, $scope.active)\r\n        };\r\n        $scope.clear = function () {\r\n            $scope.selected.beforeDate = undefined;\r\n            $scope.selected.afterDate = undefined;\r\n            $scope.active = false;\r\n            $scope.$emit(\"filter\", $scope.column, {filterValue: undefined, filterType: \"time\"}, $scope.active)\r\n        };\r\n        $scope.$on(\"clear\", $scope.clear);\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp').directive(\"numberRangeFilter\", numberRangeFilter);\r\n\r\nfunction numberRangeFilter() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        template: '<ng-include src=\"\\'static/html/dataTable/columnFilterNumberRange.html\\'\"/>',\r\n        scope: {\r\n            column: \"@\",\r\n            min: \"<\",\r\n            max: \"<\",\r\n            addon: \"@\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n        $scope.filterValue = {min: undefined, max: undefined};\r\n        $scope.active = false;\r\n\r\n        function apply() {\r\n            $scope.active = $scope.filterValue.min || $scope.filterValue.max;\r\n            $scope.$emit(\"filter\", $scope.column, {filterValue: $scope.filterValue, filterType: \"numberRange\"}, $scope.active)\r\n        }\r\n        $scope.clear = function () {\r\n            $scope.filterValue = {min: undefined, max: undefined};\r\n            $scope.active = false;\r\n            $scope.$emit(\"filter\", $scope.column, {filterValue: undefined, filterType: \"numberRange\", isBoolean: $scope.isBoolean}, $scope.active)\r\n        };\r\n        $scope.$on(\"clear\", $scope.clear);\r\n\r\n        $scope.apply = function () {\r\n            apply();\r\n        };\r\n\r\n        $scope.onKeypress = function (keyEvent) {\r\n            if (keyEvent.which === 13) {\r\n                apply();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nangular\r\n    .module('nzbhydraApp').directive(\"columnSortable\", columnSortable);\r\n\r\nfunction columnSortable() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        restrict: \"E\",\r\n        templateUrl: \"static/html/dataTable/columnSortable.html\",\r\n        transclude: true,\r\n        scope: {\r\n            sortMode: \"<\", //0: no sorting, 1: asc, 2: desc\r\n            column: \"@\",\r\n            reversed: \"<\",\r\n            startMode: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n        if (angular.isUndefined($scope.sortMode)) {\r\n            $scope.sortMode = 0;\r\n        }\r\n\r\n        if (angular.isUndefined($scope.startMode)) {\r\n            $scope.startMode = 1;\r\n        }\r\n\r\n        $scope.sortModel = {\r\n            sortMode: $scope.sortMode,\r\n            column: $scope.column,\r\n            reversed: $scope.reversed,\r\n            startMode: $scope.startMode,\r\n            active: false\r\n        };\r\n\r\n        $scope.$on(\"newSortColumn\", function (event, column, sortMode) {\r\n            $scope.sortModel.active = column === $scope.sortModel.column;\r\n            if (column !== $scope.sortModel.column) {\r\n                $scope.sortModel.sortMode = 0;\r\n            } else {\r\n                $scope.sortModel.sortMode = sortMode;\r\n            }\r\n        });\r\n\r\n        $scope.sort = function () {\r\n            if ($scope.sortModel.sortMode === 0 || angular.isUndefined($scope.sortModel.sortMode)) {\r\n                $scope.sortModel.sortMode = $scope.sortModel.startMode;\r\n            } else if ($scope.sortModel.sortMode === 1) {\r\n                $scope.sortModel.sortMode = 2;\r\n            } else {\r\n                $scope.sortModel.sortMode = 1;\r\n            }\r\n            $scope.$emit(\"sort\", $scope.sortModel.column, $scope.sortModel.sortMode, $scope.sortModel.reversed)\r\n        };\r\n\r\n    }\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('connectionTest', connectionTest);\r\n\r\nfunction connectionTest() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/connection-test.html',\r\n        require: ['^type', '^data'],\r\n        scope: {\r\n            type: \"=\",\r\n            id: \"=\",\r\n            data: \"=\",\r\n            downloader: \"=\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n        $scope.message = \"\";\r\n\r\n\r\n        var testButton = \"#button-test-connection\";\r\n        var testMessage = \"#message-test-connection\";\r\n\r\n        function showSuccess() {\r\n            angular.element(testButton).removeClass(\"btn-default\");\r\n            angular.element(testButton).removeClass(\"btn-danger\");\r\n            angular.element(testButton).addClass(\"btn-success\");\r\n        }\r\n\r\n        function showError() {\r\n            angular.element(testButton).removeClass(\"btn-default\");\r\n            angular.element(testButton).removeClass(\"btn-success\");\r\n            angular.element(testButton).addClass(\"btn-danger\");\r\n        }\r\n\r\n        $scope.testConnection = function () {\r\n            angular.element(testButton).addClass(\"glyphicon-refresh-animate\");\r\n            var myInjector = angular.injector([\"ng\"]);\r\n            var $http = myInjector.get(\"$http\");\r\n            var url;\r\n            var params;\r\n            if ($scope.type === \"downloader\") {\r\n                url = \"internalapi/test_downloader\";\r\n                params = {name: $scope.downloader, username: $scope.data.username, password: $scope.data.password};\r\n                if ($scope.downloader === \"SABNZBD\") {\r\n                    params.apiKey = $scope.data.apiKey;\r\n                    params.url = $scope.data.url;\r\n                } else {\r\n                    params.host = $scope.data.host;\r\n                    params.port = $scope.data.port;\r\n                    params.ssl = $scope.data.ssl;\r\n                }\r\n            } else if ($scope.data.type === \"newznab\") {\r\n                url = \"internalapi/test_newznab\";\r\n                params = {host: $scope.data.host, apiKey: $scope.data.apiKey};\r\n                if (angular.isDefined($scope.data.username)) {\r\n                    params[\"username\"] = $scope.data.username;\r\n                    params[\"password\"] = $scope.data.password;\r\n                }\r\n            }\r\n            $http.get(url, {params: params}).success(function (result) {\r\n                //Using ng-class and a scope variable doesn't work for some reason, is only updated at second click \r\n                if (result.successful) {\r\n                    angular.element(testMessage).text(\"\");\r\n                    showSuccess();\r\n                } else {\r\n                    angular.element(testMessage).text(result.message);\r\n                    showError();\r\n                }\r\n\r\n            }).error(function () {\r\n                angular.element(testMessage).text(result.message);\r\n                showError();\r\n            }).finally(function () {\r\n                angular.element(testButton).removeClass(\"glyphicon-refresh-animate\");\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n\r\n","//Taken from https://github.com/IamAdamJowett/angular-click-outside\r\n\r\nfunction childOf(/*child node*/c, /*parent node*/p){ //returns boolean\r\n    while((c=c.parentNode)&&c!==p);\r\n    return !!c;\r\n};\r\n\r\n    angular\r\n        .module('nzbhydraApp').directive(\"clickOutside\", clickOutside);\r\n\r\n    /**\r\n     * @ngdoc directive\r\n     * @name angular-click-outside.directive:clickOutside\r\n     * @description Directive to add click outside capabilities to DOM elements\r\n     * @requires $document\r\n     * @requires $parse\r\n     * @requires $timeout\r\n     **/\r\n    function clickOutside($document, $parse, $timeout) {\r\n        return {\r\n            restrict: 'A',\r\n            link: function($scope, elem, attr) {\r\n\r\n                // postpone linking to next digest to allow for unique id generation\r\n                $timeout(function() {\r\n                    var classList = (attr.outsideIfNot !== undefined) ? attr.outsideIfNot.split(/[ ,]+/) : [],\r\n                        fn;\r\n\r\n                    function eventHandler(e) {\r\n                        var i,\r\n                            element,\r\n                            r,\r\n                            id,\r\n                            classNames,\r\n                            l;\r\n\r\n                        // check if our element already hidden and abort if so\r\n                        if (angular.element(elem).hasClass(\"ng-hide\")) {\r\n                            return;\r\n                        }\r\n\r\n                        // if there is no click target, no point going on\r\n                        if (!e || !e.target) {\r\n                            return;\r\n                        }\r\n\r\n                        if (angular.isDefined(attr.outsideIgnore) && $scope.$eval(attr.outsideIgnore)) {\r\n                            return;\r\n                        }\r\n                        var isChild = childOf(e.target, elem.context);\r\n                        if (isChild) {\r\n                            return;\r\n                        }\r\n                        console.log(\"Clicked outside\");\r\n                        // loop through the available elements, looking for classes in the class list that might match and so will eat\r\n                        for (element = e.target; element; element = element.parentNode) {\r\n                            // check if the element is the same element the directive is attached to and exit if so (props @CosticaPuntaru)\r\n                            if (element === elem[0]) {\r\n                                return;\r\n                            }\r\n\r\n                            // now we have done the initial checks, start gathering id's and classes\r\n                            id = element.id,\r\n                                classNames = element.className,\r\n                                l = classList.length;\r\n\r\n                            // Unwrap SVGAnimatedString classes\r\n                            if (classNames && classNames.baseVal !== undefined) {\r\n                                classNames = classNames.baseVal;\r\n                            }\r\n\r\n                            // if there are no class names on the element clicked, skip the check\r\n                            if (classNames || id) {\r\n\r\n                                // loop through the elements id's and classnames looking for exceptions\r\n                                for (i = 0; i < l; i++) {\r\n                                    //prepare regex for class word matching\r\n                                    r = new RegExp('\\\\b' + classList[i] + '\\\\b');\r\n\r\n                                    // check for exact matches on id's or classes, but only if they exist in the first place\r\n                                    if ((id !== undefined && id === classList[i]) || (classNames && r.test(classNames))) {\r\n                                        // now let's exit out as it is an element that has been defined as being ignored for clicking outside\r\n                                        return;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // if we have got this far, then we are good to go with processing the command passed in via the click-outside attribute\r\n                        $timeout(function() {\r\n                            fn = $parse(attr['clickOutside']);\r\n                            fn($scope, { event: e });\r\n                        });\r\n                    }\r\n\r\n                    // if the devices has a touchscreen, listen for this event\r\n                    if (_hasTouch()) {\r\n                        $document.on('touchstart', eventHandler);\r\n                    }\r\n\r\n                    // still listen for the click event even if there is touch to cater for touchscreen laptops\r\n                    $document.on('click', eventHandler);\r\n\r\n                    // when the scope is destroyed, clean up the documents event handlers as we don't want it hanging around\r\n                    $scope.$on('$destroy', function() {\r\n                        if (_hasTouch()) {\r\n                            $document.off('touchstart', eventHandler);\r\n                        }\r\n\r\n                        $document.off('click', eventHandler);\r\n                    });\r\n\r\n                    /**\r\n                     * @description Private function to attempt to figure out if we are on a touch device\r\n                     * @private\r\n                     **/\r\n                    function _hasTouch() {\r\n                        // works on most browsers, IE10/11 and Surface\r\n                        return 'ontouchstart' in window || navigator.maxTouchPoints;\r\n                    };\r\n                });\r\n            }\r\n        };\r\n    }\r\n    clickOutside.$inject = [\"$document\", \"$parse\", \"$timeout\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('cfgFormEntry', cfgFormEntry);\r\n\r\nfunction cfgFormEntry() {\r\n    return {\r\n        templateUrl: 'static/html/directives/cfg-form-entry.html',\r\n        require: [\"^title\", \"^cfg\"],\r\n        scope: {\r\n            title: \"@\",\r\n            cfg: \"=\",\r\n            help: \"@\",\r\n            type: \"@?\",\r\n            options: \"=?\"\r\n        },\r\n        controller: [\"$scope\", \"$element\", \"$attrs\", function ($scope, $element, $attrs) {\r\n            $scope.type = angular.isDefined($scope.type) ? $scope.type : 'text';\r\n            $scope.options = angular.isDefined($scope.type) ? $scope.$eval($attrs.options) : [];\r\n        }]\r\n    };\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('hydrabackup', hydrabackup);\r\n\r\nfunction hydrabackup() {\r\n    controller.$inject = [\"$scope\", \"BackupService\", \"Upload\", \"FileDownloadService\", \"$http\", \"RequestsErrorHandler\", \"growl\", \"RestartService\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/backup.html',\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, BackupService, Upload, FileDownloadService, $http, RequestsErrorHandler, growl, RestartService) {\r\n        $scope.refreshBackupList = function () {\r\n            BackupService.getBackupsList().then(function (backups) {\r\n                $scope.backups = backups;\r\n            });\r\n        };\r\n\r\n        $scope.refreshBackupList();\r\n\r\n        $scope.uploadActive = false;\r\n\r\n\r\n        $scope.createBackupFile = function () {\r\n            $http.get(\"internalapi/backup/backuponly\", {params: {dontdownload: true}}).then(function () {\r\n                $scope.refreshBackupList();\r\n            });\r\n        };\r\n        $scope.createAndDownloadBackupFile = function () {\r\n            FileDownloadService.downloadFile(\"internalapi/backup/backup\", \"nzbhydra-backup-\" + moment().format(\"YYYY-MM-DD-HH-mm\") + \".zip\", \"GET\").then(function () {\r\n                $scope.refreshBackupList();\r\n            });\r\n        };\r\n\r\n        $scope.uploadBackupFile = function (file, errFiles) {\r\n            RequestsErrorHandler.specificallyHandled(function () {\r\n\r\n                $scope.file = file;\r\n                $scope.errFile = errFiles && errFiles[0];\r\n                if (file) {\r\n                    $scope.uploadActive = true;\r\n                    file.upload = Upload.upload({\r\n                        url: 'internalapi/backup/restorefile',\r\n                        file: file\r\n                    });\r\n\r\n                    file.upload.then(function (response) {\r\n                        $scope.uploadActive = false;\r\n                        file.result = response.data;\r\n                        RestartService.restart(\"Restore successful.\");\r\n\r\n                    }, function (response) {\r\n                        $scope.uploadActive = false;\r\n                        growl.error(response.data)\r\n                    }, function (evt) {\r\n                        file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));\r\n                        file.loaded = Math.floor(evt.loaded / 1024);\r\n                        file.total = Math.floor(evt.total / 1024);\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        $scope.restoreFromFile = function (filename) {\r\n            BackupService.restoreFromFile(filename).then(function () {\r\n                    RestartService.restart(\"Extraction of backup successful. Restarting for wrapper to restore data.\");\r\n                },\r\n                function (response) {\r\n                    growl.error(response.data);\r\n                })\r\n        }\r\n\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('addableNzbs', addableNzbs);\r\n\r\nfunction addableNzbs() {\r\n    controller.$inject = [\"$scope\", \"NzbDownloadService\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/addable-nzbs.html',\r\n        require: ['^searchResultId'],\r\n        scope: {\r\n            searchResultId: \"<\",\r\n            downloadType: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, NzbDownloadService) {\r\n        $scope.downloaders = _.filter(NzbDownloadService.getEnabledDownloaders(), function (downloader) {\r\n            if ($scope.downloadType !== \"NZB\") {\r\n                return downloader.downloadType === $scope.downloadType\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n}\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('addableNzb', addableNzb);\r\n\r\nfunction addableNzb() {\r\n    controller.$inject = [\"$scope\", \"NzbDownloadService\", \"growl\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/addable-nzb.html',\r\n        scope: {\r\n            searchResultId: \"<\",\r\n            downloader: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, NzbDownloadService, growl) {\r\n        if ($scope.downloader.iconCssClass) {\r\n            $scope.cssClass = \"fa fa-\" + $scope.downloader.iconCssClass.replace(\"fa-\", \"\").replace(\"fa \", \"\");\r\n        } else {\r\n            $scope.cssClass = $scope.downloader.downloaderType === \"SABNZBD\" ? \"sabnzbd\" : \"nzbget\";\r\n        }\r\n\r\n        $scope.add = function () {\r\n            var originalClass = $scope.cssClass;\r\n            $scope.cssClass = \"nzb-spinning\";\r\n            NzbDownloadService.download($scope.downloader, [$scope.searchResultId]).then(function (response) {\r\n                if (response !== \"dismissed\") {\r\n                    if (response.data.successful) {\r\n                        $scope.cssClass = $scope.downloader.downloaderType === \"SABNZBD\" ? \"sabnzbd-success\" : \"nzbget-success\";\r\n                    } else {\r\n                        $scope.cssClass = $scope.downloader.downloaderType === \"SABNZBD\" ? \"sabnzbd-error\" : \"nzbget-error\";\r\n                        growl.error(\"Unable to add NZB. Make sure the downloader is running and properly configured.\");\r\n                    }\r\n                } else {\r\n                    $scope.cssClass = originalClass;\r\n                }\r\n            }, function () {\r\n                $scope.cssClass = $scope.downloader.downloaderType === \"SABNZBD\" ? \"sabnzbd-error\" : \"nzbget-error\";\r\n                growl.error(\"An unexpected error occurred while trying to contact NZBHydra or add the NZB.\");\r\n            })\r\n        };\r\n\r\n\r\n    }\r\n}\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('UpdateService', UpdateService);\r\n\r\nfunction UpdateService($http, growl, blockUI, RestartService, RequestsErrorHandler, $uibModal) {\r\n\r\n    var currentVersion;\r\n    var latestVersion;\r\n    var updateAvailable;\r\n    var latestVersionIgnored;\r\n    var versionHistory;\r\n\r\n\r\n    return {\r\n        update: update,\r\n        showChanges: showChanges,\r\n        getInfos: getInfos,\r\n        getVersionHistory: getVersionHistory,\r\n        ignore: ignore\r\n    };\r\n\r\n    function getInfos() {\r\n        return RequestsErrorHandler.specificallyHandled(function () {\r\n            return $http.get(\"internalapi/updates/infos\").then(\r\n                function (data) {\r\n                    currentVersion = data.data.currentVersion;\r\n                    latestVersion = data.data.latestVersion;\r\n                    updateAvailable = data.data.updateAvailable;\r\n                    latestVersionIgnored = data.data.latestVersionIgnored;\r\n                    return data;\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    function ignore(version) {\r\n        return $http.put(\"internalapi/updates/ignore?version=\" + version).then(function (data) {\r\n            return data;\r\n        });\r\n    }\r\n\r\n    function getVersionHistory() {\r\n        return $http.get(\"internalapi/updates/versionHistory\").then(function (data) {\r\n            versionHistory = data.data;\r\n            return data;\r\n        });\r\n    }\r\n\r\n    function showChanges() {\r\n        return $http.get(\"internalapi/updates/changesSince\").then(function (response) {\r\n            var params = {\r\n                size: \"lg\",\r\n                templateUrl: \"static/html/changelog-modal.html\",\r\n                resolve: {\r\n                    versionHistory: function () {\r\n                        return response.data;\r\n                    }\r\n                },\r\n                controller: function ($scope, $sce, $uibModalInstance, versionHistory) {\r\n                    $scope.versionHistory = versionHistory;\r\n\r\n                    $scope.ok = function () {\r\n                        $uibModalInstance.dismiss();\r\n                    };\r\n                }\r\n            };\r\n\r\n            var modalInstance = $uibModal.open(params);\r\n            modalInstance.result.then();\r\n        });\r\n    }\r\n\r\n\r\n    function update() {\r\n        blockUI.start(\"Downloading update. Please stand by...\");\r\n        $http.put(\"internalapi/updates/installUpdate\").then(function () {\r\n                //Handle like restart, ping application and wait\r\n                //Perhaps save the version to which we want to update, ask later and see if they're equal. If not updating apparently failed...\r\n                RestartService.startCountdown(\"Downloaded update. Shutting down Hydra for wrapper to execute update.\");\r\n            },\r\n            function () {\r\n                blockUI.reset();\r\n                growl.info(\"An error occurred while updating. Please check the logs.\");\r\n            });\r\n    }\r\n}\r\nUpdateService.$inject = [\"$http\", \"growl\", \"blockUI\", \"RestartService\", \"RequestsErrorHandler\", \"$uibModal\"];","angular\r\n    .module('nzbhydraApp')\r\n    .controller('UpdateFooterController', UpdateFooterController);\r\n\r\nfunction UpdateFooterController($scope, UpdateService, RequestsErrorHandler, HydraAuthService, $http, $uibModal, ConfigService) {\r\n\r\n    $scope.updateAvailable = false;\r\n    $scope.checked = false;\r\n    var welcomeIsBeingShown = false;\r\n\r\n    $scope.mayUpdate = HydraAuthService.getUserInfos().maySeeAdmin;\r\n\r\n    $scope.$on(\"user:loggedIn\", function () {\r\n        if (HydraAuthService.getUserInfos().maySeeAdmin && !$scope.checked) {\r\n            retrieveUpdateInfos();\r\n        }\r\n    });\r\n\r\n\r\n    if ($scope.mayUpdate) {\r\n        retrieveUpdateInfos();\r\n    }\r\n\r\n    function retrieveUpdateInfos() {\r\n        $scope.checked = true;\r\n        UpdateService.getInfos().then(function (data) {\r\n            $scope.currentVersion = data.data.currentVersion;\r\n            $scope.latestVersion = data.data.latestVersion;\r\n            $scope.updateAvailable = data.data.updateAvailable;\r\n            $scope.changelog = data.data.changelog;\r\n        });\r\n    }\r\n\r\n\r\n    $scope.update = function () {\r\n        UpdateService.update();\r\n    };\r\n\r\n    $scope.ignore = function () {\r\n        UpdateService.ignore($scope.latestVersion);\r\n    };\r\n\r\n    $scope.showChangelog = function () {\r\n        UpdateService.showChanges();\r\n    };\r\n\r\n    function checkAndShowNews() {\r\n        RequestsErrorHandler.specificallyHandled(function () {\r\n            if (ConfigService.getSafe().showNews) {\r\n                $http.get(\"internalapi/news/forcurrentversion\").then(function (data) {\r\n                    if (data && data.length > 0) {\r\n                        $uibModal.open({\r\n                            templateUrl: 'static/html/news-modal.html',\r\n                            controller: NewsModalInstanceCtrl,\r\n                            size: \"lg\",\r\n                            resolve: {\r\n                                news: function () {\r\n                                    return data;\r\n                                }\r\n                            }\r\n                        });\r\n                        $http.put(\"internalapi/news/saveshown\");\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    function checkAndShowWelcome() {\r\n        $http.get(\"internalapi/welcomeshown\").success(function (wasWelcomeShown) {\r\n            if (!wasWelcomeShown) {\r\n                $http.put(\"internalapi/welcomeshown\");\r\n                var promise = $uibModal.open({\r\n                    templateUrl: 'static/html/welcome-modal.html',\r\n                    controller: WelcomeModalInstanceCtrl,\r\n                    size: \"md\"\r\n                });\r\n                promise.opened.then(function () {\r\n                    welcomeIsBeingShown = true;\r\n                });\r\n                promise.closed.then(function () {\r\n                    welcomeIsBeingShown = false;\r\n                });\r\n            } else {\r\n                _.defer(checkAndShowNews);\r\n            }\r\n        });\r\n    }\r\n\r\n    checkAndShowWelcome();\r\n\r\n}\r\nUpdateFooterController.$inject = [\"$scope\", \"UpdateService\", \"RequestsErrorHandler\", \"HydraAuthService\", \"$http\", \"$uibModal\", \"ConfigService\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('NewsModalInstanceCtrl', NewsModalInstanceCtrl);\r\n\r\nfunction NewsModalInstanceCtrl($scope, $uibModalInstance, news) {\r\n    $scope.news = news;\r\n    $scope.close = function () {\r\n        $uibModalInstance.dismiss();\r\n    };\r\n}\r\nNewsModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"news\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('WelcomeModalInstanceCtrl', WelcomeModalInstanceCtrl);\r\n\r\nfunction WelcomeModalInstanceCtrl($scope, $uibModalInstance, $state, MigrationService) {\r\n    $scope.close = function () {\r\n        $uibModalInstance.dismiss();\r\n    };\r\n\r\n    $scope.startMigration = function () {\r\n        $uibModalInstance.dismiss();\r\n        MigrationService.migrate();\r\n    };\r\n\r\n    $scope.goToConfig = function () {\r\n        $uibModalInstance.dismiss();\r\n        $state.go(\"root.config.main\");\r\n    }\r\n}\r\nWelcomeModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"$state\", \"MigrationService\"];","angular\r\n    .module('nzbhydraApp')\r\n    .controller('SystemController', SystemController);\r\n\r\nfunction SystemController($scope, $state, activeTab, $http, growl, RestartService, MigrationService, ConfigService, NzbHydraControlService) {\r\n\r\n    $scope.activeTab = activeTab;\r\n    $scope.foo = {\r\n        csv: \"\",\r\n        sql: \"\"\r\n    };\r\n\r\n\r\n    $scope.shutdown = function () {\r\n        NzbHydraControlService.shutdown().then(function () {\r\n                growl.info(\"Shutdown initiated. Cya!\");\r\n            },\r\n            function () {\r\n                growl.info(\"Unable to send shutdown command.\");\r\n            })\r\n    };\r\n\r\n    $scope.restart = function () {\r\n        RestartService.restart();\r\n    };\r\n\r\n    $scope.reloadConfig = function () {\r\n        ConfigService.reloadConfig().then(function () {\r\n            growl.info(\"Successfully reloaded config. Some setting may need a restart to take effect.\")\r\n        }, function (data) {\r\n            growl.error(data.message);\r\n        })\r\n    };\r\n\r\n\r\n    $scope.migrate = function () {\r\n        MigrationService.migrate();\r\n    };\r\n\r\n\r\n    $scope.allTabs = [\r\n        {\r\n            active: false,\r\n            state: 'root.system.control',\r\n            name: \"Control\"\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.system.updates',\r\n            name: \"Updates\"\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.system.log',\r\n            name: \"Log\"\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.system.backup',\r\n            name: \"Backup\"\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.system.bugreport',\r\n            name: \"Bugreport / Debug\"\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.system.news',\r\n            name: \"News\"\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.system.about',\r\n            name: \"About\"\r\n        }\r\n    ];\r\n\r\n\r\n    $scope.goToSystemState = function (index) {\r\n        $state.go($scope.allTabs[index].state, {activeTab: index}, {inherit: false, notify: true, reload: true});\r\n    };\r\n\r\n    $scope.downloadDebuggingInfos = function () {\r\n        $http({method: 'GET', url: 'internalapi/debuginfos/logandconfig', responseType: 'arraybuffer'}).success(function (data, status, headers, config) {\r\n            var a = document.createElement('a');\r\n            var blob = new Blob([data], {'type': \"application/octet-stream\"});\r\n            a.href = URL.createObjectURL(blob);\r\n            a.download = \"nzbhydra-debuginfos-\" + moment().format(\"YYYY-MM-DD-HH-mm\") + \".zip\";\r\n\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n        });\r\n    };\r\n\r\n    $scope.executeSqlQuery = function () {\r\n        $http.post('internalapi/debuginfos/executesqlquery', $scope.foo.sql).success(function (data) {\r\n            if (data.successful) {\r\n                $scope.foo.csv = data.message;\r\n            } else {\r\n                growl.error(data.message);\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.executeSqlUpdate = function () {\r\n        $http.post('internalapi/debuginfos/executesqlupdate', $scope.foo.sql).success(function (data) {\r\n            if (data.successful) {\r\n                $scope.foo.csv = data.message + \" rows affected\";\r\n            } else {\r\n                growl.error(data.message);\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n}\r\nSystemController.$inject = [\"$scope\", \"$state\", \"activeTab\", \"$http\", \"growl\", \"RestartService\", \"MigrationService\", \"ConfigService\", \"NzbHydraControlService\"];","angular\r\n    .module('nzbhydraApp')\r\n    .factory('StatsService', StatsService);\r\n\r\nfunction StatsService($http) {\r\n\r\n    return {\r\n        get: getStats,\r\n        getDownloadHistory: getDownloadHistory\r\n    };\r\n\r\n    function getStats(after, before, includeDisabled, switchState) {\r\n        var requestBody = {after: after, before: before, includeDisabled: includeDisabled};\r\n        requestBody = _.extend(requestBody, switchState);\r\n        return $http.post(\"internalapi/stats\", requestBody).success(function (response) {\r\n            return response.data;\r\n        });\r\n    }\r\n\r\n    function getDownloadHistory(pageNumber, limit, filterModel, sortModel) {\r\n        var params = {page: pageNumber, limit: limit, filterModel: filterModel};\r\n        if (angular.isUndefined(pageNumber)) {\r\n            params.page = 1;\r\n        }\r\n        if (angular.isUndefined(limit)) {\r\n            params.limit = 100;\r\n        }\r\n        if (angular.isUndefined(filterModel)) {\r\n            params.filterModel = {}\r\n        }\r\n        if (!angular.isUndefined(sortModel)) {\r\n            params.sortModel = sortModel;\r\n        } else {\r\n            params.sortModel = {\r\n                column: \"time\",\r\n                sortMode: 2\r\n            };\r\n        }\r\n        return $http.post(\"internalapi/history/downloads\", params).success(function (response) {\r\n            return {\r\n                nzbDownloads: response.content,\r\n                totalDownloads: response.totalElements\r\n            };\r\n\r\n        });\r\n    }\r\n\r\n}\r\nStatsService.$inject = [\"$http\"];","angular\r\n    .module('nzbhydraApp')\r\n    .controller('StatsController', StatsController);\r\n\r\nfunction StatsController($scope, $filter, StatsService, blockUI, localStorageService, $timeout, $window, ConfigService) {\r\n\r\n    $scope.dateOptions = {\r\n        dateDisabled: false,\r\n        formatYear: 'yy',\r\n        startingDay: 1\r\n    };\r\n    var initializingAfter = true;\r\n    var initializingBefore = true;\r\n    $scope.afterDate = moment().subtract(30, \"days\").toDate();\r\n    $scope.beforeDate = moment().add(1, \"days\").toDate();\r\n    var historyInfoTypeUserEnabled = ConfigService.getSafe().logging.historyUserInfoType === 'USERNAME' || ConfigService.getSafe().logging.historyUserInfoType === 'BOTH';\r\n    var historyInfoTypeIpEnabled = ConfigService.getSafe().logging.historyUserInfoType === 'IP' || ConfigService.getSafe().logging.historyUserInfoType === 'BOTH';\r\n    $scope.foo = {\r\n        includeDisabledIndexersInStats: localStorageService.get(\"includeDisabledIndexersInStats\") !== null ? localStorageService.get(\"includeDisabledIndexersInStats\") : false,\r\n        statsSwichState: localStorageService.get(\"statsSwitchState\") !== null ? localStorageService.get(\"statsSwitchState\") :\r\n            {\r\n                indexerApiAccessStats: true,\r\n                avgIndexerSearchResultsShares: true,\r\n                avgResponseTimes: true,\r\n                indexerDownloadShares: true,\r\n                downloadsPerDayOfWeek: true,\r\n                downloadsPerHourOfDay: true,\r\n                searchesPerDayOfWeek: true,\r\n                searchesPerHourOfDay: true,\r\n                downloadsPerAgeStats: true,\r\n                successfulDownloadsPerIndexer: true,\r\n                downloadSharesPerUser: historyInfoTypeUserEnabled,\r\n                searchSharesPerUser: historyInfoTypeIpEnabled,\r\n                downloadSharesPerIp: true,\r\n                searchSharesPerIp: true,\r\n                userAgentSearchShares: true,\r\n                userAgentDownloadShares: true\r\n            }\r\n    };\r\n    localStorageService.set(\"statsSwitchState\", $scope.foo.statsSwichState);\r\n    $scope.stats = {};\r\n\r\n    updateStats();\r\n\r\n\r\n    $scope.openAfter = function () {\r\n        $scope.after.opened = true;\r\n    };\r\n\r\n    $scope.openBefore = function () {\r\n        $scope.before.opened = true;\r\n    };\r\n\r\n    $scope.after = {\r\n        opened: false\r\n    };\r\n\r\n    $scope.before = {\r\n        opened: false\r\n    };\r\n\r\n    $scope.toggleIncludeDisabledIndexers = function () {\r\n        localStorageService.set(\"includeDisabledIndexersInStats\", $scope.foo.includeDisabledIndexersInStats);\r\n    };\r\n\r\n    $scope.onStatsSwitchToggle = function (statId) {\r\n        localStorageService.set(\"statsSwitchState\", $scope.foo.statsSwichState);\r\n\r\n        if ($scope.foo.statsSwichState[statId]) { //Stat was enabled, get only data for this stat\r\n            updateStats(statId);\r\n        }\r\n\r\n    };\r\n\r\n    $scope.refresh = function() {\r\n        updateStats();\r\n    };\r\n\r\n    function updateStats(statId) {\r\n        blockUI.start(\"Updating stats...\");\r\n        var after = $scope.afterDate !== null ? $scope.afterDate : null;\r\n        var before = $scope.beforeDate !== null ? $scope.beforeDate : null;\r\n        var statsToRetrieve = {};\r\n        if (angular.isDefined(statId)) {\r\n            statsToRetrieve[statId] = true;\r\n        } else {\r\n            statsToRetrieve = $scope.foo.statsSwichState;\r\n        }\r\n        $scope.statsLoadingPromise = StatsService.get(after, before, $scope.foo.includeDisabledIndexersInStats, statsToRetrieve).then(function (stats) {\r\n            $scope.setStats(stats);\r\n            //Resize event is needed for the -perUsernameOrIp charts to be properly sized because nvd3 thinks the initial size is 0\r\n            $timeout(function () {\r\n                $window.dispatchEvent(new Event(\"resize\"));\r\n            }, 500);\r\n        });\r\n\r\n        blockUI.reset();\r\n    }\r\n\r\n    $scope.$watch('beforeDate', function () {\r\n        if (initializingBefore) {\r\n            initializingBefore = false;\r\n        } else {\r\n            //updateStats();\r\n        }\r\n    });\r\n\r\n\r\n    $scope.$watch('afterDate', function () {\r\n        if (initializingAfter) {\r\n            initializingAfter = false;\r\n        } else {\r\n            //updateStats();\r\n        }\r\n    });\r\n\r\n    $scope.onKeypress = function (keyEvent) {\r\n        if (keyEvent.which === 13) {\r\n            //updateStats();\r\n        }\r\n    };\r\n\r\n\r\n    $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];\r\n    $scope.format = $scope.formats[0];\r\n    $scope.altInputFormats = ['M!/d!/yyyy'];\r\n\r\n    $scope.setStats = function (stats) {\r\n        stats = stats.data;\r\n\r\n        //Only update those stats that were calculated (because this might be an update when one stat has just been enabled)\r\n        _.forEach(stats, function (value, key) {\r\n            if (value !== null) {\r\n                $scope.stats[key] = value;\r\n            }\r\n        });\r\n\r\n\r\n        if ($scope.stats.avgResponseTimes) {\r\n            $scope.avgResponseTimesChart = getChart(\"multiBarHorizontalChart\", $scope.stats.avgResponseTimes, \"indexer\", \"avgResponseTime\", \"\", \"Response time\");\r\n            $scope.avgResponseTimesChart.options.chart.margin.left = 100;\r\n            $scope.avgResponseTimesChart.options.chart.yAxis.rotateLabels = -30;\r\n            $scope.avgResponseTimesChart.options.chart.height = Math.max($scope.stats.avgResponseTimes.length * 30, 350);\r\n        }\r\n\r\n        if ($scope.stats.avgIndexerSearchResultsShares) {\r\n            $scope.resultsSharesChart = getResultsSharesChart();\r\n\r\n            var rotation = 30;\r\n            var numberOfDisplayedIndexers = $scope.foo.includeDisabledIndexersInStats ? stats.numberOfConfiguredIndexers : stats.numberOfEnabledIndexers;\r\n            if (numberOfDisplayedIndexers > 30) {\r\n                rotation = 70;\r\n            }\r\n            $scope.resultsSharesChart.options.chart.xAxis.rotateLabels = rotation;\r\n            $scope.resultsSharesChart.options.chart.height = 350;\r\n        }\r\n\r\n\r\n        if ($scope.stats.downloadsPerHourOfDay) {\r\n            $scope.downloadsPerHourOfDayChart = getChart(\"discreteBarChart\", $scope.stats.downloadsPerHourOfDay, \"hour\", \"count\", \"Hour of day\", 'Downloads');\r\n            $scope.downloadsPerHourOfDayChart.options.chart.xAxis.rotateLabels = 0;\r\n        }\r\n\r\n        if ($scope.stats.downloadsPerDayOfWeek) {\r\n            $scope.downloadsPerDayOfWeekChart = getChart(\"discreteBarChart\", $scope.stats.downloadsPerDayOfWeek, \"day\", \"count\", \"Day of week\", 'Downloads');\r\n            $scope.downloadsPerDayOfWeekChart.options.chart.xAxis.rotateLabels = 0;\r\n        }\r\n\r\n        if ($scope.stats.searchesPerHourOfDay) {\r\n            $scope.searchesPerHourOfDayChart = getChart(\"discreteBarChart\", $scope.stats.searchesPerHourOfDay, \"hour\", \"count\", \"Hour of day\", 'Searches');\r\n            $scope.searchesPerHourOfDayChart.options.chart.xAxis.rotateLabels = 0;\r\n        }\r\n\r\n        if ($scope.stats.searchesPerDayOfWeek) {\r\n            $scope.searchesPerDayOfWeekChart = getChart(\"discreteBarChart\", $scope.stats.searchesPerDayOfWeek, \"day\", \"count\", \"Day of week\", 'Searches');\r\n            $scope.searchesPerDayOfWeekChart.options.chart.xAxis.rotateLabels = 0;\r\n        }\r\n\r\n        if ($scope.stats.downloadsPerAgeStats) {\r\n            $scope.downloadsPerAgeChart = getChart(\"discreteBarChart\", $scope.stats.downloadsPerAgeStats.downloadsPerAge, \"age\", \"count\", \"Downloads per age\", 'Downloads');\r\n            $scope.downloadsPerAgeChart.options.chart.xAxis.rotateLabels = 45;\r\n            $scope.downloadsPerAgeChart.options.chart.showValues = false;\r\n        }\r\n\r\n        if ($scope.stats.successfulDownloadsPerIndexer) {\r\n            $scope.successfulDownloadsPerIndexerChart = getChart(\"multiBarHorizontalChart\", $scope.stats.successfulDownloadsPerIndexer, \"indexerName\", \"percentSuccessful\", \"Indexer\", '% successful');\r\n            $scope.successfulDownloadsPerIndexerChart.options.chart.xAxis.rotateLabels = 90;\r\n            $scope.successfulDownloadsPerIndexerChart.options.chart.yAxis.tickFormat = function (d) {\r\n                return $filter('number')(d, 0);\r\n            };\r\n            $scope.successfulDownloadsPerIndexerChart.options.chart.valueFormat = function (d) {\r\n                return $filter('number')(d, 0);\r\n            };\r\n            $scope.successfulDownloadsPerIndexerChart.options.chart.showValues = true;\r\n        }\r\n\r\n        if ($scope.stats.indexerDownloadShares) {\r\n            $scope.indexerDownloadSharesChart = {\r\n                options: {\r\n                    chart: {\r\n                        type: 'pieChart',\r\n                        height: 500,\r\n                        x: function (d) {\r\n                            return d.indexerName;\r\n                        },\r\n                        y: function (d) {\r\n                            return d.share;\r\n                        },\r\n                        showLabels: true,\r\n                        donut: true,\r\n                        donutRatio: 0.35,\r\n                        duration: 500,\r\n                        labelThreshold: 0.03,\r\n                        labelSunbeamLayout: true,\r\n                        tooltip: {\r\n                            valueFormatter: function (d, i) {\r\n                                return $filter('number')(d, 2) + \"%\";\r\n                            }\r\n                        },\r\n                        legend: {\r\n                            margin: {\r\n                                top: 5,\r\n                                right: 35,\r\n                                bottom: 5,\r\n                                left: 0\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                data: $scope.stats.indexerDownloadShares\r\n            };\r\n            $scope.indexerDownloadSharesChart.options.chart.height = Math.min(Math.max(($scope.foo.includeDisabledIndexersInStats ? $scope.stats.numberOfConfiguredIndexers : $scope.stats.numberOfEnabledIndexers) * 40, 350), 900);\r\n        }\r\n\r\n        function getSharesPieChart(data, height, xValue, yValue) {\r\n            return {\r\n                options: {\r\n                    chart: {\r\n                        type: 'pieChart',\r\n                        height: height,\r\n                        x: function (d) {\r\n                            return d[xValue];\r\n                        },\r\n                        y: function (d) {\r\n                            return d[yValue];\r\n                        },\r\n                        showLabels: true,\r\n                        donut: true,\r\n                        donutRatio: 0.35,\r\n                        duration: 500,\r\n                        labelThreshold: 0.03,\r\n                        labelsOutside: true,\r\n                        //labelType: \"percent\",\r\n                        labelSunbeamLayout: true,\r\n                        tooltip: {\r\n                            valueFormatter: function (d, i) {\r\n                                return $filter('number')(d, 2) + \"%\";\r\n                            }\r\n                        },\r\n                        legend: {\r\n                            margin: {\r\n                                top: 5,\r\n                                right: 35,\r\n                                bottom: 5,\r\n                                left: 0\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                data: data\r\n            };\r\n        }\r\n\r\n        if ($scope.stats.searchSharesPerIp !== null) {\r\n            $scope.downloadSharesPerIpChart = getSharesPieChart($scope.stats.downloadSharesPerIp, 300, \"key\", \"percentage\");\r\n        }\r\n        if ($scope.stats.searchSharesPerIpChart !== null) {\r\n            $scope.searchSharesPerIpChart = getSharesPieChart($scope.stats.searchSharesPerIp, 300, \"key\", \"percentage\");\r\n        }\r\n        if ($scope.stats.searchSharesPerUser !== null) {\r\n            $scope.downloadSharesPerUserChart = getSharesPieChart($scope.stats.downloadSharesPerUser, 300, \"key\", \"percentage\");\r\n        }\r\n        if ($scope.stats.searchSharesPerUserChart !== null) {\r\n            $scope.searchSharesPerUserChart = getSharesPieChart($scope.stats.searchSharesPerUser, 300, \"key\", \"percentage\");\r\n        }\r\n\r\n        if ($scope.stats.userAgentSearchShares) {\r\n            $scope.userAgentSearchSharesChart = getSharesPieChart($scope.stats.userAgentSearchShares, 300, \"userAgent\", \"percentage\");\r\n            $scope.userAgentSearchSharesChart.options.chart.legend.margin.bottom = 25;\r\n        }\r\n        if ($scope.stats.userAgentDownloadShares) {\r\n            $scope.userAgentDownloadSharesChart = getSharesPieChart($scope.stats.userAgentDownloadShares, 300, \"userAgent\", \"percentage\");\r\n            $scope.userAgentDownloadSharesChart.options.chart.legend.margin.bottom = 25;\r\n        }\r\n\r\n    };\r\n\r\n    function getChart(chartType, values, xKey, yKey, xAxisLabel, yAxisLabel) {\r\n        return {\r\n            options: {\r\n                chart: {\r\n                    type: chartType,\r\n                    height: 350,\r\n                    margin: {\r\n                        top: 20,\r\n                        right: 20,\r\n                        bottom: 100,\r\n                        left: 50\r\n                    },\r\n                    x: function (d) {\r\n                        return d[xKey];\r\n                    },\r\n                    y: function (d) {\r\n                        return d[yKey];\r\n                    },\r\n                    showValues: true,\r\n                    valueFormat: function (d) {\r\n                        return d;\r\n                    },\r\n                    color: function () {\r\n                        return \"red\"\r\n                    },\r\n                    showControls: false,\r\n                    showLegend: false,\r\n                    duration: 100,\r\n                    xAxis: {\r\n                        axisLabel: xAxisLabel,\r\n                        tickFormat: function (d) {\r\n                            return d;\r\n                        },\r\n                        rotateLabels: 30,\r\n                        showMaxMin: false,\r\n                        color: function () {\r\n                            return \"white\"\r\n                        }\r\n                    },\r\n                    yAxis: {\r\n                        axisLabel: yAxisLabel,\r\n                        axisLabelDistance: -10,\r\n                        tickFormat: function (d) {\r\n                            return d;\r\n                        }\r\n                    },\r\n                    tooltip: {\r\n                        enabled: false\r\n                    },\r\n                    zoom: {\r\n                        enabled: true,\r\n                        scaleExtent: [1, 10],\r\n                        useFixedDomain: false,\r\n                        useNiceScale: false,\r\n                        horizontalOff: false,\r\n                        verticalOff: true,\r\n                        unzoomEventType: 'dblclick.zoom'\r\n                    }\r\n                }\r\n            }, data: [{\r\n                \"key\": \"doesntmatter\",\r\n                \"bar\": true,\r\n                \"values\": values\r\n            }]\r\n        };\r\n    }\r\n\r\n    //Was unable to use the function above for this and gave up\r\n    function getResultsSharesChart() {\r\n        return {\r\n            options: {\r\n                chart: {\r\n                    type: 'multiBarChart',\r\n                    height: 350,\r\n                    margin: {\r\n                        top: 20,\r\n                        right: 20,\r\n                        bottom: 100,\r\n                        left: 45\r\n                    },\r\n\r\n                    clipEdge: true,\r\n                    duration: 500,\r\n                    stacked: false,\r\n                    reduceXTicks: false,\r\n                    showValues: true,\r\n                    tooltip: {\r\n                        enabled: true,\r\n                        valueFormatter: function (d) {\r\n                            return $filter('number')(d, 2) + \"%\";\r\n                        }\r\n                    },\r\n                    showControls: false,\r\n                    xAxis: {\r\n                        axisLabel: '',\r\n                        showMaxMin: false,\r\n                        rotateLabels: 30,\r\n                        axisLabelDistance: 30,\r\n                        tickFormat: function (d) {\r\n                            return d;\r\n                        }\r\n                    },\r\n                    yAxis: {\r\n                        axisLabel: 'Share (%)',\r\n                        axisLabelDistance: -20,\r\n                        tickFormat: function (d) {\r\n                            return $filter('number')(d, 0) + \"%\";\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n\r\n            data: [\r\n                {\r\n                    key: \"Results\",\r\n                    values: _.map($scope.stats.avgIndexerSearchResultsShares, function (stats) {\r\n                        return {series: 0, y: stats.totalShare, x: stats.indexerName}\r\n                    })\r\n                },\r\n                {\r\n                    key: \"Unique results\",\r\n                    values: _.map($scope.stats.avgIndexerSearchResultsShares, function (stats) {\r\n                        return {series: 1, y: stats.uniqueShare, x: stats.indexerName}\r\n                    })\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\nStatsController.$inject = [\"$scope\", \"$filter\", \"StatsService\", \"blockUI\", \"localStorageService\", \"$timeout\", \"$window\", \"ConfigService\"];\r\n\r\n\r\n","//\r\nangular\r\n    .module('nzbhydraApp')\r\n    .factory('SearchService', SearchService);\r\n\r\nfunction SearchService($http) {\r\n\r\n\r\n    var lastExecutedQuery;\r\n    var lastExecutedSearchRequestParameters;\r\n    var lastResults;\r\n\r\n    return {\r\n        search: search,\r\n        getLastResults: getLastResults,\r\n        loadMore: loadMore,\r\n        getSearchState: getSearchState\r\n    };\r\n\r\n\r\n    function search(searchRequestId, category, query, metaData, season, episode, minsize, maxsize, minage, maxage, indexers, mode) {\r\n        console.time(\"search\");\r\n        var uri = new URI(\"internalapi/search\");\r\n        var searchRequestParameters = {};\r\n        searchRequestParameters.searchRequestId = searchRequestId;\r\n        searchRequestParameters.query = query;\r\n        searchRequestParameters.minsize = minsize;\r\n        searchRequestParameters.maxsize = maxsize;\r\n        searchRequestParameters.minage = minage;\r\n        searchRequestParameters.maxage = maxage;\r\n        searchRequestParameters.category = category;\r\n        if (!angular.isUndefined(indexers) && indexers !== null) {\r\n            searchRequestParameters.indexers = indexers.split(\",\");\r\n        }\r\n\r\n        if (metaData) {\r\n            searchRequestParameters.title = metaData.title;\r\n            if (category.indexOf(\"Movies\") > -1 || (category.indexOf(\"20\") === 0) || mode === \"movie\") {\r\n                searchRequestParameters.tmdbId = metaData.tmdbId;\r\n                searchRequestParameters.imdbId = metaData.imdbId;\r\n            } else if (category.indexOf(\"TV\") > -1 || (category.indexOf(\"50\") === 0) || mode === \"tvsearch\") {\r\n                searchRequestParameters.tvdbId = metaData.tvdbId;\r\n                searchRequestParameters.tvrageid = metaData.rid;\r\n                searchRequestParameters.tvmazeid = metaData.rid;\r\n                searchRequestParameters.season = season;\r\n                searchRequestParameters.episode = episode;\r\n            }\r\n        }\r\n\r\n        lastExecutedQuery = uri;\r\n        lastExecutedSearchRequestParameters = searchRequestParameters;\r\n        return $http.post(uri.toString(), searchRequestParameters).then(processData);\r\n    }\r\n\r\n    function loadMore(offset, limit, loadAll) {\r\n        lastExecutedSearchRequestParameters.offset = offset;\r\n        lastExecutedSearchRequestParameters.limit = limit;\r\n        lastExecutedSearchRequestParameters.loadAll = angular.isDefined(loadAll) ? loadAll : false;\r\n\r\n        return $http.post(lastExecutedQuery.toString(), lastExecutedSearchRequestParameters).then(processData);\r\n    }\r\n\r\n    function getSearchState(searchRequestId) {\r\n        return $http.get(\"internalapi/search/state\", {params: {searchrequestid: searchRequestId}});\r\n    }\r\n\r\n    function processData(response) {\r\n        var searchResults = response.data.searchResults;\r\n        var indexerSearchMetaDatas = response.data.indexerSearchMetaDatas;\r\n        var numberOfAvailableResults = response.data.numberOfAvailableResults;\r\n        var numberOfRejectedResults = response.data.numberOfRejectedResults;\r\n        var numberOfAcceptedResults = response.data.numberOfAcceptedResults;\r\n        var numberOfProcessedResults = response.data.numberOfProcessedResults;\r\n        var rejectedReasonsMap = response.data.rejectedReasonsMap;\r\n        var notPickedIndexersWithReason = response.data.notPickedIndexersWithReason;\r\n\r\n        lastResults = {\r\n            \"searchResults\": searchResults,\r\n            \"indexerSearchMetaDatas\": indexerSearchMetaDatas,\r\n            \"numberOfAvailableResults\": numberOfAvailableResults,\r\n            \"numberOfAcceptedResults\": numberOfAcceptedResults,\r\n            \"numberOfRejectedResults\": numberOfRejectedResults,\r\n            \"numberOfProcessedResults\": numberOfProcessedResults,\r\n            \"rejectedReasonsMap\": rejectedReasonsMap,\r\n            \"notPickedIndexersWithReason\": notPickedIndexersWithReason\r\n\r\n        };\r\n        console.timeEnd(\"search\");\r\n        return lastResults;\r\n    }\r\n\r\n    function getLastResults() {\r\n        return lastResults;\r\n    }\r\n}\r\nSearchService.$inject = [\"$http\"];","angular\r\n    .module('nzbhydraApp')\r\n    .controller('SearchResultsController', SearchResultsController);\r\n\r\n//SearchResultsController.$inject = ['blockUi'];\r\nfunction SearchResultsController($stateParams, $scope, $q, $timeout, blockUI, growl, localStorageService, SearchService, ConfigService, CategoriesService) {\r\n\r\n    $scope.limitTo = 100;\r\n    $scope.offset = 0;\r\n    //Handle incoming data\r\n\r\n    $scope.indexersearches = SearchService.getLastResults().indexerSearchMetaDatas;\r\n    $scope.notPickedIndexersWithReason = [];\r\n    _.forEach(SearchService.getLastResults().notPickedIndexersWithReason, function (k, v) {\r\n        $scope.notPickedIndexersWithReason.push({\"indexer\": v, \"reason\": k});\r\n    });\r\n    $scope.indexerResultsInfo = {}; //Stores information about the indexerName's searchResults like how many we already retrieved\r\n    $scope.groupExpanded = {};\r\n    $scope.selected = [];\r\n    if ($stateParams.title) {\r\n        $scope.searchTitle = $stateParams.title;\r\n    } else if ($stateParams.query) {\r\n        $scope.searchTitle = $stateParams.query;\r\n    } else {\r\n        $scope.searchTitle = undefined;\r\n    }\r\n\r\n    $scope.selectedIds = _.map($scope.selected, function (value) {\r\n        return value.searchResultId;\r\n    });\r\n\r\n    //For shift clicking results\r\n    $scope.lastClicked = null;\r\n    $scope.lastClickedValue = null;\r\n\r\n    var allSearchResults = [];\r\n    var sortModel = {};\r\n    $scope.filterModel = {};\r\n\r\n    $scope.isShowFilterButtons = ConfigService.getSafe().searching.showQuickFilterButtons;\r\n    $scope.isShowFilterButtonsMovie = $scope.isShowFilterButtons && $stateParams.category.toLowerCase().indexOf(\"movie\") > -1;\r\n    $scope.isShowFilterButtonsTv = $scope.isShowFilterButtons && $stateParams.category.toLowerCase().indexOf(\"tv\") > -1;\r\n    $scope.filterButtonsModel = {\r\n        source: {},\r\n        quality: {}\r\n    };\r\n    $scope.filterButtonsModelMap = {\r\n        tv: ['hdtv'],\r\n        camts: ['cam', 'ts'],\r\n        web: ['webrip', 'web-dl', 'webdl'],\r\n        dvd: ['dvd'],\r\n        bluray: ['bluray', 'blu-ray']\r\n    };\r\n    if (localStorageService.get(\"sorting\") !== null) {\r\n        sortModel = localStorageService.get(\"sorting\");\r\n    } else {\r\n        sortModel = {\r\n            column: \"epoch\",\r\n            sortMode: 2,\r\n            reversed: false\r\n        };\r\n    }\r\n    $timeout(function () {\r\n        $scope.$broadcast(\"newSortColumn\", sortModel.column, sortModel.sortMode, sortModel.reversed);\r\n    }, 10);\r\n\r\n    $scope.foo = {\r\n        indexerStatusesExpanded: localStorageService.get(\"indexerStatusesExpanded\") !== null ? localStorageService.get(\"indexerStatusesExpanded\") : false,\r\n        duplicatesDisplayed: localStorageService.get(\"duplicatesDisplayed\") !== null ? localStorageService.get(\"duplicatesDisplayed\") : false,\r\n        groupTorrentAndNewznabResults: localStorageService.get(\"groupTorrentAndNewznabResults\") !== null ? localStorageService.get(\"groupTorrentAndNewznabResults\") : false,\r\n        sumGrabs: localStorageService.get(\"sumGrabs\") !== null ? localStorageService.get(\"sumGrabs\") : true\r\n    };\r\n    $scope.loadMoreEnabled = false;\r\n    $scope.totalAvailableUnknown = false;\r\n    $scope.expandedTitlegroups = [];\r\n    $scope.optionsOptions = [\r\n        {id: \"duplicatesDisplayed\", label: \"Display duplicates\"},\r\n        {id: \"groupTorrentAndNewznabResults\", label: \"Group torrent and usenet results\"},\r\n        {id: \"sumGrabs\", label: \"Use sum of grabs / seeders in groups for filtering / sorting\"}\r\n\r\n    ];\r\n    $scope.optionsSelectedModel = [];\r\n    for (var key in $scope.optionsOptions) {\r\n        if ($scope.foo[$scope.optionsOptions[key][\"id\"]]) {\r\n            $scope.optionsSelectedModel.push($scope.optionsOptions[key]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    $scope.optionsExtraSettings = {\r\n        showCheckAll: false,\r\n        showUncheckAll: false,\r\n        dynamicTitle: false\r\n    };\r\n\r\n    //TODO: This probably could be done better...\r\n    $scope.optionsEvents = {\r\n        onItemSelect: function (item) {\r\n            if (item.id === \"duplicatesDisplayed\") {\r\n                toggleDuplicatesDisplayed(true);\r\n            } else if (item.id === \"groupTorrentAndNewznabResults\") {\r\n                toggleGroupTorrentAndNewznabResults(true);\r\n            } else if (item.id === \"sumGrabs\") {\r\n                toggleSumGrabs(true);\r\n            }\r\n        },\r\n        onItemDeselect: function (item) {\r\n            if (item.id === \"duplicatesDisplayed\") {\r\n                toggleDuplicatesDisplayed(false);\r\n            } else if (item.id === \"groupTorrentAndNewznabResults\") {\r\n                toggleGroupTorrentAndNewznabResults(false);\r\n            } else if (item.id === \"sumGrabs\") {\r\n                toggleSumGrabs(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    function toggleDuplicatesDisplayed(value) {\r\n        localStorageService.set(\"duplicatesDisplayed\", value);\r\n        $scope.$broadcast(\"duplicatesDisplayed\", value);\r\n        $scope.foo.duplicatesDisplayed = value;\r\n    }\r\n\r\n    function toggleGroupTorrentAndNewznabResults(value) {\r\n        localStorageService.set(\"groupTorrentAndNewznabResults\", value);\r\n        $scope.foo.groupTorrentAndNewznabResults = value;\r\n        blockAndUpdate();\r\n    }\r\n\r\n    function toggleSumGrabs(value) {\r\n        localStorageService.set(\"sumGrabs\", value);\r\n        $scope.foo.sumGrabs = value;\r\n        blockAndUpdate();\r\n    }\r\n\r\n\r\n    $scope.indexersForFiltering = [];\r\n    _.forEach($scope.indexersearches, function (indexer) {\r\n        $scope.indexersForFiltering.push({label: indexer.indexerName, id: indexer.indexerName})\r\n    });\r\n    $scope.categoriesForFiltering = [];\r\n    _.forEach(CategoriesService.getWithoutAll(), function (category) {\r\n        $scope.categoriesForFiltering.push({label: category.name, id: category.name})\r\n    });\r\n    _.forEach($scope.indexersearches, function (ps) {\r\n        $scope.indexerResultsInfo[ps.indexerName.toLowerCase()] = {loadedResults: ps.loaded_results};\r\n    });\r\n\r\n    setDataFromSearchResult(SearchService.getLastResults(), []);\r\n    $scope.$emit(\"searchResultsShown\");\r\n    stopBlocking();\r\n\r\n    //Returns the content of the property (defined by the current sortPredicate) of the first group element \r\n    $scope.firstResultPredicate = firstResultPredicate;\r\n\r\n    function firstResultPredicate(item) {\r\n        return item[0][$scope.sortPredicate];\r\n    }\r\n\r\n    //Returns the unique group identifier which allows angular to keep track of the grouped search results even after filtering, making filtering by indexers a lot faster (albeit still somewhat slow...)\r\n    $scope.groupId = groupId;\r\n\r\n    function groupId(item) {\r\n        return item[0][0].searchResultId;\r\n    }\r\n\r\n    $scope.onFilterButtonsModelChange = function () {\r\n        blockAndUpdate();\r\n    };\r\n\r\n    function blockAndUpdate() {\r\n        startBlocking(\"Sorting / filtering...\").then(function () {\r\n            $scope.filteredResults = sortAndFilter(allSearchResults);\r\n            blockUI.reset();\r\n            localStorageService.set(\"sorting\", sortModel);\r\n        });\r\n    }\r\n\r\n    //Block the UI and return after timeout. This way we make sure that the blocking is done before angular starts updating the model/view. There's probably a better way to achieve that?\r\n    function startBlocking(message) {\r\n        var deferred = $q.defer();\r\n        blockUI.start(message);\r\n        $timeout(function () {\r\n            deferred.resolve();\r\n        }, 10);\r\n        return deferred.promise;\r\n    }\r\n\r\n    $scope.$on(\"sort\", function (event, column, sortMode, reversed) {\r\n        if (sortMode === 0) {\r\n            sortModel = {\r\n                column: \"epoch\",\r\n                sortMode: 2,\r\n                reversed: true\r\n            };\r\n        } else {\r\n            sortModel = {\r\n                column: column,\r\n                sortMode: sortMode,\r\n                reversed: reversed\r\n            };\r\n        }\r\n        $timeout(function () {\r\n            $scope.$broadcast(\"newSortColumn\", sortModel.column, sortModel.sortMode, sortModel.reversed);\r\n        }, 10);\r\n        blockAndUpdate();\r\n    });\r\n\r\n    $scope.$on(\"filter\", function (event, column, filterModel, isActive) {\r\n        if (filterModel.filterValue && isActive) {\r\n            $scope.filterModel[column] = filterModel;\r\n        } else {\r\n            delete $scope.filterModel[column];\r\n        }\r\n        blockAndUpdate();\r\n    });\r\n\r\n    $scope.resort = function () {\r\n    };\r\n\r\n    function sortAndFilter(results) {\r\n        console.time(\"sortAndFilter\");\r\n        var query;\r\n        var words;\r\n        if (\"title\" in $scope.filterModel) {\r\n            query = $scope.filterModel.title.filterValue;\r\n            words = query.toLowerCase().split(/[\\s.\\-]+/);\r\n        }\r\n\r\n        function filter(item) {\r\n            if (\"size\" in $scope.filterModel) {\r\n                var filterValue = $scope.filterModel.size.filterValue;\r\n                if (angular.isDefined(filterValue.min) && item.size / 1024 / 1024 < filterValue.min) {\r\n                    return false;\r\n                }\r\n                if (angular.isDefined(filterValue.max) && item.size / 1024 / 1024 > filterValue.max) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (\"epoch\" in $scope.filterModel) {\r\n                var filterValue = $scope.filterModel.epoch.filterValue;\r\n                var ageDays = moment.utc().diff(moment.unix(item.epoch), \"days\");\r\n                if (angular.isDefined(filterValue.min) && ageDays < filterValue.min) {\r\n                    return false;\r\n                }\r\n                if (angular.isDefined(filterValue.max) && ageDays > filterValue.max) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (\"grabs\" in $scope.filterModel) {\r\n                var filterValue = $scope.filterModel.grabs.filterValue;\r\n                if (angular.isDefined(filterValue.min)) {\r\n                    if ((item.seeders !== null && item.seeders < filterValue.min) || (item.seeders === null && item.grabs !== null && item.grabs < filterValue.min)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                if (angular.isDefined(filterValue.max)) {\r\n                    if ((item.seeders !== null && item.seeders > filterValue.max) || (item.seeders === null && item.grabs !== null && item.grabs > filterValue.max)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (\"title\" in $scope.filterModel) {\r\n                var ok = _.every(words, function (word) {\r\n                    return item.title.toLowerCase().indexOf(word) > -1;\r\n                });\r\n                if (!ok) return false;\r\n            }\r\n            if (\"indexer\" in $scope.filterModel) {\r\n                if (_.indexOf($scope.filterModel.indexer.filterValue, item.indexer) === -1) {\r\n                    return false;\r\n                }\r\n            }\r\n            if (\"category\" in $scope.filterModel) {\r\n                if (_.indexOf($scope.filterModel.category.filterValue, item.category) === -1) {\r\n                    return false;\r\n                }\r\n            }\r\n            if ($scope.filterButtonsModel.source !== null) {\r\n                var mustContain = [];\r\n                _.each($scope.filterButtonsModel.source, function (value, key) { //key is something like 'camts', value is true or false\r\n                    if (value) {\r\n                        Array.prototype.push.apply(mustContain, $scope.filterButtonsModelMap[key]);\r\n                    }\r\n                });\r\n                if (mustContain.length > 0) {\r\n                    var containsAtLeastOne = _.any(mustContain, function (word) {\r\n                        return item.title.toLowerCase().indexOf(word) > -1\r\n                    });\r\n                    if (!containsAtLeastOne) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            if ($scope.filterButtonsModel.quality !== null && !_.isEmpty($scope.filterButtonsModel.quality)) {\r\n                var containsAtLeastOne = false;\r\n                var anyRequired = false;\r\n                _.each($scope.filterButtonsModel.quality, function (value, key) { //key is something like 'q720p', value is true or false\r\n                    anyRequired = anyRequired || value;\r\n                    if (value && item.title.toLowerCase().indexOf(key.substring(1)) > -1) {\r\n                        containsAtLeastOne = true;\r\n                    }\r\n                });\r\n                return !anyRequired || containsAtLeastOne;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n\r\n        function getCleanedTitle(element) {\r\n            return element.title.toLowerCase().replace(/[\\s\\-\\._]/ig, \"\");\r\n        }\r\n\r\n        var sortPredicateKey = sortModel.column;\r\n        var sortReversed = sortModel.reversed;\r\n\r\n        function getSortPredicateValue(containgObject) {\r\n            var sortPredicateValue;\r\n            if (sortPredicateKey === \"grabs\") {\r\n                if (containgObject[\"seeders\"] !== null) {\r\n                    sortPredicateValue = containgObject[\"seeders\"];\r\n                } else if (containgObject[\"grabs\"] !== null) {\r\n                    sortPredicateValue = containgObject[\"grabs\"];\r\n                } else {\r\n                    sortPredicateValue = 0;\r\n                }\r\n            } else if (sortPredicateKey === \"title\") {\r\n                sortPredicateValue = getCleanedTitle(containgObject);\r\n            } else if (sortPredicateKey === \"indexer\") {\r\n                sortPredicateValue = containgObject[\"indexer\"];\r\n            } else {\r\n                sortPredicateValue = containgObject[sortPredicateKey];\r\n            }\r\n            return sortPredicateValue;\r\n        }\r\n\r\n        function createSortedHashgroups(titleGroup) {\r\n            function createHashGroup(hashGroup) {\r\n                //Sorting hash group's contents should not matter for size and age and title but might for category (we might remove this, it's probably mostly unnecessary)\r\n                var sortedHashGroup = _.sortBy(hashGroup, function (item) {\r\n                    var sortPredicateValue = getSortPredicateValue(item);\r\n                    return sortReversed ? -sortPredicateValue : sortPredicateValue;\r\n                });\r\n                //Now sort the hash group by indexer score (inverted) so that the result with the highest indexer score is shown on top (or as the only one of a hash group if it's collapsed)\r\n                sortedHashGroup = _.sortBy(sortedHashGroup, function (item) {\r\n                    return item.indexerscore * -1;\r\n                });\r\n                return sortedHashGroup;\r\n            }\r\n\r\n            function getHashGroupFirstElementSortPredicate(hashGroup) {\r\n                if (sortPredicateKey === \"title\") {\r\n                    //Sorting a title group internally by title doesn't make sense so fall back to sorting by age so that newest result is at the top\r\n                    return hashGroup[0][\"epoch\"] * -1;\r\n                }\r\n                var sortPredicateValue = getSortPredicateValue(hashGroup[0]);\r\n                return sortPredicateValue;\r\n            }\r\n\r\n            var grouped = _.groupBy(titleGroup, \"hash\");\r\n            var mapped = _.map(grouped, createHashGroup);\r\n            var sorted = _.sortBy(mapped, getHashGroupFirstElementSortPredicate);\r\n            if (sortModel.sortMode === 2 && sortPredicateKey !== \"title\") {\r\n                sorted = sorted.reverse();\r\n            }\r\n            return sorted;\r\n        }\r\n\r\n        function getTitleGroupFirstElementsSortPredicate(titleGroup) {\r\n            var sortPredicateValue;\r\n            if (sortPredicateKey === \"grabs\" && $scope.foo.sumGrabs) {\r\n                var sumOfGrabs = 0;\r\n                _.each(titleGroup, function (element1) {\r\n                    _.each(element1, function (element2) {\r\n                        sumOfGrabs += getSortPredicateValue(element2);\r\n                    })\r\n                });\r\n\r\n                sortPredicateValue = sumOfGrabs;\r\n            } else {\r\n                sortPredicateValue = getSortPredicateValue(titleGroup[0][0]);\r\n            }\r\n            return sortPredicateValue\r\n        }\r\n\r\n        var filtered = _.filter(results, filter);\r\n        $scope.selected = _.filter($scope.selected, function (x) {\r\n            if (filtered.indexOf(x) === -1) {\r\n                console.log(\"Removing \" + x.title + \" from selected results because it's being hidden\");\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n\r\n        function getGroupingString(element) {\r\n            var groupingString = getCleanedTitle(element);\r\n            if (!$scope.foo.groupTorrentAndNewznabResults) {\r\n                groupingString = groupingString + element.downloadType;\r\n            }\r\n            return groupingString;\r\n        }\r\n\r\n        var grouped = _.groupBy(filtered, getGroupingString);\r\n        var mapped = _.map(grouped, createSortedHashgroups);\r\n        var sorted = _.sortBy(mapped, getTitleGroupFirstElementsSortPredicate);\r\n        if (sortModel.sortMode === 2) {\r\n            sorted = sorted.reverse();\r\n        }\r\n\r\n        $scope.lastClicked = null;\r\n\r\n        console.timeEnd(\"sortAndFilter\");\r\n        return sorted;\r\n    }\r\n\r\n    $scope.toggleTitlegroupExpand = function toggleTitlegroupExpand(titleGroup) {\r\n        $scope.groupExpanded[titleGroup[0][0].title] = !$scope.groupExpanded[titleGroup[0][0].title];\r\n        $scope.groupExpanded[titleGroup[0][0].hash] = !$scope.groupExpanded[titleGroup[0][0].hash];\r\n    };\r\n\r\n    $scope.stopBlocking = stopBlocking;\r\n\r\n    function stopBlocking() {\r\n        blockUI.reset();\r\n    }\r\n\r\n    function setDataFromSearchResult(data, previousSearchResults) {\r\n        console.time(\"setDataFromSearchResult\");\r\n        allSearchResults = previousSearchResults.concat(data.searchResults);\r\n        allSearchResults = uniq(allSearchResults);\r\n        $scope.filteredResults = sortAndFilter(allSearchResults);\r\n        $scope.numberOfAvailableResults = data.numberOfAvailableResults;\r\n        $scope.rejectedReasonsMap = data.rejectedReasonsMap;\r\n        $scope.anyResultsRejected = !_.isEmpty(data.rejectedReasonsMap);\r\n        $scope.numberOfAcceptedResults = data.numberOfAcceptedResults;\r\n        $scope.numberOfRejectedResults = data.numberOfRejectedResults;\r\n        $scope.numberOfProcessedResults = data.numberOfProcessedResults;\r\n        $scope.numberOfLoadedResults = allSearchResults.length;\r\n        $scope.indexersearches = data.indexerSearchMetaDatas;\r\n\r\n        $scope.loadMoreEnabled = ($scope.numberOfLoadedResults + $scope.numberOfRejectedResults < $scope.numberOfAvailableResults) || _.any(data.indexerSearchMetaDatas, function (x) {\r\n            return x.hasMoreResults;\r\n        });\r\n        $scope.totalAvailableUnknown = _.any(data.indexerSearchMetaDatas, function (x) {\r\n            return !x.totalResultsKnown;\r\n        });\r\n\r\n        if (!$scope.foo.indexerStatusesExpanded && _.any(data.indexerSearchMetaDatas, function (x) {\r\n                return !x.wasSuccessful;\r\n            })) {\r\n            growl.info(\"Errors occurred during searching, Check indexer statuses\")\r\n        }\r\n        //Only show those categories in filter that are actually present in the results\r\n        $scope.categoriesForFiltering = [];\r\n        var allUsedCategories = _.uniq(_.pluck(allSearchResults, \"category\"));\r\n        _.forEach(CategoriesService.getWithoutAll(), function (category) {\r\n            if (allUsedCategories.indexOf(category.name) > -1) {\r\n                $scope.categoriesForFiltering.push({label: category.name, id: category.name})\r\n            }\r\n        });\r\n        console.timeEnd(\"setDataFromSearchResult\");\r\n    }\r\n\r\n    function uniq(searchResults) {\r\n        var seen = {};\r\n        var out = [];\r\n        var len = searchResults.length;\r\n        var j = 0;\r\n        for (var i = 0; i < len; i++) {\r\n            var item = searchResults[i];\r\n            if (seen[item.searchResultId] !== 1) {\r\n                seen[item.searchResultId] = 1;\r\n                out[j++] = item;\r\n            }\r\n        }\r\n        return out;\r\n    }\r\n\r\n    $scope.loadMore = loadMore;\r\n\r\n    function loadMore(loadAll) {\r\n        startBlocking(loadAll ? \"Loading all results...\" : \"Loading more results...\").then(function () {\r\n            var limit = loadAll ? $scope.numberOfAvailableResults - $scope.numberOfProcessedResults : null;\r\n            SearchService.loadMore($scope.numberOfLoadedResults, limit, loadAll).then(function (data) {\r\n                setDataFromSearchResult(data, allSearchResults);\r\n                stopBlocking();\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    $scope.countResults = countResults;\r\n\r\n    function countResults() {\r\n        return allSearchResults.length;\r\n    }\r\n\r\n    $scope.invertSelection = function invertSelection() {\r\n        $scope.$broadcast(\"invertSelection\");\r\n    };\r\n\r\n    $scope.deselectAll = function deselectAll() {\r\n        $scope.$broadcast(\"deselectAll\");\r\n    };\r\n\r\n    $scope.selectAll = function selectAll() {\r\n        $scope.$broadcast(\"selectAll\");\r\n    };\r\n\r\n    $scope.toggleIndexerStatuses = function () {\r\n        $scope.foo.indexerStatusesExpanded = !$scope.foo.indexerStatusesExpanded;\r\n        localStorageService.set(\"indexerStatusesExpanded\", $scope.foo.indexerStatusesExpanded);\r\n    };\r\n\r\n    $scope.getRejectedReasonsTooltip = function () {\r\n        if (_.isEmpty($scope.rejectedReasonsMap)) {\r\n            return \"No rejected results\";\r\n        } else {\r\n            var tooltip = \"<span >Rejected results:<span><br>\";\r\n            tooltip += '<table class=\"rejected-tooltip-table\"><thead><tr><th width=\"50px\">Count</th><th>Reason</th></tr></thead>';\r\n            _.forEach($scope.rejectedReasonsMap, function (count, reason) {\r\n                tooltip += '<tr><td>' + count + '</td><td>' + reason + '</td></tr>';\r\n            });\r\n            tooltip += '</table>';\r\n            return tooltip;\r\n        }\r\n    };\r\n\r\n    $scope.$on(\"checkboxClicked\", function (event, originalEvent, rowIndex, newCheckedValue) {\r\n        if (originalEvent.shiftKey && $scope.lastClicked !== null) {\r\n            $scope.$broadcast(\"shiftClick\", Number($scope.lastClicked), Number(rowIndex), Number($scope.lastClickedValue));\r\n        }\r\n        $scope.lastClicked = rowIndex;\r\n        $scope.lastClickedValue = newCheckedValue;\r\n    });\r\n\r\n    $scope.downloadNzbsCallback = function (addedIds) {\r\n        if (addedIds !== null && addedIds.length > 0) {\r\n            growl.info(\"Removing downloaded NZBs from selection\");\r\n            $scope.selected = _.filter($scope.selected, function (x) {\r\n                return addedIds.indexOf(x) > -1;\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n    $scope.filterRejectedZero = function () {\r\n        return function (entry) {\r\n            return entry[1] > 0;\r\n        }\r\n    };\r\n\r\n}\r\nSearchResultsController.$inject = [\"$stateParams\", \"$scope\", \"$q\", \"$timeout\", \"blockUI\", \"growl\", \"localStorageService\", \"SearchService\", \"ConfigService\", \"CategoriesService\"];\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('SearchHistoryService', SearchHistoryService);\r\n\r\nfunction SearchHistoryService($filter, $http) {\r\n\r\n    return {\r\n        getSearchHistory: getSearchHistory,\r\n        getSearchHistoryForSearching: getSearchHistoryForSearching,\r\n        formatRequest: formatRequest,\r\n        getStateParamsForRepeatedSearch: getStateParamsForRepeatedSearch\r\n    };\r\n\r\n    function getSearchHistoryForSearching() {\r\n        return $http.post(\"internalapi/history/searches/forsearching\").success(function (response) {\r\n            return {\r\n                searchRequests: response\r\n            }\r\n        });\r\n    }\r\n\r\n    function getSearchHistory(pageNumber, limit, filterModel, sortModel, distinct, onlyCurrentUser) {\r\n        var params = {\r\n            page: pageNumber,\r\n            limit: limit,\r\n            filterModel: filterModel,\r\n            distinct: distinct,\r\n            onlyCurrentUser: onlyCurrentUser\r\n        };\r\n        if (angular.isUndefined(pageNumber)) {\r\n            params.page = 1;\r\n        }\r\n        if (angular.isUndefined(limit)) {\r\n            params.limit = 100;\r\n        }\r\n        if (angular.isUndefined(filterModel)) {\r\n            params.filterModel = {}\r\n        }\r\n        if (!angular.isUndefined(sortModel)) {\r\n            params.sortModel = sortModel;\r\n        } else {\r\n            params.sortModel = {\r\n                column: \"time\",\r\n                sortMode: 2\r\n            };\r\n        }\r\n        return $http.post(\"internalapi/history/searches\", params).success(function (response) {\r\n            return {\r\n                searchRequests: response.content,\r\n                totalRequests: response.totalElements\r\n            }\r\n        });\r\n    }\r\n\r\n    function formatRequest(request, includeIdLink, includequery, describeEmptySearch, includeTitle) {\r\n        var result = [];\r\n        result.push('<span class=\"history-title\">Category: </span>' + request.categoryName);\r\n        if (includequery && request.query) {\r\n            result.push('<span class=\"history-title\">Query: </span>' + request.query);\r\n        }\r\n        if (request.title && includeTitle) {\r\n            result.push('<span class=\"history-title\">Title: </span>' + request.title);\r\n        } //Only include identifiers if title is unknown\r\n        else if (request.identifiers.length > 0) {\r\n            var href;\r\n            var key;\r\n            var value;\r\n            var identifiers = _.indexBy(request.identifiers, 'identifierKey');\r\n            if (\"IMDB\" in identifiers) {\r\n                key = \"IMDB ID\";\r\n                value = identifiers.IMDB.identifierValue;\r\n                href = \"https://www.imdb.com/title/tt\" + value;\r\n            } else if (\"TVDB\" in identifiers) {\r\n                key = \"TVDB ID\";\r\n                value = identifiers.TVDB.identifierValue;\r\n                href = \"https://thetvdb.com/?tab=series&id=\" + value;\r\n            } else if (\"TVRAGE\" in identifiers) {\r\n                key = \"TVRage ID\";\r\n                value = identifiers.TVRAGE.identifierValue;\r\n                href = \"internalapi/redirect_rid?rid=\" + value;\r\n            } else if (\"TMDB\" in identifiers) {\r\n                key = \"TMDB ID\";\r\n                value = identifiers.TMDB.identifierValue;\r\n                href = \"https://www.themoviedb.org/movie/\" + value;\r\n            }\r\n            href = $filter(\"dereferer\")(href);\r\n            if (includeIdLink) {\r\n                result.push('<span class=\"history-title\">' + key + ': </span><a target=\"_blank\" href=\"' + href + '\">' + value + \"</a>\");\r\n            } else {\r\n                result.push('<span class=\"history-title\">' + key + \": </span>\" + value);\r\n            }\r\n        }\r\n        if (request.season) {\r\n            result.push('<span class=\"history-title\">Season: </span>' + request.season);\r\n        }\r\n        if (request.episode) {\r\n            result.push('<span class=\"history-title\">Episode: </span>' + request.episode);\r\n        }\r\n        if (request.author) {\r\n            result.push('<span class=\"history-title\">Author: </span>' + request.author);\r\n        }\r\n        if (result.length === 0 && describeEmptySearch) {\r\n            result = ['<span class=\"history-title\">Empty search</span>'];\r\n        }\r\n\r\n        return result.join(\", \");\r\n\r\n    }\r\n\r\n    function getStateParamsForRepeatedSearch(request) {\r\n        var stateParams = {};\r\n        stateParams.mode = \"search\";\r\n        var availableIdentifiers = _.pluck(request.identifiers, \"identifierKey\");\r\n        if (availableIdentifiers.indexOf(\"TMDB\") > -1 || availableIdentifiers.indexOf(\"IMDB\") > -1) {\r\n            stateParams.mode = \"movie\";\r\n        } else if (availableIdentifiers.indexOf(\"TVRAGE\") > -1 || availableIdentifiers.indexOf(\"TVMAZE\") > -1 || availableIdentifiers.indexOf(\"TVDB\") > -1) {\r\n            stateParams.mode = \"tvsearch\";\r\n        }\r\n        if (request.season) {\r\n            stateParams.season = request.season;\r\n        }\r\n        if (request.episode) {\r\n            stateParams.episode = request.episode;\r\n        }\r\n\r\n        _.each(request.identifiers, function(entry) {\r\n            switch(entry.identifierKey) {\r\n                case \"TMDB\":\r\n                    stateParams.tmdbid = entry.identifierValue;\r\n                    break;\r\n                case \"IMDB\":\r\n                    stateParams.imdbid = entry.identifierValue;\r\n                    break;\r\n                case \"TVMAZE\":\r\n                    stateParams.tvmazeid = entry.identifierValue;\r\n                    break;\r\n                case \"TVRAGE\":\r\n                    stateParams.tvrageid = entry.identifierValue;\r\n                    break;\r\n                case \"TVDB\":\r\n                    stateParams.tvdbid = entry.identifierValue;\r\n                    break;\r\n            }\r\n        });\r\n\r\n\r\n        if (request.query !== \"\") {\r\n            stateParams.query = request.query;\r\n        }\r\n\r\n        if (request.title) {\r\n            stateParams.title = request.title;\r\n        }\r\n\r\n        if (request.categoryName) {\r\n            stateParams.category = request.categoryName;\r\n        }\r\n\r\n        return stateParams;\r\n    }\r\n\r\n\r\n}\r\nSearchHistoryService.$inject = [\"$filter\", \"$http\"];","angular\r\n    .module('nzbhydraApp')\r\n    .controller('SearchHistoryController', SearchHistoryController);\r\n\r\n\r\nfunction SearchHistoryController($scope, $state, SearchHistoryService, ConfigService, history, $sce, $filter, $timeout) {\r\n    $scope.limit = 100;\r\n    $scope.pagination = {\r\n        current: 1\r\n    };\r\n    var sortModel = {\r\n        column: \"time\",\r\n        sortMode: 2\r\n    };\r\n    $timeout(function () {\r\n        $scope.$broadcast(\"newSortColumn\", sortModel.column, sortModel.sortMode);\r\n    }, 10);\r\n    $scope.filterModel = {};\r\n\r\n    //Filter options\r\n    $scope.categoriesForFiltering = [];\r\n    _.forEach(ConfigService.getSafe().categoriesConfig.categories, function (category) {\r\n        $scope.categoriesForFiltering.push({label: category.name, id: category.name})\r\n    });\r\n    $scope.preselectedTimeInterval = {beforeDate: null, afterDate: null};\r\n    $scope.accessOptionsForFiltering = [{label: \"All\", value: \"all\"}, {label: \"API\", value: 'API'}, {label: \"Internal\", value: 'INTERNAL'}];\r\n\r\n    //Preloaded data\r\n    $scope.searchRequests = history.data.content;\r\n    $scope.totalRequests = history.data.totalElements;\r\n\r\n    $scope.columnSizes = {\r\n        time: 10,\r\n        query: 30,\r\n        category: 10,\r\n        additionalParameters: 22,\r\n        source: 8,\r\n        username: 10,\r\n        ip: 10\r\n    };\r\n    if (ConfigService.getSafe().logging.historyUserInfoType === \"NONE\") {\r\n        $scope.columnSizes.username = 0;\r\n        $scope.columnSizes.ip = 0;\r\n        $scope.columnSizes.query += 10;\r\n        $scope.columnSizes.additionalParameters += 10;\r\n    } else if (ConfigService.getSafe().logging.historyUserInfoType === \"IP\") {\r\n        $scope.columnSizes.username = 0;\r\n        $scope.columnSizes.query += 5;\r\n        $scope.columnSizes.additionalParameters += 5;\r\n    } else if (ConfigService.getSafe().logging.historyUserInfoType === \"USERNAME\") {\r\n        $scope.columnSizes.ip = 0;\r\n        $scope.columnSizes.query += 5;\r\n        $scope.columnSizes.additionalParameters += 5;\r\n    }\r\n\r\n    $scope.update = function () {\r\n        SearchHistoryService.getSearchHistory($scope.pagination.current, $scope.limit, $scope.filterModel, sortModel).then(function (history) {\r\n            $scope.searchRequests = history.data.content;\r\n            $scope.totalRequests = history.data.totalElements;\r\n        });\r\n    };\r\n\r\n    $scope.$on(\"sort\", function (event, column, sortMode) {\r\n        if (sortMode === 0) {\r\n            sortModel = {\r\n                column: \"time\",\r\n                sortMode: 2\r\n            };\r\n        } else {\r\n            sortModel = {\r\n                column: column,\r\n                sortMode: sortMode\r\n            };\r\n        }\r\n        $scope.$broadcast(\"newSortColumn\", sortModel.column, sortModel.sortMode);\r\n        $scope.update();\r\n    });\r\n\r\n    $scope.$on(\"filter\", function (event, column, filterModel, isActive) {\r\n        if (filterModel.filterValue) {\r\n            $scope.filterModel[column] = filterModel;\r\n        } else {\r\n            delete $scope.filterModel[column];\r\n        }\r\n        $scope.update();\r\n    });\r\n\r\n\r\n    $scope.openSearch = function (request) {\r\n        $state.go(\"root.search\", SearchHistoryService.getStateParamsForRepeatedSearch(request), {inherit: false, notify: true, reload: true});\r\n    };\r\n\r\n    $scope.formatQuery = function (request) {\r\n        if (request.title) {\r\n            return request.title;\r\n        }\r\n\r\n        if (!request.query && request.identifiers.length === 0 && !request.season && !request.episode) {\r\n            return \"Update query\";\r\n        }\r\n        return request.query;\r\n    };\r\n\r\n    $scope.formatAdditional = function (request) {\r\n        var result = [];\r\n        if (request.identifiers.length > 0) {\r\n            var href;\r\n            var key;\r\n            var value;\r\n            var pair = _.find(request.identifiers, function (pair) {\r\n                return pair.identifierKey === \"TMDB\"\r\n            });\r\n            if (angular.isDefined(pair)) {\r\n                key = \"TMDB ID\";\r\n                href = \"https://www.themoviedb.org/movie/\" + pair.identifierValue;\r\n                href = $filter(\"dereferer\")(href);\r\n                value = pair.identifierValue;\r\n            }\r\n\r\n            pair = _.find(request.identifiers, function (pair) {\r\n                return pair.identifierKey === \"IMDB\"\r\n            });\r\n            if (angular.isDefined(pair)) {\r\n                key = \"IMDB ID\";\r\n                href = \"https://www.imdb.com/title/tt\" + pair.identifierValue;\r\n                href = $filter(\"dereferer\")(href);\r\n                value = pair.identifierValue;\r\n            }\r\n\r\n            pair = _.find(request.identifiers, function (pair) {\r\n                return pair.identifierKey === \"TVDB\"\r\n            });\r\n            if (angular.isDefined(pair)) {\r\n                key = \"TVDB ID\";\r\n                href = \"https://thetvdb.com/?tab=series&id=\" + pair.identifierValue;\r\n                href = $filter(\"dereferer\")(href);\r\n                value = pair.identifierValue;\r\n            }\r\n\r\n            pair = _.find(request.identifiers, function (pair) {\r\n                return pair.identifierKey === \"TVRAGE\"\r\n            });\r\n            if (angular.isDefined(pair)) {\r\n                key = \"TVRage ID\";\r\n                href = \"internalapi/redirectRid/\" + pair.identifierValue;\r\n                value = pair.identifierValue;\r\n            }\r\n\r\n            result.push(key + \": \" + '<a target=\"_blank\" href=\"' + href + '\">' + value + \"</a>\");\r\n        }\r\n        if (request.season) {\r\n            result.push(\"Season: \" + request.season);\r\n        }\r\n        if (request.episode) {\r\n            result.push(\"Episode: \" + request.episode);\r\n        }\r\n        if (request.author) {\r\n            result.push(\"Author: \" + request.author);\r\n        }\r\n        return $sce.trustAsHtml(result.join(\", \"));\r\n    };\r\n\r\n\r\n}\r\nSearchHistoryController.$inject = [\"$scope\", \"$state\", \"SearchHistoryService\", \"ConfigService\", \"history\", \"$sce\", \"$filter\", \"$timeout\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .controller('SearchController', SearchController);\r\n\r\nfunction SearchController($scope, $http, $stateParams, $state, $uibModal, $timeout, $sce, growl, SearchService, focus, ConfigService, HydraAuthService, CategoriesService, $element, SearchHistoryService) {\r\n\r\n    function getNumberOrUndefined(number) {\r\n        if (_.isUndefined(number) || _.isNaN(number) || number === \"\") {\r\n            return undefined;\r\n        }\r\n        number = parseInt(number);\r\n        if (_.isNumber(number)) {\r\n            return number;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    var searchRequestId = 0;\r\n    var isSearchCancelled = false;\r\n    var epochEnter;\r\n\r\n    //Fill the form with the search values we got from the state params (so that their values are the same as in the current url)\r\n    $scope.mode = $stateParams.mode;\r\n    $scope.query = \"\";\r\n    $scope.selectedItem = null;\r\n    $scope.categories = _.filter(CategoriesService.getAllCategories(), function (c) {\r\n        return c.mayBeSelected && !(c.ignoreResultsFrom === \"INTERNAL\" || c.ignoreResultsFrom === \"BOTH\");\r\n    });\r\n    if (angular.isDefined($stateParams.category) && $stateParams.category) {\r\n        $scope.category = CategoriesService.getByName($stateParams.category);\r\n    } else {\r\n        $scope.category = CategoriesService.getDefault();\r\n    }\r\n    $scope.category = (_.isUndefined($stateParams.category) || $stateParams.category === \"\") ? CategoriesService.getDefault() : CategoriesService.getByName($stateParams.category);\r\n    $scope.season = $stateParams.season;\r\n    $scope.episode = $stateParams.episode;\r\n    $scope.query = $stateParams.query;\r\n    $scope.minsize = getNumberOrUndefined($stateParams.minsize);\r\n    $scope.maxsize = getNumberOrUndefined($stateParams.maxsize);\r\n    $scope.minage = getNumberOrUndefined($stateParams.minage);\r\n    $scope.maxage = getNumberOrUndefined($stateParams.maxage);\r\n    if (angular.isDefined($stateParams.indexers)) {\r\n        $scope.indexers = decodeURIComponent($stateParams.indexers).split(\",\");\r\n    }\r\n    if (angular.isDefined($stateParams.title) && (angular.isDefined($stateParams.tmdbid) || angular.isDefined($stateParams.imdbid) || angular.isDefined($stateParams.tvmazeid) || angular.isDefined($stateParams.rid) || angular.isDefined($stateParams.tvdbid))) {\r\n        $scope.selectedItem = {\r\n            tmdbId: $stateParams.tmdbid,\r\n            imdbId: $stateParams.imdbid,\r\n            tvmazeId: $stateParams.tvmazeid,\r\n            rid: $stateParams.rid,\r\n            tvdbId: $stateParams.tvdbid,\r\n            title: $stateParams.title\r\n        }\r\n    }\r\n\r\n    $scope.showIndexers = {};\r\n\r\n    $scope.searchHistory = [];\r\n\r\n    var safeConfig = ConfigService.getSafe();\r\n    $scope.showIndexerSelection = HydraAuthService.getUserInfos().showIndexerSelection;\r\n\r\n\r\n    $scope.typeAheadWait = 300;\r\n\r\n    $scope.autocompleteLoading = false;\r\n    $scope.isAskById = $scope.category.searchType === \"TVSEARCH\" || $scope.category.searchType === \"MOVIE\";\r\n    $scope.isById = {value: $scope.selectedItem !== null || angular.isUndefined($scope.mode) || $scope.mode === null}; //If true the user wants to search by id so we enable autosearch. Was unable to achieve this using a simple boolean. Set to false if last search was not by ID\r\n    $scope.availableIndexers = [];\r\n    $scope.selectedIndexers = [];\r\n    $scope.autocompleteClass = \"autocompletePosterMovies\";\r\n\r\n    $scope.toggleCategory = function (searchCategory) {\r\n        var oldCategory = $scope.category;\r\n        $scope.category = searchCategory;\r\n\r\n        //Show checkbox to ask if the user wants to search by ID (using autocomplete)\r\n        if ($scope.category.searchType === \"TVSEARCH\" || $scope.category.searchType === \"MOVIE\") {\r\n            $scope.isAskById = true;\r\n            $scope.isById.value = true;\r\n        } else {\r\n            $scope.isAskById = false;\r\n            $scope.isById.value = false;\r\n        }\r\n\r\n        if (oldCategory.searchType !== searchCategory.searchType) {\r\n            $scope.selectedItem = null;\r\n        }\r\n\r\n        focus('searchfield');\r\n\r\n        //Hacky way of triggering the autocomplete loading\r\n        var searchModel = $element.find(\"#searchfield\").controller(\"ngModel\");\r\n        if (angular.isDefined(searchModel.$viewValue)) {\r\n            searchModel.$setViewValue(searchModel.$viewValue + \" \");\r\n        }\r\n\r\n        if (safeConfig.categoriesConfig.enableCategorySizes) {\r\n            var min = searchCategory.minSizePreset;\r\n            var max = searchCategory.maxSizePreset;\r\n            if (_.isNumber(min)) {\r\n                $scope.minsize = min;\r\n            } else {\r\n                $scope.minsize = \"\";\r\n            }\r\n            if (_.isNumber(max)) {\r\n                $scope.maxsize = max;\r\n            } else {\r\n                $scope.maxsize = \"\";\r\n            }\r\n        }\r\n\r\n        $scope.availableIndexers = getAvailableIndexers();\r\n    };\r\n\r\n\r\n    // Any function returning a promise object can be used to load values asynchronously\r\n    $scope.getAutocomplete = function (val) {\r\n        $scope.autocompleteLoading = true;\r\n        //Expected model returned from API:\r\n        //label: What to show in the results\r\n        //title: Will be used for file search\r\n        //value: Will be used as extraInfo (ttid oder tvdb id)\r\n        //poster: url of poster to show\r\n\r\n        //Don't use autocomplete if checkbox is disabled\r\n        if (!$scope.isById.value || $scope.selectedItem) {\r\n            return {};\r\n        }\r\n\r\n        if ($scope.category.searchType === \"MOVIE\") {\r\n            return $http.get('internalapi/autocomplete/MOVIE/' + val).then(function (response) {\r\n                $scope.autocompleteLoading = false;\r\n                return response.data;\r\n            });\r\n        } else if ($scope.category.searchType === \"TVSEARCH\") {\r\n            return $http.get('internalapi/autocomplete/TV/' + val).then(function (response) {\r\n                $scope.autocompleteLoading = false;\r\n                return response.data;\r\n            });\r\n        } else {\r\n            return {};\r\n        }\r\n    };\r\n\r\n    $scope.onTypeAheadEnter = function () {\r\n        if (angular.isDefined(epochEnter)) {\r\n            //Very hacky way of preventing a press of \"enter\" to select an autocomplete item from triggering a search\r\n            //This is called *after* selectAutoComplete() is called\r\n            var epochEnterNow = (new Date).getTime();\r\n            var diff = epochEnterNow-epochEnter;\r\n            if (diff > 50) {\r\n                $scope.initiateSearch();\r\n            }\r\n        } else {\r\n            $scope.initiateSearch();\r\n        }\r\n    };\r\n\r\n    $scope.onTypeAheadKeyDown = function(event) {\r\n        if (event.keyCode === 8) {\r\n            if ($scope.query === \"\") {\r\n                $scope.clearAutocomplete();\r\n            }\r\n        }\r\n    };\r\n\r\n    //Is called when the search page is opened with params, either because the user initiated the search (which triggered a goTo to this page) or because a search URL was entered\r\n    $scope.startSearch = function () {\r\n        isSearchCancelled = false;\r\n        searchRequestId = Math.round(Math.random() * 999999);\r\n        var modalInstance = $scope.openModal(searchRequestId);\r\n\r\n        var indexers = angular.isUndefined($scope.indexers) ? undefined : $scope.indexers.join(\",\");\r\n        SearchService.search(searchRequestId, $scope.category.name, $scope.query, $scope.selectedItem, $scope.season, $scope.episode, $scope.minsize, $scope.maxsize, $scope.minage, $scope.maxage, indexers, $scope.mode).then(function () {\r\n                modalInstance.close();\r\n                if (!isSearchCancelled) {\r\n                    $state.go(\"root.search.results\", {\r\n                        minsize: $scope.minsize,\r\n                        maxsize: $scope.maxsize,\r\n                        minage: $scope.minage,\r\n                        maxage: $scope.maxage\r\n                    }, {\r\n                        inherit: true\r\n                    });\r\n                }\r\n            },\r\n            function () {\r\n                modalInstance.close();\r\n            });\r\n    };\r\n\r\n    $scope.openModal = function openModal(searchRequestId) {\r\n        return $uibModal.open({\r\n            templateUrl: 'static/html/search-state.html',\r\n            controller: SearchUpdateModalInstanceCtrl,\r\n            size: \"md\",\r\n            backdrop: \"static\",\r\n            backdropClass: \"waiting-cursor\",\r\n            resolve: {\r\n                searchRequestId: function () {\r\n                    return searchRequestId;\r\n                },\r\n                onCancel: function () {\r\n                    function cancel() {\r\n                        isSearchCancelled = true;\r\n                    }\r\n\r\n                    return cancel;\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.goToSearchUrl = function () {\r\n        //State params (query parameters) should all be lowercase\r\n        var stateParams = {};\r\n        stateParams.mode = $scope.category.searchType.toLowerCase();\r\n        stateParams.imdbid = $scope.selectedItem === null ? null : $scope.selectedItem.imdbId;\r\n        stateParams.tmdbid = $scope.selectedItem === null ? null : $scope.selectedItem.tmdbId;\r\n        stateParams.tvdbid = $scope.selectedItem === null ? null : $scope.selectedItem.tvdbId;\r\n        stateParams.tvrageid = $scope.selectedItem === null ? null : $scope.selectedItem.tvrageId;\r\n        stateParams.tvmazeid = $scope.selectedItem === null ? null : $scope.selectedItem.tvmazeId;\r\n        stateParams.title = $scope.selectedItem === null ? null : $scope.selectedItem.title;\r\n        stateParams.season = $scope.season;\r\n        stateParams.episode = $scope.episode;\r\n        stateParams.query = $scope.query;\r\n        stateParams.minsize = $scope.minsize;\r\n        stateParams.maxsize = $scope.maxsize;\r\n        stateParams.minage = $scope.minage;\r\n        stateParams.maxage = $scope.maxage;\r\n        stateParams.category = $scope.category.name;\r\n        stateParams.indexers = encodeURIComponent($scope.selectedIndexers.join(\",\"));\r\n        $state.go(\"root.search\", stateParams, {inherit: false, notify: true, reload: true});\r\n    };\r\n\r\n    $scope.repeatSearch = function (request) {\r\n        var stateParams = SearchHistoryService.getStateParamsForRepeatedSearch(request);\r\n        stateParams.indexers = encodeURIComponent($scope.selectedIndexers.join(\",\"));\r\n        $state.go(\"root.search\", stateParams, {inherit: false, notify: true, reload: true});\r\n    };\r\n\r\n    $scope.searchBoxTooltip = \"Prefix terms with -- to exclude'\";\r\n    $scope.$watchGroup(['isAskById', 'selectedItem'], function () {\r\n        if (!$scope.isAskById) {\r\n            $scope.searchBoxTooltip = \"Prefix terms with -- to exclude\";\r\n        } else if ($scope.selectedItem === null) {\r\n            $scope.searchBoxTooltip = \"Enter search terms for autocomplete\";\r\n        } else {\r\n            $scope.searchBoxTooltip = \"Enter additional search terms to limit the query\";\r\n        }\r\n    });\r\n\r\n    $scope.clearAutocomplete = function () {\r\n        $scope.selectedItem = null;\r\n        $scope.query = \"\"; //Input is now for autocomplete and not for limiting the results\r\n        focus('searchfield');\r\n    };\r\n\r\n    $scope.selectAutocompleteItem = function ($item) {\r\n        $scope.selectedItem = $item;\r\n        $scope.query = \"\";\r\n        epochEnter = (new Date).getTime();\r\n    };\r\n\r\n    $scope.initiateSearch = function () {\r\n        if ($scope.selectedItem) {\r\n            //Movie or tv show was selected\r\n            $scope.goToSearchUrl();\r\n        } else {\r\n            //Simple query search\r\n            if (!$scope.query) {\r\n                growl.error(\"You didn't enter a query...\");\r\n            } else {\r\n                //Reset values because they might've been set from the last search\r\n                $scope.goToSearchUrl();\r\n            }\r\n        }\r\n    };\r\n\r\n    $scope.autocompleteActive = function () {\r\n        return $scope.isAskById;\r\n    };\r\n\r\n    $scope.seriesSelected = function () {\r\n        return $scope.category.searchType === \"TVSEARCH\";\r\n    };\r\n\r\n    $scope.toggleIndexer = function (indexer) {\r\n        $scope.availableIndexers[indexer.name].activated = !$scope.availableIndexers[indexer.name].activated;\r\n    };\r\n\r\n    function isIndexerPreselected(indexer) {\r\n        if (angular.isUndefined($scope.indexers)) {\r\n            return indexer.preselect;\r\n        } else {\r\n            return _.contains($scope.indexers, indexer.name);\r\n        }\r\n    }\r\n\r\n    function getAvailableIndexers() {\r\n        var alreadySelected = $scope.selectedIndexers;\r\n        var previouslyAvailable = _.pluck($scope.availableIndexers, \"name\");\r\n        $scope.selectedIndexers = [];\r\n        var availableIndexersList = _.chain(safeConfig.indexers).filter(function (indexer) {\r\n            return indexer.enabled && indexer.showOnSearch && (angular.isUndefined(indexer.categories) || indexer.categories.length === 0 || $scope.category.name.toLowerCase() === \"all\" || indexer.categories.indexOf($scope.category.name) > -1);\r\n        }).sortBy(function (indexer) {\r\n            return indexer.name.toLowerCase();\r\n        })\r\n            .map(function (indexer) {\r\n                return {name: indexer.name, activated: isIndexerPreselected(indexer), preselect: indexer.preselect, categories: indexer.categories, searchModuleType: indexer.searchModuleType};\r\n            }).value();\r\n        _.forEach(availableIndexersList, function (x) {\r\n            var deselectedBefore = (_.indexOf(previouslyAvailable, x.name) > -1 && _.indexOf(alreadySelected, x.name) === -1);\r\n            var selectedBefore = (_.indexOf(previouslyAvailable, x.name) > -1 && _.indexOf(alreadySelected, x.name) > -1);\r\n            if ((x.activated && !deselectedBefore) || selectedBefore) {\r\n                $scope.selectedIndexers.push(x.name);\r\n            }\r\n        });\r\n        return availableIndexersList;\r\n    }\r\n\r\n\r\n    $scope.formatRequest = function (request) {\r\n        return $sce.trustAsHtml(SearchHistoryService.formatRequest(request, false, true, true, true));\r\n    };\r\n\r\n    $scope.availableIndexers = getAvailableIndexers();\r\n\r\n    function getAndSetSearchRequests() {\r\n        SearchHistoryService.getSearchHistoryForSearching().success(function (data) {\r\n            $scope.searchHistory = data;\r\n        });\r\n    }\r\n\r\n    if ($scope.mode) {\r\n        $scope.startSearch();\r\n    } else {\r\n        //Getting the search history only makes sense when we're not currently searching\r\n        _.defer(getAndSetSearchRequests);\r\n    }\r\n\r\n    $scope.$on(\"searchResultsShown\", function () {\r\n        _.defer(getAndSetSearchRequests); //Defer because otherwise the results are only shown when this returns which may take a while with big databases\r\n    });\r\n\r\n}\r\nSearchController.$inject = [\"$scope\", \"$http\", \"$stateParams\", \"$state\", \"$uibModal\", \"$timeout\", \"$sce\", \"growl\", \"SearchService\", \"focus\", \"ConfigService\", \"HydraAuthService\", \"CategoriesService\", \"$element\", \"SearchHistoryService\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('SearchUpdateModalInstanceCtrl', SearchUpdateModalInstanceCtrl);\r\n\r\nfunction SearchUpdateModalInstanceCtrl($scope, $interval, SearchService, $uibModalInstance, searchRequestId, onCancel) {\r\n\r\n    var updateSearchMessagesInterval = undefined;\r\n    $scope.messages = undefined;\r\n    $scope.indexerSelectionFinished = false;\r\n    $scope.indexersSelected = 0;\r\n    $scope.indexersFinished = 0;\r\n\r\n    updateSearchMessagesInterval = $interval(function () {\r\n        SearchService.getSearchState(searchRequestId).then(function (data) {\r\n                $scope.messages = data.data.messages;\r\n                $scope.indexerSelectionFinished = data.data.indexerSelectionFinished;\r\n                $scope.indexersSelected = data.data.indexersSelected;\r\n                $scope.indexersFinished = data.data.indexersFinished;\r\n                $scope.progressMax = data.data.indexersSelected;\r\n                if ($scope.progressMax > data.data.indexersSelected) {\r\n                    $scope.progressMax = \">=\" + data.data.indexersSelected;\r\n                }\r\n            },\r\n            function () {\r\n                $interval.cancel(updateSearchMessagesInterval);\r\n            }\r\n        );\r\n    }, 500);\r\n\r\n    $scope.cancelSearch = function () {\r\n        if (angular.isDefined(updateSearchMessagesInterval)) {\r\n            $interval.cancel(updateSearchMessagesInterval);\r\n        }\r\n        onCancel();\r\n        $uibModalInstance.dismiss();\r\n    };\r\n\r\n\r\n    $scope.$on('$destroy', function () {\r\n        if (angular.isDefined(updateSearchMessagesInterval)) {\r\n            $interval.cancel(updateSearchMessagesInterval);\r\n        }\r\n    });\r\n}\r\nSearchUpdateModalInstanceCtrl.$inject = [\"$scope\", \"$interval\", \"SearchService\", \"$uibModalInstance\", \"searchRequestId\", \"onCancel\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('RestartService', RestartService);\r\n\r\nfunction RestartService(growl, NzbHydraControlService, $uibModal) {\r\n\r\n    return {\r\n        restart: restart,\r\n        startCountdown: startCountdown\r\n    };\r\n\r\n\r\n    function restart(message) {\r\n        NzbHydraControlService.restart().then(function (data) {\r\n            startCountdown(message, data.data.message);\r\n        }, function () {\r\n            growl.info(\"Unable to send restart command.\");\r\n        })\r\n    }\r\n\r\n    function startCountdown(message, baseUrl) {\r\n        $uibModal.open({\r\n            templateUrl: 'static/html/restart-modal.html',\r\n            controller: RestartModalInstanceCtrl,\r\n            size: \"md\",\r\n            backdrop: 'static',\r\n            keyboard: false,\r\n            resolve: {\r\n                message: function () {\r\n                    return message;\r\n                },\r\n                baseUrl: function () {\r\n                    return baseUrl;\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\nRestartService.$inject = [\"growl\", \"NzbHydraControlService\", \"$uibModal\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('RestartModalInstanceCtrl', RestartModalInstanceCtrl);\r\n\r\nfunction RestartModalInstanceCtrl($scope, $timeout, $http, $window, message, baseUrl) {\r\n\r\n    message = (angular.isDefined(message) ? message : \"\");\r\n    $scope.message = message + \"Will reload page when NZBHydra is back\";\r\n    $scope.baseUrl = baseUrl;\r\n    $scope.pingUrl = angular.isDefined(baseUrl) ? (baseUrl + \"/internalapi/control/ping\") : \"internalapi/control/ping\";\r\n\r\n    $scope.internalCaR = function (message, timer) {\r\n        if (timer === 45) {\r\n            $scope.message = message + \" Restarting takes longer than expected. You might want to check the log to see what's going on.\";\r\n        } else {\r\n            $scope.message = message + \" Will reload page when NZBHydra is back.\";\r\n            $timeout(function () {\r\n                $http.get($scope.pingUrl, {ignoreLoadingBar: true}).then(function () {\r\n                    $timeout(function () {\r\n                        $scope.message = \"Reloading page...\";\r\n                        $window.location.href = $scope.baseUrl;\r\n                    }, 500);\r\n                }, function () {\r\n                    $scope.internalCaR(message, timer + 1);\r\n                });\r\n            }, 1000);\r\n            $scope.message = message + \" Will reload page when NZBHydra is back.\";\r\n        }\r\n    };\r\n\r\n    //Wait three seconds because otherwise the currently running instance will be found\r\n    $timeout(function () {\r\n        $scope.internalCaR(message, 0);\r\n    }, 3000)\r\n\r\n}\r\nRestartModalInstanceCtrl.$inject = [\"$scope\", \"$timeout\", \"$http\", \"$window\", \"message\", \"baseUrl\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('NzbHydraControlService', NzbHydraControlService);\r\n\r\nfunction NzbHydraControlService($http) {\r\n\r\n    return {\r\n        restart: restart,\r\n        shutdown: shutdown\r\n    };\r\n\r\n    function restart() {\r\n        return $http.get(\"internalapi/control/restart\");\r\n    }\r\n\r\n    function shutdown() {\r\n        return $http.get(\"internalapi/control/shutdown\");\r\n    }\r\n\r\n}\r\nNzbHydraControlService.$inject = [\"$http\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('NzbDownloadService', NzbDownloadService);\r\n\r\nfunction NzbDownloadService($http, ConfigService, DownloaderCategoriesService) {\r\n\r\n    var service = {\r\n        download: download,\r\n        getEnabledDownloaders: getEnabledDownloaders\r\n    };\r\n\r\n    return service;\r\n\r\n    function sendNzbAddCommand(downloader, searchresultids, category) {\r\n        var params = {downloaderName: downloader.name, searchResultIds: searchresultids};\r\n        if (category !== \"No category\") {\r\n            params[\"category\"] = category;\r\n        }\r\n        return $http.put(\"internalapi/downloader/addNzbs\", params);\r\n    }\r\n\r\n    function download(downloader, searchresultids) {\r\n\r\n        var category = downloader.defaultCategory;\r\n\r\n        if ((_.isUndefined(category) || category === \"\" || category === null) && category !== \"No category\") {\r\n            return DownloaderCategoriesService.openCategorySelection(downloader).then(function (category) {\r\n                return sendNzbAddCommand(downloader, searchresultids, category);\r\n            }, function (result) {\r\n                return result;\r\n            });\r\n        } else {\r\n            return sendNzbAddCommand(downloader, searchresultids, category)\r\n        }\r\n    }\r\n\r\n    function getEnabledDownloaders() {\r\n        return _.filter(ConfigService.getSafe().downloading.downloaders, \"enabled\");\r\n    }\r\n}\r\nNzbDownloadService.$inject = [\"$http\", \"ConfigService\", \"DownloaderCategoriesService\"];\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ModalService', ModalService);\r\n\r\nfunction ModalService($uibModal) {\r\n\r\n    return {\r\n        open: open\r\n    };\r\n\r\n    function open(headline, message, params, size, textAlign) {\r\n        //params example:\r\n        /*\r\n         var p =\r\n         {\r\n         yes: {\r\n         text: \"Yes\",    //default: Ok\r\n         onYes: function() {}\r\n         },\r\n         no: {               //default: Empty\r\n         text: \"No\",\r\n         onNo: function () {\r\n         }\r\n         },\r\n         cancel: {\r\n         text: \"Cancel\", //default: Cancel\r\n         onCancel: function () {\r\n         }\r\n         }\r\n         };\r\n         */\r\n        if (angular.isUndefined(textAlign)) {\r\n            textAlign = \"center\";\r\n        }\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'static/html/modal.html',\r\n            controller: 'ModalInstanceCtrl',\r\n            size: angular.isDefined(size) ? size : \"md\",\r\n            resolve: {\r\n                headline: function () {\r\n                    return headline;\r\n                },\r\n                message: function () {\r\n                    return message;\r\n                },\r\n                params: function () {\r\n                    return params;\r\n                },\r\n                textAlign: function () {\r\n                    return textAlign;\r\n                }\r\n            }\r\n        });\r\n\r\n        modalInstance.result.then(function () {\r\n\r\n        }, function () {\r\n\r\n        });\r\n    }\r\n\r\n}\r\nModalService.$inject = [\"$uibModal\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('ModalInstanceCtrl', ModalInstanceCtrl);\r\n\r\nfunction ModalInstanceCtrl($scope, $uibModalInstance, headline, message, params, textAlign) {\r\n\r\n    $scope.message = message;\r\n    $scope.headline = headline;\r\n    $scope.params = params;\r\n    $scope.showCancel = angular.isDefined(params) && angular.isDefined(params.cancel);\r\n    $scope.showNo = angular.isDefined(params) && angular.isDefined(params.no);\r\n    $scope.textAlign = textAlign;\r\n\r\n    if (angular.isUndefined(params) || angular.isUndefined(params.yes)) {\r\n        $scope.params = {\r\n            yes: {\r\n                text: \"Ok\"\r\n            }\r\n        }\r\n    } else if (angular.isUndefined(params.yes.text)) {\r\n        params.yes.text = \"Yes\";\r\n    }\r\n\r\n    if (angular.isDefined(params) && angular.isDefined(params.no) && angular.isUndefined($scope.params.no.text)) {\r\n        $scope.params.no.text = \"No\";\r\n    }\r\n\r\n    if (angular.isDefined(params) && angular.isDefined(params.cancel) && angular.isUndefined($scope.params.cancel.text)) {\r\n        $scope.params.cancel.text = \"Cancel\";\r\n    }\r\n\r\n    $scope.yes = function () {\r\n        $uibModalInstance.close();\r\n        if (angular.isDefined(params) && angular.isDefined(params.yes) && angular.isDefined($scope.params.yes.onYes)) {\r\n            $scope.params.yes.onYes();\r\n        }\r\n    };\r\n\r\n    $scope.no = function () {\r\n        $uibModalInstance.close();\r\n        if (angular.isDefined(params) && angular.isDefined(params.no) && angular.isDefined($scope.params.no.onNo)) {\r\n            $scope.params.no.onNo($uibModalInstance);\r\n        }\r\n    };\r\n\r\n    $scope.cancel = function () {\r\n        $uibModalInstance.dismiss();\r\n        if (angular.isDefined(params.cancel) && angular.isDefined($scope.params.cancel.onCancel)) {\r\n            $scope.params.cancel.onCancel();\r\n        }\r\n    };\r\n\r\n    $scope.$on(\"modal.closing\", function (targetScope, reason, c) {\r\n        if (reason == \"backdrop click\") {\r\n            $scope.cancel();\r\n        }\r\n    });\r\n}\r\nModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"headline\", \"message\", \"params\", \"textAlign\"];\r\n","angular\n    .module('nzbhydraApp')\n    .service('GeneralModalService', GeneralModalService);\n\nfunction GeneralModalService() {\n\n\n    this.open = function (msg, template, templateUrl, size, data) {\n\n        //Prevent circular dependency\n        var myInjector = angular.injector([\"ng\", \"ui.bootstrap\"]);\n        var $uibModal = myInjector.get(\"$uibModal\");\n        var params = {};\n\n        if (angular.isUndefined(size)) {\n            params[\"size\"] = size;\n        }\n        if (angular.isUndefined(template)) {\n            if (angular.isUndefined(templateUrl)) {\n                params[\"template\"] = '<pre style=\"margin:0\">' + msg + '</pre>';\n            } else {\n                params[\"templateUrl\"] = templateUrl;\n            }\n        } else {\n            params[\"template\"] = template;\n        }\n        params[\"resolve\"] =\n            {\n                data: function () {\n                    return data;\n                }\n            };\n\n        var modalInstance = $uibModal.open(params);\n\n        modalInstance.result.then();\n\n    };\n\n\n}","angular\r\n    .module('nzbhydraApp')\r\n    .factory('MigrationService', MigrationService);\r\n\r\nfunction MigrationService($uibModal) {\r\n\r\n    return {\r\n        migrate: migrate\r\n    };\r\n\r\n    function migrate() {\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'static/html/migration-modal.html',\r\n            controller: 'MigrationModalInstanceCtrl',\r\n            size: \"md\",\r\n            backdrop: 'static',\r\n            keyboard: false\r\n        });\r\n\r\n        modalInstance.result.then(function () {\r\n            ConfigService.reloadConfig();\r\n        }, function () {\r\n\r\n        });\r\n    }\r\n}\r\nMigrationService.$inject = [\"$uibModal\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('MigrationModalInstanceCtrl', MigrationModalInstanceCtrl);\r\n\r\nfunction MigrationModalInstanceCtrl($scope, $uibModalInstance, $interval, $http, blockUI, ModalService) {\r\n\r\n    $scope.baseUrl = \"http://127.0.0.1:5075\";\r\n\r\n    $scope.foo = {isMigrating: false, baseUrl: $scope.baseUrl};\r\n\r\n    $scope.yes = function () {\r\n        var params;\r\n        var url;\r\n        if ($scope.foo.baseUrl && $scope.foo.isFileBasedOpen) {\r\n            $scope.foo.baseUrl = null;\r\n        }\r\n        //blockUI.start(\"Starting migration. This may take a while...\");\r\n        if ($scope.foo.isUrlBasedOpen) {\r\n            url = \"internalapi/migration/url\";\r\n            params = {baseurl: $scope.foo.baseUrl};\r\n        } else {\r\n            url = \"internalapi/migration/files\";\r\n            params = {settingsCfgFile: $scope.foo.settingsCfgFile, dbFile: $scope.foo.nzbhydraDbFile};\r\n        }\r\n\r\n        $scope.foo.isMigrating = true;\r\n\r\n        var updateMigrationMessagesInterval = $interval(function () {\r\n            $http.get(\"internalapi/migration/messages\").then(function (data) {\r\n                    $scope.foo.messages = data.data;\r\n                },\r\n                function () {\r\n                    $interval.cancel(updateMigrationMessagesInterval);\r\n                    $scope.foo.isMigrating = false;\r\n                }\r\n            );\r\n        }, 500);\r\n\r\n        $http.get(url, {params: params}).then(function (response) {\r\n                var message;\r\n                blockUI.stop();\r\n                var data = response.data;\r\n                if (!data.requirementsMet) {\r\n                    $interval.cancel(updateMigrationMessagesInterval);\r\n                    $scope.foo.isMigrating = false;\r\n                    ModalService.open(\"Requirements not met\", \"An error occurred while preparing the migration:<br>\" + data.error, {\r\n                        yes: {\r\n                            text: \"OK\"\r\n                        }\r\n                    });\r\n                } else if (!data.configMigrated) {\r\n                    $interval.cancel(updateMigrationMessagesInterval);\r\n                    $uibModalInstance.dismiss();\r\n                    $scope.foo.isMigrating = false;\r\n                    ModalService.open(\"Config migration failed\", \"An error occurred while migrating the config. Migration failed:<br>\" + data.error, {\r\n                        yes: {\r\n                            text: \"OK\"\r\n                        }\r\n                    });\r\n                } else if (!data.databaseMigrated) {\r\n                    $interval.cancel(updateMigrationMessagesInterval);\r\n                    $uibModalInstance.dismiss();\r\n                    $scope.foo.isMigrating = false;\r\n                    message = \"An error occurred while migrating the database.<br>\" + data.error + \"<br>. The config was migrated successfully though.\";\r\n                    if (data.messages.length > 0) {\r\n                        message += '<br><br><span class=\"warning\">The following warnings resulted from the config migration:<ul style=\"list-style: none\">';\r\n                        _.forEach(data.messages, function (msg) {\r\n                            message += \"<li>\" + msg + \"</li>\";\r\n                        });\r\n                        message += \"</ul></span>\";\r\n                    }\r\n                    ModalService.open(\"Database migration failed\", message, {\r\n                        yes: {\r\n                            text: \"OK\"\r\n                        }\r\n                    });\r\n                } else {\r\n                    $interval.cancel(updateMigrationMessagesInterval);\r\n                    $uibModalInstance.dismiss();\r\n                    $scope.foo.isMigrating = false;\r\n                    message = \"The migration was completed successfully.\";\r\n                    if (data.warningMessages.length > 0) {\r\n                        message += '<br><br><span class=\"warning\">The following warnings resulted from the config migration:<ul style=\"list-style: none\">';\r\n                        _.forEach(data.warningMessages, function (msg) {\r\n                            message += \"<li>\" + msg + \"</li>\";\r\n                        });\r\n                        message += \"</ul></span>\";\r\n                    }\r\n                    message += \"<br><br>NZBHydra needs to restart for the changes to be effective.\";\r\n                    ModalService.open(\"Migration successful\", message, {\r\n                        yes: {\r\n                            onYes: function () {\r\n                                RestartService.startCountdown();\r\n                            },\r\n                            text: \"Restart\"\r\n                        },\r\n                        cancel: {\r\n                            onCancel: function () {\r\n\r\n                            },\r\n                            text: \"Not now\"\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        );\r\n\r\n        $scope.$on('$destroy', function () {\r\n            if (angular.isDefined(updateMigrationMessagesInterval)) {\r\n                $interval.cancel(updateMigrationMessagesInterval);\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n    $scope.cancel = function () {\r\n        $uibModalInstance.dismiss();\r\n    };\r\n\r\n}\r\nMigrationModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"$interval\", \"$http\", \"blockUI\", \"ModalService\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .controller('LoginController', LoginController);\r\n\r\nfunction LoginController($scope, RequestsErrorHandler, $state, HydraAuthService, growl) {\r\n    $scope.user = {};\r\n    $scope.login = function () {\r\n        RequestsErrorHandler.specificallyHandled(function () {\r\n            HydraAuthService.login($scope.user.username, $scope.user.password).then(function () {\r\n                HydraAuthService.setLoggedInByForm();\r\n                growl.info(\"Login successful!\");\r\n                $state.go(\"root.search\");\r\n            }, function () {\r\n                growl.error(\"Login failed!\")\r\n            });\r\n        });\r\n    }\r\n}\r\nLoginController.$inject = [\"$scope\", \"RequestsErrorHandler\", \"$state\", \"HydraAuthService\", \"growl\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .controller('IndexerStatusesController', IndexerStatusesController);\r\n\r\nfunction IndexerStatusesController($scope, $http, statuses) {\r\n    $scope.statuses = statuses.data;\r\n\r\n    $scope.isInPast = function (epochSeconds) {\r\n        return epochSeconds < moment().unix();\r\n    };\r\n\r\n    $scope.enable = function (indexerName) {\r\n        $http.post(\"internalapi/indexerstatuses/enable/\" + encodeURI(indexerName)).then(function (response) {\r\n            $scope.statuses = response.data;\r\n        });\r\n    }\r\n}\r\nIndexerStatusesController.$inject = [\"$scope\", \"$http\", \"statuses\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .filter('formatDate', formatDate);\r\n\r\nfunction formatDate(dateFilter) {\r\n    return function (timestamp, hidePast) {\r\n        if (timestamp) {\r\n            if (timestamp * 1000 < (new Date).getTime() && hidePast) {\r\n                return \"\"; //\r\n            }\r\n\r\n            var t = timestamp * 1000;\r\n            t = dateFilter(t, 'yyyy-MM-dd HH:mm');\r\n            return t;\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n}\r\nformatDate.$inject = [\"dateFilter\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .filter('reformatDate', reformatDate);\r\n\r\nfunction reformatDate() {\r\n    return function (date) {\r\n        //Date in database is saved as UTC without timezone information\r\n        return moment.unix(date).local().format(\"YYYY-MM-DD HH:mm\");\r\n\r\n    }\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .controller('IndexController', IndexController);\r\n\r\nfunction IndexController($scope, $http, $stateParams, $state) {\r\n\r\n    $state.go(\"root.search\");\r\n}\r\nIndexController.$inject = [\"$scope\", \"$http\", \"$stateParams\", \"$state\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('HydraAuthService', HydraAuthService);\r\n\r\nfunction HydraAuthService($q, $rootScope, $http, bootstrapped, $httpParamSerializerJQLike, $state) {\r\n\r\n    var loggedIn = bootstrapped.username;\r\n\r\n\r\n    return {\r\n        isLoggedIn: isLoggedIn,\r\n        login: login,\r\n        askForPassword: askForPassword,\r\n        logout: logout,\r\n        setLoggedInByForm: setLoggedInByForm,\r\n        getUserRights: getUserRights,\r\n        setLoggedInByBasic: setLoggedInByBasic,\r\n        getUserName: getUserName,\r\n        getUserInfos: getUserInfos\r\n    };\r\n\r\n    function getUserInfos() {\r\n        return bootstrapped;\r\n    }\r\n\r\n    function isLoggedIn() {\r\n        return bootstrapped.username;\r\n    }\r\n\r\n    function setLoggedInByForm() {\r\n        $rootScope.$broadcast(\"user:loggedIn\");\r\n    }\r\n\r\n\r\n    function setLoggedInByBasic(_maySeeStats, _maySeeAdmin, _username) {\r\n    }\r\n\r\n    function login(username, password) {\r\n        var deferred = $q.defer();\r\n        //return $http.post(\"login\", data = {username: username, password: password})\r\n        return $http({\r\n            url: \"login\",\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded' // Note the appropriate header\r\n            },\r\n            data: $httpParamSerializerJQLike({username: username, password: password})\r\n        })\r\n            .then(function () {\r\n                $http.get(\"internalapi/userinfos\").then(function (data) {\r\n                    bootstrapped = data.data;\r\n                    loggedIn = true;\r\n                    $rootScope.$broadcast(\"user:loggedIn\");\r\n                    deferred.resolve();\r\n                });\r\n            });\r\n    }\r\n\r\n    function askForPassword(params) {\r\n        return $http.get(\"internalapi/askpassword\", {params: params}).then(function (data) {\r\n            bootstrapped = data.data;\r\n            return bootstrapped;\r\n        });\r\n    }\r\n\r\n    function logout() {\r\n        var deferred = $q.defer();\r\n        return $http.post(\"logout\").then(function () {\r\n            $http.get(\"internalapi/userinfos\").then(function (data) {\r\n                bootstrapped = data.data;\r\n                $rootScope.$broadcast(\"user:loggedOut\");\r\n                loggedIn = false;\r\n                if (bootstrapped.maySeeSearch) {\r\n                    $state.go(\"root.search\");\r\n                } else {\r\n                    $state.go(\"root.login\");\r\n                }\r\n                //window.location.reload(false);\r\n                deferred.resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    function getUserRights() {\r\n        var userInfos = getUserInfos();\r\n        return {maySeeStats: userInfos.maySeeStats, maySeeAdmin: userInfos.maySeeAdmin, maySeeSearch: userInfos.maySeeSearch};\r\n    }\r\n\r\n    function getUserName() {\r\n        return bootstrapped.username;\r\n    }\r\n\r\n\r\n}\r\nHydraAuthService.$inject = [\"$q\", \"$rootScope\", \"$http\", \"bootstrapped\", \"$httpParamSerializerJQLike\", \"$state\"];","angular\r\n    .module('nzbhydraApp')\r\n    .controller('HeaderController', HeaderController);\r\n\r\nfunction HeaderController($scope, $state, growl, HydraAuthService, $state) {\r\n\r\n\r\n    $scope.showLoginout = false;\r\n    $scope.oldUserName = null;\r\n\r\n    function update(event) {\r\n\r\n        $scope.userInfos = HydraAuthService.getUserInfos();\r\n        if (!$scope.userInfos.authConfigured) {\r\n            $scope.showSearch = true;\r\n            $scope.showAdmin = true;\r\n            $scope.showStats = true;\r\n            $scope.showLoginout = false;\r\n        } else {\r\n            if ($scope.userInfos.username) {\r\n                $scope.showSearch = true;\r\n                $scope.showAdmin = $scope.userInfos.maySeeAdmin || !$scope.userInfos.adminRestricted;\r\n                $scope.showStats = $scope.userInfos.maySeeStats || !$scope.userInfos.statsRestricted;\r\n                $scope.showLoginout = true;\r\n                $scope.username = $scope.userInfos.username;\r\n                $scope.loginlogoutText = \"Logout \" + $scope.username;\r\n                $scope.oldUserName = $scope.username;\r\n            } else {\r\n                $scope.showAdmin = !$scope.userInfos.adminRestricted;\r\n                $scope.showStats = !$scope.userInfos.statsRestricted;\r\n                $scope.showSearch = !$scope.userInfos.searchRestricted;\r\n                $scope.loginlogoutText = \"Login\";\r\n                $scope.showLoginout = ($scope.userInfos.adminRestricted || $scope.userInfos.statsRestricted || $scope.userInfos.searchRestricted) && event !== \"loggedOut\" && !$state.is(\"root.login\");\r\n                $scope.username = \"\";\r\n            }\r\n        }\r\n    }\r\n\r\n    update();\r\n\r\n\r\n    $scope.$on(\"user:loggedIn\", function (event, data) {\r\n        update(\"loggedIn\");\r\n    });\r\n\r\n    $scope.$on(\"user:loggedOut\", function (event, data) {\r\n        update(\"loggedOut\");\r\n    });\r\n\r\n    $scope.loginout = function () {\r\n        if (HydraAuthService.isLoggedIn()) {\r\n            HydraAuthService.logout().then(function () {\r\n                if ($scope.userInfos.authType === \"BASIC\") {\r\n                    growl.info(\"Logged out. Close your browser to make sure session is closed.\");\r\n                }\r\n                else if ($scope.userInfos.authType === \"FORM\") {\r\n                    growl.info(\"Logged out\");\r\n                }\r\n                update();\r\n                //$state.go(\"root.search\", null, {reload: true});\r\n            });\r\n\r\n        } else {\r\n            if ($scope.userInfos.authType === \"BASIC\") {\r\n                var params = {};\r\n                if ($scope.oldUserName) {\r\n                    params = {\r\n                        old_username: $scope.oldUserName\r\n                    }\r\n                }\r\n                HydraAuthService.askForPassword(params).then(function () {\r\n                    growl.info(\"Login successful!\");\r\n                    $scope.oldUserName = null;\r\n                    update(\"loggedIn\");\r\n                    $state.go(\"root.search\");\r\n                })\r\n            } else if ($scope.userInfos.authType === \"FORM\") {\r\n                $state.go(\"root.login\");\r\n            } else {\r\n                growl.info(\"You shouldn't need to login but here you go!\");\r\n            }\r\n        }\r\n    }\r\n}\r\nHeaderController.$inject = [\"$scope\", \"$state\", \"growl\", \"HydraAuthService\", \"$state\"];\r\n","var HEADER_NAME = 'NzbHydra2-Handle-Errors-Generically';\nvar specificallyHandleInProgress = false;\n\nnzbhydraapp.factory('RequestsErrorHandler', [\"$q\", \"growl\", \"blockUI\", \"GeneralModalService\", function ($q, growl, blockUI, GeneralModalService) {\n    return {\n        // --- The user's API for claiming responsiblity for requests ---\n        specificallyHandled: function (specificallyHandledBlock) {\n            specificallyHandleInProgress = true;\n            try {\n                return specificallyHandledBlock();\n            } finally {\n                specificallyHandleInProgress = false;\n            }\n        },\n\n        // --- Response interceptor for handling errors generically ---\n        responseError: function (rejection) {\n            blockUI.reset();\n            var shouldHandle = (rejection && rejection.config && rejection.status !== 403 && rejection.config.headers && rejection.config.headers[HEADER_NAME] && !rejection.config.url.contains(\"logerror\") && !rejection.config.url.contains(\"/ping\") && !rejection.config.alreadyHandled);\n            if (shouldHandle) {\n                if (rejection.data) {\n\n                    var message = \"An error occurred:<br>\" + rejection.data.status + \": \" + rejection.data.error;\n                    if (rejection.data.path) {\n                        message += \"<br><br>Path: \" + rejection.data.path;\n                    }\n                    if (message !== \"No message available\") {\n                        message += \"<br><br>Message: \" + rejection.data.message;\n                    } else {\n                        message += \"<br><br>Exception: \" + rejection.data.exception;\n                    }\n                } else {\n                    message = \"An unknown error occurred while communicating with NZBHydra:<br><br>\" + JSON.stringify(rejection);\n                }\n                GeneralModalService.open(message);\n\n            } else if (rejection && rejection.config && rejection.config.headers && rejection.config.headers[HEADER_NAME] && rejection.config.url.contains(\"logerror\")) {\n                console.log(\"Not handling connection error while sending exception to server\");\n            }\n\n            return $q.reject(rejection);\n        }\n    };\n}]);\n\nnzbhydraapp.config(['$provide', '$httpProvider', function ($provide, $httpProvider) {\n    $httpProvider.interceptors.push('RequestsErrorHandler');\n\n    // --- Decorate $http to add a special header by default ---\n\n    function addHeaderToConfig(config) {\n        config = config || {};\n        config.headers = config.headers || {};\n\n        // Add the header unless user asked to handle errors himself\n        if (!specificallyHandleInProgress) {\n            config.headers[HEADER_NAME] = true;\n        }\n\n        return config;\n    }\n\n    // The rest here is mostly boilerplate needed to decorate $http safely\n    $provide.decorator('$http', ['$delegate', function ($delegate) {\n        function decorateRegularCall(method) {\n            return function (url, config) {\n                return $delegate[method](url, addHeaderToConfig(config));\n            };\n        }\n\n        function decorateDataCall(method) {\n            return function (url, data, config) {\n                return $delegate[method](url, data, addHeaderToConfig(config));\n            };\n        }\n\n        function copyNotOverriddenAttributes(newHttp) {\n            for (var attr in $delegate) {\n                if (!newHttp.hasOwnProperty(attr)) {\n                    if (typeof($delegate[attr]) === 'function') {\n                        newHttp[attr] = function () {\n                            return $delegate.apply($delegate, arguments);\n                        };\n                    } else {\n                        newHttp[attr] = $delegate[attr];\n                    }\n                }\n            }\n        }\n\n        var newHttp = function (config) {\n            return $delegate(addHeaderToConfig(config));\n        };\n\n        newHttp.get = decorateRegularCall('get');\n        newHttp.delete = decorateRegularCall('delete');\n        newHttp.head = decorateRegularCall('head');\n        newHttp.jsonp = decorateRegularCall('jsonp');\n        newHttp.post = decorateDataCall('post');\n        newHttp.put = decorateDataCall('put');\n\n        copyNotOverriddenAttributes(newHttp);\n\n        return newHttp;\n    }]);\n}]);","hashCode = function (s) {\r\n    return s.split(\"\").reduce(function (a, b) {\r\n        a = ((a << 5) - a) + b.charCodeAt(0);\r\n        return a & a\r\n    }, 0);\r\n};\r\n\r\nangular\r\n    .module('nzbhydraApp').run([\"formlyConfig\", \"formlyValidationMessages\", function (formlyConfig, formlyValidationMessages) {\r\n    formlyValidationMessages.addStringMessage('required', 'This field is required');\r\n    formlyConfig.extras.errorExistsAndShouldBeVisibleExpression = 'fc.$touched || form.$submitted';\r\n\r\n}]);\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .config([\"formlyConfigProvider\", function config(formlyConfigProvider) {\r\n        formlyConfigProvider.extras.removeChromeAutoComplete = true;\r\n        formlyConfigProvider.extras.explicitAsync = true;\r\n        formlyConfigProvider.disableWarnings = window.onProd;\r\n\r\n\r\n        formlyConfigProvider.setWrapper({\r\n            name: 'settingWrapper',\r\n            templateUrl: 'setting-wrapper.html'\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setWrapper({\r\n            name: 'fieldset',\r\n            template: [\r\n                '<fieldset>',\r\n                '<legend>{{options.templateOptions.label}}</legend>',\r\n                '<formly-transclude></formly-transclude>',\r\n                '</fieldset>'\r\n            ].join(' ')\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'help',\r\n            template: [\r\n                //'<div class=\"panel panel-default\" style=\"margin-top: ' + options.templateOptions.marginTop + 'margin-bottom:' + options.templateOptions.marginBottom + ';\">',\r\n                '<div class=\"panel panel-default\" style=\"margin-top: {{options.templateOptions.marginTop}}; margin-bottom: {{options.templateOptions.marginBottom}} ;\">',\r\n                '<div class=\"panel-body {{options.templateOptions.class}}\">',\r\n                '<div ng-repeat=\"line in options.templateOptions.lines\"><h5>{{ line }}</h5></div>',\r\n                '</div>',\r\n                '</div>'\r\n            ].join(' ')\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setWrapper({\r\n            name: 'logicalGroup',\r\n            template: [\r\n                '<formly-transclude></formly-transclude>'\r\n            ].join(' ')\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalInput',\r\n            extends: 'input',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'timeOfDay',\r\n            extends: 'horizontalInput',\r\n            controller: ['$scope', function ($scope) {\r\n                $scope.model[$scope.options.key] = moment.utc($scope.model[$scope.options.key]).toDate();\r\n            }]\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'passwordSwitch',\r\n            extends: 'horizontalInput',\r\n            template: [\r\n                '<div class=\"input-group\">',\r\n                '<input ng-attr-type=\"{{ hidePassword ? \\'password\\' : \\'text\\' }}\" class=\"form-control\" ng-model=\"model[options.key]\"/>',\r\n                '<span class=\"input-group-btn input-group-btn2\">',\r\n                '<button class=\"btn btn-default\" type=\"button\" ng-click=\"hidePassword=!hidePassword\"><span class=\"glyphicon glyphicon-eye-open\" ng-class=\"{\\'glyphicon-eye-open\\': hidePassword, \\'glyphicon-eye-close\\': !hidePassword}\"></span></button>',\r\n                '</div>'\r\n            ].join(' '),\r\n            controller: function ($scope) {\r\n                $scope.hidePassword = true;\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalChips',\r\n            extends: 'horizontalInput',\r\n            template: '<chips ng-model=\"model[options.key]\" class=\"chips form-control\">' +\r\n            '            <chip-tmpl class=\"chip-tmp\">' +\r\n            '                <div class=\"default-chip\">' +\r\n            '                    {{chip}}' +\r\n            '                    <span class=\"glyphicon glyphicon-remove remove-chip\" remove-chip></span>' +\r\n            '                </div>' +\r\n            '            </chip-tmpl>' +\r\n            '            <input chip-control class=\"chip-control\"></input>' +\r\n            '        </chips>'\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'percentInput',\r\n            template: [\r\n                '<input type=\"number\" class=\"form-control\" placeholder=\"Percent\" ng-model=\"model[options.key]\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" required />'\r\n            ].join(' ')\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'apiKeyInput',\r\n            template: [\r\n                '<div class=\"input-group\">',\r\n                '<input type=\"text\" class=\"form-control\" ng-model=\"model[options.key]\"/>',\r\n                '<span class=\"input-group-btn input-group-btn2\">',\r\n                '<button class=\"btn btn-default\" type=\"button\" ng-click=\"generate()\"><span class=\"glyphicon glyphicon-refresh\"></span></button>',\r\n                '</div>'\r\n            ].join(' '),\r\n            controller: function ($scope) {\r\n                $scope.generate = function () {\r\n                    var result = \"\";\r\n                    var length = 24;\r\n                    var chars = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n                    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\r\n                    $scope.model[$scope.options.key] = result;\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'fileInput',\r\n            extends: 'horizontalInput',\r\n            template: [\r\n                '<div class=\"input-group\">',\r\n                '<input type=\"text\" class=\"form-control\" ng-model=\"model[options.key]\"/>',\r\n                '<span class=\"input-group-btn input-group-btn2\">',\r\n                '<button class=\"btn btn-default\" type=\"button\" ng-click=\"open()\">...</button>',\r\n                '</div>'\r\n            ].join(' '),\r\n            controller: function ($scope, FileSelectionService) {\r\n                $scope.open = function () {\r\n                    FileSelectionService.open($scope.model[$scope.options.key], $scope.to.type).then(function (selection) {\r\n                        $scope.model[$scope.options.key] = selection;\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'testConnection',\r\n            templateUrl: 'button-test-connection.html'\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalTestConnection',\r\n            extends: 'testConnection',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            //BUtton\r\n            name: 'checkCaps',\r\n            templateUrl: 'button-check-caps.html',\r\n            controller: function ($scope, ConfigBoxService, ModalService, growl) {\r\n                $scope.message = \"\";\r\n                $scope.uniqueId = hashCode($scope.model.name) + hashCode($scope.model.host);\r\n\r\n                var testButton = \"#button-check-caps-\" + $scope.uniqueId;\r\n                var testMessage = \"#message-check-caps-\" + $scope.uniqueId;\r\n\r\n                function showSuccess() {\r\n                    angular.element(testButton).removeClass(\"btn-default\");\r\n                    angular.element(testButton).removeClass(\"btn-danger\");\r\n                    angular.element(testButton).removeClass(\"btn-warning\");\r\n                    angular.element(testButton).addClass(\"btn-success\");\r\n                }\r\n\r\n                function showError() {\r\n                    angular.element(testButton).removeClass(\"btn-default\");\r\n                    angular.element(testButton).removeClass(\"btn-warning\");\r\n                    angular.element(testButton).removeClass(\"btn-success\");\r\n                    angular.element(testButton).addClass(\"btn-danger\");\r\n                }\r\n\r\n                function showWarning() {\r\n                    angular.element(testButton).removeClass(\"btn-default\");\r\n                    angular.element(testButton).removeClass(\"btn-danger\");\r\n                    angular.element(testButton).removeClass(\"btn-success\");\r\n                    angular.element(testButton).addClass(\"btn-warning\");\r\n                }\r\n\r\n\r\n                //When button is clicked\r\n                $scope.checkCaps = function () {\r\n                    angular.element(testButton).addClass(\"glyphicon-refresh-animate\");\r\n                    var url = \"internalapi/indexer/checkCaps\";\r\n                    ConfigBoxService.checkCaps(url, $scope.model).then(function (data) {\r\n                        //Formly doesn't allow replacing the model so we need to set all the relevant values ourselves\r\n                        $scope.model.supportedSearchIds = data.indexerConfig.supportedSearchIds;\r\n                        $scope.model.supportedSearchTypes = data.indexerConfig.supportedSearchTypes;\r\n                        $scope.model.categoryMapping = data.indexerConfig.categoryMapping;\r\n                        $scope.model.configComplete = data.indexerConfig.configComplete;\r\n                        $scope.model.allCapsChecked = data.indexerConfig.allCapsChecked;\r\n                        $scope.model.enabled = data.indexerConfig.enabled;\r\n                        if (data.indexerConfig.supportedSearchIds.length > 0) {\r\n                            var message = \"Supports \" + data.indexerConfig.supportedSearchIds;\r\n                            angular.element(testMessage).text(message);\r\n                        }\r\n                        if (data.indexerConfig.allCapsChecked && data.indexerConfig.configComplete) {\r\n                            showSuccess();\r\n                            growl.info(\"Successfully tested capabilites of indexer\");\r\n                            $scope.form.capsChecked = true;\r\n                        } else if (!data.indexerConfig.allCapsChecked && data.indexerConfig.configComplete) {\r\n                            showWarning();\r\n                            ModalService.open(\"Incomplete caps check\", \"The capabilities of the indexer could not be checked completely. You may use it but it's recommended to repeat the check at another time.<br>Until then some search types or IDs may not be usable.\", {}, \"md\", \"left\");\r\n                            $scope.form.capsChecked = true;\r\n                        } else if (!data.configComplete) {\r\n                            showError();\r\n                            ModalService.open(\"Error testing capabilities\", \"An error occurred while contacting the indexer. It will not be usable until the caps check has been executed. You can trigger it manually from the indexer config box\", {}, \"md\", \"left\");\r\n                        }\r\n                    }, function (message) {\r\n                        angular.element(testMessage).text(message);\r\n                        showError();\r\n                        ModalService.open(\"Error testing capabilities\", \"An error occurred while contacting the indexer. It will not be usable until the caps check has been executed. You can trigger it manually from the indexer config box\", {}, \"md\", \"left\");\r\n                    }).finally(function () {\r\n                        angular.element(testButton).removeClass(\"glyphicon-refresh-animate\");\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalCheckCaps',\r\n            extends: 'checkCaps',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalApiKeyInput',\r\n            extends: 'apiKeyInput',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalPercentInput',\r\n            extends: 'percentInput',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'switch',\r\n            template: '<div style=\"text-align:left\"><input bs-switch type=\"checkbox\" ng-model=\"model[options.key]\"/></div>'\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'duoSetting',\r\n            extends: 'input',\r\n            defaultOptions: {\r\n                className: 'col-md-9',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    noRow: true,\r\n                    label: ''\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalSwitch',\r\n            extends: 'switch',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalSelect',\r\n            extends: 'select',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalMultiselect',\r\n            defaultOptions: {\r\n                templateOptions: {\r\n                    optionsAttr: 'bs-options',\r\n                    ngOptions: 'option[to.valueProp] as option in to.options | filter: $select.search',\r\n                    valueProp: 'id',\r\n                    labelProp: 'label',\r\n                    getPlaceholder: function () {\r\n                        return \"\";\r\n                    }\r\n                }\r\n            },\r\n            templateUrl: 'ui-select-multiple.html',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'label',\r\n            template: '<label class=\"control-label\">{{to.label}}</label>'\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'duolabel',\r\n            extends: 'label',\r\n            defaultOptions: {\r\n                className: 'col-md-2',\r\n                templateOptions: {\r\n                    label: '-'\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'repeatSection',\r\n            templateUrl: 'repeatSection.html',\r\n            controller: function ($scope) {\r\n                $scope.formOptions = {formState: $scope.formState};\r\n                $scope.addNew = addNew;\r\n                $scope.remove = remove;\r\n                $scope.copyFields = copyFields;\r\n\r\n                function copyFields(fields) {\r\n                    fields = angular.copy(fields);\r\n                    $scope.repeatfields = fields;\r\n                    return fields;\r\n                }\r\n\r\n                $scope.clear = function (field) {\r\n                    return _.mapObject(field, function (key, val) {\r\n                        if (typeof val === 'object') {\r\n                            return $scope.clear(val);\r\n                        }\r\n                        return undefined;\r\n\r\n                    });\r\n                };\r\n\r\n                function addNew() {\r\n                    $scope.form.$setDirty(true);\r\n                    $scope.model[$scope.options.key] = $scope.model[$scope.options.key] || [];\r\n                    var repeatsection = $scope.model[$scope.options.key];\r\n                    var newsection = angular.copy($scope.options.templateOptions.defaultModel);\r\n                    repeatsection.push(newsection);\r\n                }\r\n\r\n                function remove($index) {\r\n                    $scope.model[$scope.options.key].splice($index, 1);\r\n                    $scope.form.$setDirty(true);\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'arrayConfig',\r\n            templateUrl: 'arrayConfig.html',\r\n            controller: function ($scope, $uibModal, growl, CategoriesService) {\r\n                $scope.formOptions = {formState: $scope.formState};\r\n                $scope._showBox = _showBox;\r\n                $scope.showBox = showBox;\r\n                $scope.isInitial = false;\r\n                $scope.presets = $scope.options.data.presets($scope.model);\r\n\r\n                function _showBox(model, parentModel, isInitial, callback) {\r\n                    var modalInstance = $uibModal.open({\r\n                        templateUrl: 'configBox.html',\r\n                        controller: 'ConfigBoxInstanceController',\r\n                        size: 'lg',\r\n                        resolve: {\r\n                            model: function () {\r\n                                return model;\r\n                            },\r\n                            fields: function () {\r\n                                return $scope.options.data.fieldsFunction(model, parentModel, isInitial, angular.injector(), CategoriesService);\r\n                            },\r\n                            isInitial: function () {\r\n                                return isInitial\r\n                            },\r\n                            parentModel: function () {\r\n                                return parentModel;\r\n                            },\r\n                            data: function () {\r\n                                return $scope.options.data;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n\r\n                    modalInstance.result.then(function (returnedModel) {\r\n                        $scope.form.$setDirty(true);\r\n                        if (angular.isDefined(callback)) {\r\n                            callback(true, returnedModel);\r\n                        }\r\n                    }, function () {\r\n                        if (angular.isDefined(callback)) {\r\n                            callback(false);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                function showBox(model, parentModel) {\r\n                    $scope._showBox(model, parentModel, false)\r\n                }\r\n\r\n                $scope.addEntry = function (entriesCollection, preset) {\r\n                    if ($scope.options.data.checkAddingAllowed(entriesCollection, preset)) {\r\n                        var model = angular.copy($scope.options.data.defaultModel);\r\n                        if (angular.isDefined(preset)) {\r\n                            _.extend(model, preset);\r\n                        }\r\n\r\n                        $scope.isInitial = true;\r\n\r\n                        $scope._showBox(model, entriesCollection, true, function (isSubmitted, returnedModel) {\r\n                            if (isSubmitted) {\r\n                                //Here is where the entry is actually added to the model\r\n                                entriesCollection.push(angular.isDefined(returnedModel) ? returnedModel : model);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        growl.error(\"That predefined indexer is already configured.\"); //For now this is the only case where adding is forbidden so we use this hardcoded message \"for now\"... (;-))\r\n                    }\r\n\r\n                };\r\n\r\n            }\r\n\r\n        });\r\n\r\n    }]);\r\n\r\n\r\nangular.module('nzbhydraApp').controller('ConfigBoxInstanceController', [\"$scope\", \"$q\", \"$uibModalInstance\", \"$http\", \"model\", \"fields\", \"isInitial\", \"parentModel\", \"data\", \"growl\", function ($scope, $q, $uibModalInstance, $http, model, fields, isInitial, parentModel, data, growl) {\r\n\r\n    $scope.model = model;\r\n    $scope.fields = fields;\r\n    $scope.isInitial = isInitial;\r\n    $scope.allowDelete = data.allowDeleteFunction(model);\r\n    $scope.spinnerActive = false;\r\n    $scope.needsConnectionTest = false;\r\n\r\n    $scope.obSubmit = function () {\r\n        if ($scope.form.$valid) {\r\n            var a = data.checkBeforeClose($scope, model).then(function (data) {\r\n                if (angular.isDefined(data)) {\r\n                    $scope.model = data;\r\n                }\r\n                $uibModalInstance.close(data);\r\n            });\r\n        } else {\r\n            growl.error(\"Config invalid. Please check your settings.\");\r\n            angular.forEach($scope.form.$error, function (error) {\r\n                angular.forEach(error, function (field) {\r\n                    field.$setTouched();\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    $scope.cancel = function () {\r\n        $uibModalInstance.dismiss();\r\n    };\r\n\r\n    $scope.deleteEntry = function () {\r\n        parentModel.splice(parentModel.indexOf(model), 1);\r\n        $uibModalInstance.close($scope);\r\n    };\r\n\r\n    $scope.reset = function () {\r\n        if (angular.isDefined(data.resetFunction)) {\r\n            data.resetFunction($scope);\r\n        }\r\n    };\r\n\r\n    $scope.$on(\"modal.closing\", function (targetScope, reason) {\r\n        if (reason === \"backdrop click\") {\r\n            $scope.reset($scope);\r\n        }\r\n    });\r\n}]);\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigBoxService', ConfigBoxService);\r\n\r\nfunction ConfigBoxService($http, $q, $uibModal) {\r\n\r\n    return {\r\n        checkConnection: checkConnection,\r\n        checkCaps: checkCaps\r\n    };\r\n\r\n    function checkConnection(url, settings) {\r\n        var deferred = $q.defer();\r\n\r\n        $http.post(url, settings).success(function (result) {\r\n            //Using ng-class and a scope variable doesn't work for some reason, is only updated at second click \r\n            if (result.successful) {\r\n                deferred.resolve({checked: true, message: null, model: result});\r\n            } else {\r\n                deferred.reject({checked: true, message: result.message});\r\n            }\r\n        }).error(function (result) {\r\n            deferred.reject({checked: false, message: result.message});\r\n        });\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    function checkCaps(url, model) {\r\n        var deferred = $q.defer();\r\n\r\n        var result = $uibModal.open({\r\n            templateUrl: 'static/html/checker-state.html',\r\n            controller: CheckCapsModalInstanceCtrl,\r\n            size: \"md\",\r\n            backdrop: \"static\",\r\n            backdropClass: \"waiting-cursor\",\r\n            resolve: {\r\n                url: function () {\r\n                    return url;\r\n                },\r\n                model: function () {\r\n                    return model;\r\n                }\r\n            }\r\n        });\r\n\r\n        result.result.then(function (data) {\r\n            console.log(data);\r\n            deferred.resolve(data[0], data[1]);\r\n        }, function (message) {\r\n            console.log(message)\r\n            deferred.reject(message);\r\n        });\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n}\r\nConfigBoxService.$inject = [\"$http\", \"$q\", \"$uibModal\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('CheckCapsModalInstanceCtrl', CheckCapsModalInstanceCtrl);\r\n\r\nfunction CheckCapsModalInstanceCtrl($scope, $interval, $http, $timeout, url, model) {\r\n\r\n    var updateMessagesInterval = undefined;\r\n\r\n    $scope.messages = undefined;\r\n\r\n    $http.post(url, model).success(function (data) {\r\n        //deferred.resolve(data, model);\r\n        $scope.$close([data, model]);\r\n    }).error(function () {\r\n        $scope.$dismiss(\"Unknown error\")\r\n    });\r\n\r\n    $timeout(\r\n        updateMessagesInterval = $interval(function () {\r\n            $http.get(\"internalapi/indexer/checkCapsMessages\").then(function (data) {\r\n                $scope.messages = data.data;\r\n            });\r\n        }, 500),\r\n        500);\r\n\r\n\r\n    $scope.$on('$destroy', function () {\r\n        if (angular.isDefined(updateMessagesInterval)) {\r\n            $interval.cancel(updateMessagesInterval);\r\n        }\r\n    });\r\n\r\n\r\n}\r\nCheckCapsModalInstanceCtrl.$inject = [\"$scope\", \"$interval\", \"$http\", \"$timeout\", \"url\", \"model\"];\r\n\r\n\r\n\r\n\r\n","var filters = angular.module('filters', []);\r\n\r\nfilters.filter('bytes', function () {\r\n    return function (bytes) {\r\n        return filesize(bytes);\r\n    }\r\n});\r\n\r\nfilters\r\n    .filter('unsafe', ['$sce', function($sce){\r\n        return function(text) {\r\n            return $sce.trustAsHtml(text);\r\n        };\r\n    }]);","angular\r\n    .module('nzbhydraApp')\r\n    .factory('FileSelectionService', FileSelectionService);\r\n\r\nfunction FileSelectionService($http, $q, $uibModal) {\r\n\r\n    var categories = {};\r\n    var selectedCategory = {};\r\n\r\n    var service = {\r\n        open: open\r\n    };\r\n\r\n    var deferred;\r\n\r\n    return service;\r\n\r\n\r\n    function open(fullPath, type) {\r\n        var instance = $uibModal.open({\r\n            templateUrl: 'static/html/file-selection.html',\r\n            controller: 'FileSelectionModalController',\r\n            size: \"md\",\r\n            resolve: {\r\n                data: function () {\r\n                    return $http.post(\"internalapi/config/folderlisting\", {fullPath: angular.isDefined(fullPath) ? fullPath : null, goUp: false, type: type});\r\n                },\r\n                type: function () {\r\n                    return type;\r\n                }\r\n            }\r\n        });\r\n\r\n        instance.result.then(function (selection) {\r\n                console.log(selection);\r\n                deferred.resolve(selection);\r\n            }, function () {\r\n                deferred.reject(\"dismissed\");\r\n            }\r\n        );\r\n        deferred = $q.defer();\r\n        return deferred.promise;\r\n    }\r\n\r\n}\r\nFileSelectionService.$inject = [\"$http\", \"$q\", \"$uibModal\"];\r\n\r\nangular\r\n    .module('nzbhydraApp').controller('FileSelectionModalController', [\"$scope\", \"$http\", \"$uibModalInstance\", \"FileSelectionService\", \"data\", \"type\", function ($scope, $http, $uibModalInstance, FileSelectionService, data, type) {\r\n\r\n    $scope.type = type;\r\n    $scope.showType = type === \"file\" ? \"File\" : \"Folder\";\r\n    $scope.data = data.data;\r\n\r\n    $scope.select = function (fileOrFolder, selectType) {\r\n        if (selectType === \"file\" && type === \"file\") {\r\n            $uibModalInstance.close(fileOrFolder.fullPath);\r\n        } else if (selectType === \"folder\") {\r\n            $http.post(\"internalapi/config/folderlisting\", {fullPath: fileOrFolder.fullPath, type: type, goUp: false}).then(function (data) {\r\n                $scope.data = data.data;\r\n            })\r\n        }\r\n    };\r\n\r\n    $scope.goUp = function () {\r\n        $http.post(\"internalapi/config/folderlisting\", {fullPath: $scope.data.fullPath, type: type, goUp: true}).then(function (data) {\r\n            $scope.data = data.data;\r\n        })\r\n    };\r\n\r\n    $scope.submit = function () {\r\n        $uibModalInstance.close($scope.data.fullPath);\r\n    }\r\n\r\n}]);","angular\r\n    .module('nzbhydraApp')\r\n    .factory('FileDownloadService', FileDownloadService);\r\n\r\nfunction FileDownloadService($http, growl) {\r\n\r\n    var service = {\r\n        downloadFile: downloadFile\r\n    };\r\n\r\n    return service;\r\n\r\n    function downloadFile(link, filename, method, data) {\r\n        return $http({method: method, url: link, data: data, responseType: 'arraybuffer'}).success(function (data, status, headers, config) {\r\n            var a = document.createElement('a');\r\n            var blob = new Blob([data], {'type': \"application/octet-stream\"});\r\n            a.href = URL.createObjectURL(blob);\r\n            a.download = filename;\r\n\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n        }).error(function (data, status, headers, config) {\r\n            growl.error(status);\r\n        });\r\n\r\n    }\r\n\r\n\r\n}\r\nFileDownloadService.$inject = [\"$http\", \"growl\"];\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('DownloaderCategoriesService', DownloaderCategoriesService);\r\n\r\nfunction DownloaderCategoriesService($http, $q, $uibModal) {\r\n\r\n    var categories = {};\r\n    var selectedCategory = {};\r\n\r\n    var service = {\r\n        get: getCategories,\r\n        invalidate: invalidate,\r\n        select: select,\r\n        openCategorySelection: openCategorySelection\r\n    };\r\n\r\n    var deferred;\r\n\r\n    return service;\r\n\r\n\r\n    function getCategories(downloader) {\r\n        function loadAll() {\r\n            if (downloader.name in categories) {\r\n                var deferred = $q.defer();\r\n                deferred.resolve(categories[downloader.name]);\r\n                return deferred.promise;\r\n            }\r\n\r\n            return $http.get(encodeURI('internalapi/downloader/' + downloader.name + \"/categories\"))\r\n                .then(function (categoriesResponse) {\r\n                    categories[downloader.name] = categoriesResponse.data;\r\n                    return categoriesResponse.data;\r\n\r\n                }, function (error) {\r\n                    throw error;\r\n                });\r\n        }\r\n\r\n        return loadAll().then(function (categories) {\r\n            return categories;\r\n        }, function (error) {\r\n            throw error;\r\n        });\r\n    }\r\n\r\n\r\n    function openCategorySelection(downloader) {\r\n        var instance = $uibModal.open({\r\n            templateUrl: 'static/html/directives/addable-nzb-modal.html',\r\n            controller: 'DownloaderCategorySelectionController',\r\n            size: \"sm\",\r\n            resolve: {\r\n                categories: function () {\r\n                    return getCategories(downloader)\r\n                }\r\n            }\r\n        });\r\n\r\n        instance.result.then(function() {}, function() {\r\n            deferred.reject(\"dismissed\");\r\n            }\r\n        );\r\n        deferred = $q.defer();\r\n        return deferred.promise;\r\n    }\r\n\r\n    function select(category) {\r\n        selectedCategory = category;\r\n\r\n        deferred.resolve(category);\r\n    }\r\n\r\n    function invalidate() {\r\n        categories = {};\r\n    }\r\n}\r\nDownloaderCategoriesService.$inject = [\"$http\", \"$q\", \"$uibModal\"];\r\n\r\nangular\r\n    .module('nzbhydraApp').controller('DownloaderCategorySelectionController', [\"$scope\", \"$uibModalInstance\", \"DownloaderCategoriesService\", \"categories\", function ($scope, $uibModalInstance, DownloaderCategoriesService, categories) {\r\n\r\n    $scope.categories = categories;\r\n    $scope.select = function (category) {\r\n        DownloaderCategoriesService.select(category);\r\n        $uibModalInstance.close($scope);\r\n    }\r\n}]);","angular\n    .module('nzbhydraApp')\n    .controller('DownloadHistoryController', DownloadHistoryController);\n\n\nfunction DownloadHistoryController($scope, StatsService, downloads, ConfigService, $timeout, $sce) {\n    $scope.limit = 100;\n    $scope.pagination = {\n        current: 1\n    };\n    var sortModel = {\n        column: \"time\",\n        sortMode: 2\n    };\n    $timeout(function () {\n        $scope.$broadcast(\"newSortColumn\", sortModel.column, sortModel.sortMode);\n    }, 10);\n    $scope.filterModel = {};\n\n    //Filter options\n    $scope.indexersForFiltering = [];\n    _.forEach(ConfigService.getSafe().indexers, function (indexer) {\n        $scope.indexersForFiltering.push({label: indexer.name, id: indexer.name})\n    });\n    $scope.preselectedTimeInterval = {beforeDate: null, afterDate: null};\n    $scope.statusesForFiltering = [\n        {label: \"None\", id: 'NONE'},\n        {label: \"Requested\", id: 'REQUESTED'},\n        {label: \"Internal error\", id: 'INTERNAL_ERROR'},\n        {label: \"NZB downloaded successful\", id: 'NZB_DOWNLOAD_SUCCESSFUL'},\n        {label: \"NZB download error\", id: 'NZB_DOWNLOAD_ERROR'},\n        {label: \"NZB added\", id: 'NZB_ADDED'},\n        {label: \"NZB not added\", id: 'NZB_NOT_ADDED'},\n        {label: \"NZB add error\", id: 'NZB_ADD_ERROR'},\n        {label: \"NZB add rejected\", id: 'NZB_ADD_REJECTED'},\n        {label: \"Content download successful\", id: 'CONTENT_DOWNLOAD_SUCCESSFUL'},\n        {label: \"Content download warning\", id: 'CONTENT_DOWNLOAD_WARNING'},\n        {label: \"Content download error\", id: 'CONTENT_DOWNLOAD_ERROR'}\n        ];\n    $scope.accessOptionsForFiltering = [{label: \"All\", value: \"all\"}, {label: \"API\", value: 'API'}, {label: \"Internal\", value: 'INTERNAL'}];\n\n\n    //Preloaded data\n    $scope.nzbDownloads = downloads.data.content;\n    $scope.totalDownloads = downloads.data.totalElements;\n\n    $scope.columnSizes = {\n        time: 10,\n        indexer: 10,\n        title: 37,\n        result: 9,\n        source: 8,\n        age: 6,\n        username: 10,\n        ip: 10\n    };\n    if (ConfigService.getSafe().logging.historyUserInfoType === \"NONE\") {\n        $scope.columnSizes.username = 0;\n        $scope.columnSizes.ip = 0;\n        $scope.columnSizes.title += 20;\n    } else if (ConfigService.getSafe().logging.historyUserInfoType === \"IP\") {\n        $scope.columnSizes.username = 0;\n        $scope.columnSizes.title += 10;\n    } else if (ConfigService.getSafe().logging.historyUserInfoType === \"USERNAME\") {\n        $scope.columnSizes.ip = 0;\n        $scope.columnSizes.title += 10;\n    }\n\n\n    $scope.update = function () {\n        StatsService.getDownloadHistory($scope.pagination.current, $scope.limit, $scope.filterModel, sortModel).then(function (downloads) {\n            $scope.nzbDownloads = downloads.data.content;\n            $scope.totalDownloads = downloads.data.totalElements;\n        });\n    };\n\n\n    $scope.$on(\"sort\", function (event, column, sortMode) {\n        if (sortMode === 0) {\n            column = \"time\";\n            sortMode = 2;\n        }\n        sortModel = {\n            column: column,\n            sortMode: sortMode\n        };\n        $scope.$broadcast(\"newSortColumn\", sortModel.column, sortModel.sortMode);\n        $scope.update();\n    });\n\n    $scope.getStatusIcon = function (result) {\n        var spans;\n        if (result === \"NONE\" || result === \"REQUESTED\") {\n            spans = '<span class=\"glyphicon glyphicon-question-sign\"></span>'\n        }\n        if (result === \"INTERNAL_ERROR\") {\n            spans = '<span class=\"glyphicon glyphicon-remove\"></span>'\n        }\n        if (result === \"INTERNAL_ERROR\") {\n            spans = '<span class=\"glyphicon glyphicon-remove\"></span>'\n        }\n        if (result === 'NZB_DOWNLOAD_SUCCESSFUL') {\n            spans = '<span class=\"glyphicon glyphicon-ok\"></span>';\n        }\n        if (result === 'NZB_DOWNLOAD_ERROR') {\n            spans = '<span class=\"glyphicon glyphicon-remove\"></span>';\n        }\n        if (result === 'NZB_ADDED') {\n            spans = '<span class=\"glyphicon glyphicon-ok\" style=\"margin-right: 3px\"></span><span class=\"glyphicon glyphicon-question-sign\"></span>';\n        }\n        if (result === 'NZB_NOT_ADDED' || result === 'NZB_ADD_ERROR' || result === 'NZB_ADD_REJECTED') {\n            spans = '<span class=\"glyphicon glyphicon-ok\" style=\"margin-right: 3px\"></span><span class=\"glyphicon glyphicon-remove\"></span>';\n        }\n        if (result === 'CONTENT_DOWNLOAD_SUCCESSFUL') {\n            spans = '<span class=\"glyphicon glyphicon-ok\" style=\"margin-right: 3px\"><span class=\"glyphicon glyphicon-ok\"></span><span class=\"glyphicon glyphicon-ok\"></span>';\n        }\n        if (result === 'CONTENT_DOWNLOAD_ERROR' || result === 'CONTENT_DOWNLOAD_WARNING') {\n            spans = '<span class=\"glyphicon glyphicon-ok\" style=\"margin-right: 3px\"><span class=\"glyphicon glyphicon-ok\"></span><span class=\"glyphicon glyphicon-remove\"></span>';\n        }\n        return $sce.trustAsHtml('<span tooltip-placement=\"auto top\" uib-tooltip=\"' + result + '\">' + spans + '</span>');\n\n    };\n\n\n    $scope.$on(\"filter\", function (event, column, filterModel, isActive) {\n        if (filterModel.filterValue) {\n            $scope.filterModel[column] = filterModel;\n        } else {\n            delete $scope.filterModel[column];\n        }\n        $scope.update();\n    })\n\n}\nDownloadHistoryController.$inject = [\"$scope\", \"StatsService\", \"downloads\", \"ConfigService\", \"$timeout\", \"$sce\"];\n\nangular\n    .module('nzbhydraApp')\n    .filter('reformatDateEpoch', reformatDateEpoch);\n\nfunction reformatDateEpoch() {\n    return function (date) {\n        return moment.unix(date).local().format(\"YYYY-MM-DD HH:mm\");\n\n    }\n}","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigService', ConfigService);\r\n\r\nfunction ConfigService($http, $q, $cacheFactory, bootstrapped) {\r\n\r\n    var cache = $cacheFactory(\"nzbhydra\");\r\n    var safeConfig = bootstrapped.safeConfig;\r\n\r\n    return {\r\n        set: set,\r\n        get: get,\r\n        getSafe: getSafe,\r\n        invalidateSafe: invalidateSafe,\r\n        maySeeAdminArea: maySeeAdminArea,\r\n        reloadConfig: reloadConfig\r\n    };\r\n\r\n    function set(newConfig, ignoreWarnings) {\r\n        var deferred = $q.defer();\r\n        $http.put('internalapi/config', newConfig)\r\n            .then(function (response) {\r\n                if (response.data.ok && (ignoreWarnings || response.data.warningMessages.length === 0)) {\r\n                    cache.put(\"config\", newConfig);\r\n                    invalidateSafe();\r\n                }\r\n                deferred.resolve(response);\r\n\r\n            }, function (errorresponse) {\r\n                console.log(\"Error saving settings:\");\r\n                console.log(errorresponse);\r\n                deferred.reject(errorresponse);\r\n            });\r\n        return deferred.promise;\r\n    }\r\n\r\n    function reloadConfig() {\r\n        return $http.get('internalapi/config/reload').then(function (data) {\r\n            return data.data;\r\n        });\r\n    }\r\n\r\n    function get() {\r\n        var config = cache.get(\"config\");\r\n        if (angular.isUndefined(config)) {\r\n            config = $http.get('internalapi/config').then(function (data) {\r\n                return data.data;\r\n            });\r\n            cache.put(\"config\", config);\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    function getSafe() {\r\n        return safeConfig;\r\n    }\r\n\r\n    function invalidateSafe() {\r\n        $http.get('internalapi/config/safe').then(function (data) {\r\n            safeConfig = data.data;\r\n        });\r\n    }\r\n\r\n    function maySeeAdminArea() {\r\n        function loadAll() {\r\n            var maySeeAdminArea = cache.get(\"maySeeAdminArea\");\r\n            if (!angular.isUndefined(maySeeAdminArea)) {\r\n                var deferred = $q.defer();\r\n                deferred.resolve(maySeeAdminArea);\r\n                return deferred.promise;\r\n            }\r\n\r\n            return $http.get('internalapi/mayseeadminarea')\r\n                .then(function (configResponse) {\r\n                    var config = configResponse.data;\r\n                    cache.put(\"maySeeAdminArea\", config);\r\n                    return configResponse.data;\r\n                });\r\n        }\r\n\r\n        return loadAll().then(function (maySeeAdminArea) {\r\n            return maySeeAdminArea;\r\n        });\r\n    }\r\n}\r\nConfigService.$inject = [\"$http\", \"$q\", \"$cacheFactory\", \"bootstrapped\"];","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigFields', ConfigFields);\r\n\r\nfunction ConfigFields($injector) {\r\n\r\n    return {\r\n        getFields: getFields\r\n    };\r\n\r\n\r\n    function ipValidator() {\r\n        return {\r\n            expression: function ($viewValue, $modelValue) {\r\n                var value = $modelValue || $viewValue;\r\n                if (value) {\r\n                    return /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/.test(value)\r\n                        || /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/.test(value);\r\n                }\r\n                return true;\r\n            },\r\n            message: '$viewValue + \" is not a valid IP Address\"'\r\n        };\r\n    }\r\n\r\n    function regexValidator(regex, message, prefixViewValue) {\r\n        return {\r\n            expression: function ($viewValue, $modelValue) {\r\n                var value = $modelValue || $viewValue;\r\n                if (value) {\r\n                    return regex.test(value);\r\n                }\r\n                return true;\r\n            },\r\n            message: (prefixViewValue ? '$viewValue + \" ' : '\" ') + message + '\"'\r\n        };\r\n    }\r\n\r\n    function getFields(rootModel) {\r\n        return {\r\n            main: [\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {label: 'Hosting'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'host',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Host',\r\n                                required: true,\r\n                                placeholder: 'IPv4 address to bind to',\r\n                                help: 'I strongly recommend using a reverse proxy instead of exposing this directly. Requires restart.'\r\n                            },\r\n                            validators: {\r\n                                ipAddress: ipValidator()\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'port',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Port',\r\n                                required: true,\r\n                                placeholder: '5056',\r\n                                help: 'Requires restart'\r\n                            },\r\n                            validators: {\r\n                                port: regexValidator(/^\\d{1,5}$/, \"is no valid port\", true)\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'urlBase',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'URL base',\r\n                                placeholder: '/nzbhydra',\r\n                                help: 'Adapt when using a reverse proxy. See <a href=\"https://github.com/theotherp/nzbhydra2/wiki/Reverse-proxies\" target=\"_blank\">wiki</a>. Always use when calling Hydra, even locally.'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'externalUrl',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'External URL',\r\n                                placeholder: 'https://www.somedomain.com/nzbhydra/',\r\n                                help: 'Set to the full external URL so machines outside can use the generated NZB links.'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'useLocalUrlForApiAccess',\r\n                            type: 'horizontalSwitch',\r\n                            hideExpression: '!model.externalUrl',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Use local address in API results',\r\n                                help: 'Disable to make API results use the external URL in NZB links.'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'ssl',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Use SSL',\r\n                                help: 'Requires restart.'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'sslKeyStore',\r\n                            hideExpression: '!model.ssl',\r\n                            type: 'fileInput',\r\n                            templateOptions: {\r\n                                label: 'SSL keystore file',\r\n                                required: true,\r\n                                type: \"file\",\r\n                                help: 'Requires restart. See <a href=\"https://github.com/theotherp/nzbhydra2/wiki/SSL\" target=\"_blank\">wiki</a>'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'sslKeyStorePassword',\r\n                            hideExpression: '!model.ssl',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'password',\r\n                                label: 'SSL keystore password',\r\n                                required: true,\r\n                                help: 'Requires restart.'\r\n                            }\r\n                        },\r\n\r\n                        {\r\n                            wrapper: 'fieldset',\r\n                            templateOptions: {\r\n                                label: 'Proxy'\r\n                            }\r\n                            ,\r\n                            fieldGroup: [\r\n                                {\r\n                                    key: 'proxyType',\r\n                                    type: 'horizontalSelect',\r\n                                    templateOptions: {\r\n                                        type: 'select',\r\n                                        label: 'Use proxy',\r\n                                        options: [\r\n                                            {name: 'None', value: 'NONE'},\r\n                                            {name: 'SOCKS', value: 'SOCKS'},\r\n                                            {name: 'HTTP(S)', value: 'HTTP'}\r\n                                        ]\r\n                                    }\r\n                                },\r\n                                {\r\n                                    key: 'proxyHost',\r\n                                    type: 'horizontalInput',\r\n                                    hideExpression: 'model.proxyType===\"NONE\"',\r\n                                    templateOptions: {\r\n                                        type: 'text',\r\n                                        label: 'SOCKS proxy host',\r\n                                        placeholder: 'Set to use a SOCKS proxy',\r\n                                        help: \"IPv4 only\"\r\n                                    }\r\n                                },\r\n                                {\r\n                                    key: 'proxyPort',\r\n                                    type: 'horizontalInput',\r\n                                    hideExpression: 'model.proxyType===\"NONE\"',\r\n                                    templateOptions: {\r\n                                        type: 'number',\r\n                                        label: 'Proxy port',\r\n                                        placeholder: '1080'\r\n                                    }\r\n                                },\r\n                                {\r\n                                    key: 'proxyUsername',\r\n                                    type: 'horizontalInput',\r\n                                    hideExpression: 'model.proxyType===\"NONE\"',\r\n                                    templateOptions: {\r\n                                        type: 'text',\r\n                                        label: 'Proxy username'\r\n                                    }\r\n                                },\r\n                                {\r\n                                    key: 'proxyPassword',\r\n                                    type: 'passwordSwitch',\r\n                                    hideExpression: 'model.proxyType===\"NONE\"',\r\n                                    templateOptions: {\r\n                                        type: 'text',\r\n                                        label: 'Proxy password'\r\n                                    }\r\n                                },\r\n                                {\r\n                                    key: 'proxyIgnoreLocal',\r\n                                    type: 'horizontalSwitch',\r\n                                    hideExpression: 'model.proxyType===\"NONE\"',\r\n                                    templateOptions: {\r\n                                        type: 'switch',\r\n                                        label: 'Bypass local addresses'\r\n                                    }\r\n                                },\r\n                                {\r\n                                    key: 'proxyIgnoreDomains',\r\n                                    type: 'horizontalInput',\r\n                                    hideExpression: 'model.proxyType===\"NONE\"',\r\n                                    templateOptions: {\r\n                                        type: 'text',\r\n                                        help: 'Separate by comma. You can use wildcards (*). Case insensitive',\r\n                                        label: 'Bypass domains'\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {label: 'UI'},\r\n                    fieldGroup: [\r\n\r\n                        {\r\n                            key: 'theme',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'select',\r\n                                label: 'Theme',\r\n                                help: 'Reload page after restart',\r\n                                options: [\r\n                                    {name: 'Grey', value: 'grey'},\r\n                                    {name: 'Bright', value: 'bright'},\r\n                                    {name: 'Dark', value: 'dark'}\r\n                                ]\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {label: 'Security'},\r\n                    fieldGroup: [\r\n\r\n                        {\r\n                            key: 'apiKey',\r\n                            type: 'horizontalApiKeyInput',\r\n                            templateOptions: {\r\n                                label: 'API key',\r\n                                help: 'Alphanumeric only',\r\n                                required: true\r\n                            },\r\n                            validators: {\r\n                                apiKey: regexValidator(/^[a-zA-Z0-9]*$/, \"API key must only contain numbers and digits\", false)\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'dereferer',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Dereferer',\r\n                                help: 'Redirect external links to hide your instance. Insert $s for target URL.'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'verifySsl',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                label: 'Verify SSL certificates',\r\n                                help: 'If enabled only valid/known SSL certificates will be accepted when accessing indexers. Change requires restart. See <a href=\"https://github.com/theotherp/nzbhydra2/wiki/SSL-verification-errors\" target=\"_blank\">wiki</a>'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'sniDisabledFor',\r\n                            type: 'horizontalChips',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Disable SNI',\r\n                                help: 'Add a host if you get an \"unrecognized_name\" error. Apply words with return key. See <a href=\"https://github.com/theotherp/nzbhydra2/wiki/SSL-verification-errors\" target=\"_blank\">wiki</a>'\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'logging',\r\n                    templateOptions: {label: 'Logging'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'logfilelevel',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'select',\r\n                                label: 'Logfile level',\r\n                                options: [\r\n                                    {name: 'Error', value: 'ERROR'},\r\n                                    {name: 'Warning', value: 'WARN'},\r\n                                    {name: 'Info', value: 'INFO'},\r\n                                    {name: 'Debug', value: 'DEBUG'}\r\n                                ]\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'logMaxSize',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Max log file size',\r\n                                addonRight: {\r\n                                    text: 'MB'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'consolelevel',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'select',\r\n                                label: 'Console log level',\r\n                                options: [\r\n                                    {name: 'Error', value: 'ERROR'},\r\n                                    {name: 'Warning', value: 'WARN'},\r\n                                    {name: 'Info', value: 'INFO'},\r\n                                    {name: 'Debug', value: 'DEBUG'}\r\n                                ]\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'logIpAddresses',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Log IP addresses'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'logUsername',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Log user names'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'historyUserInfoType',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'select',\r\n                                label: 'History user info',\r\n                                options: [\r\n                                    {name: 'IP and username', value: 'BOTH'},\r\n                                    {name: 'IP address', value: 'IP'},\r\n                                    {name: 'Username', value: 'USERNAME'},\r\n                                    {name: 'None', value: 'NONE'}\r\n                                ],\r\n                                help: 'Only affects if value is displayed in the search/download history'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'markersToLog',\r\n                            type: 'horizontalMultiselect',\r\n                            templateOptions: {\r\n                                label: 'Log markers',\r\n                                help: 'Select certain sections for more output on debug level',\r\n                                options: [\r\n                                    {label: 'Removed trailing words', id: 'TRAILING'},\r\n                                    {label: 'Rejected results', id: 'RESULT_ACCEPTOR'},\r\n                                    {label: 'Performance', id: 'PERFORMANCE'},\r\n                                    {label: 'Duplicate detection', id: 'DUPLICATES'},\r\n                                    {label: 'Indexer scheduler', id: 'SCHEDULER'},\r\n                                    {label: 'Uer agent mapping', id: 'USER_AGENT'}\r\n                                ],\r\n                                hideExpression: 'model.consolelevel !== \"DEBUG\" && model.logfilelevel !== \"DEBUG\"', //Doesn't work...\r\n                                placeholder: 'None'\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {label: 'Other'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'startupBrowser',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Open browser on startup'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'backupEverySunday',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Backup every sunday'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'showNews',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Show news',\r\n                                help: \"Hydra will occasionally show news when opened. You can always find them in the system section\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'xmx',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'JVM memory',\r\n                                addonRight: {\r\n                                    text: 'MB'\r\n                                },\r\n                                help: '128M should suffice except when working with big databases / many indexers. See <a href=\"https://github.com/theotherp/nzbhydra2/wiki/Memory-requirements\" target=\"_blank\">wiki</a>'\r\n                            }\r\n                        }\r\n                    ]\r\n\r\n                }\r\n            ],\r\n\r\n            searching: [\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {\r\n                        label: 'Indexer access'\r\n                    },\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'timeout',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Timeout when accessing indexers',\r\n                                help: 'Any web call to an indexer taking longer than this is aborted',\r\n                                addonRight: {\r\n                                    text: 'seconds'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'ignoreTemporarilyDisabled',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Ignore temporarily disabled',\r\n                                help: \"If enabled access to indexers will never be paused after an error occurred\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'generateQueries',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                label: 'Generate queries',\r\n                                options: [\r\n                                    {name: 'Internal searches', value: 'INTERNAL'},\r\n                                    {name: 'API searches', value: 'API'},\r\n                                    {name: 'All searches', value: 'BOTH'},\r\n                                    {name: 'Never', value: 'NONE'}\r\n                                ],\r\n                                help: \"Generate queries for indexers which do not support ID based searches\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'idFallbackToQueryGeneration',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                label: 'Fallback to generated queries',\r\n                                options: [\r\n                                    {name: 'Internal searches', value: 'INTERNAL'},\r\n                                    {name: 'API searches', value: 'API'},\r\n                                    {name: 'All searches', value: 'BOTH'},\r\n                                    {name: 'Never', value: 'NONE'}\r\n                                ],\r\n                                help: \"When no results were found for a query ID search again using a generated query (on indexer level)\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'language',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Language',\r\n                                required: true,\r\n                                help: 'Used for movie query generation and autocomplete only.',\r\n                                options: [{\"name\": \"Abkhaz\", value: \"ab\"}, {\"name\": \"Afar\", value: \"aa\"}, {\"name\": \"Afrikaans\", value: \"af\"}, {\"name\": \"Akan\", value: \"ak\"}, {\r\n                                    \"name\": \"Albanian\",\r\n                                    value: \"sq\"\r\n                                }, {\"name\": \"Amharic\", value: \"am\"}, {\"name\": \"Arabic\", value: \"ar\"}, {\"name\": \"Aragonese\", value: \"an\"}, {\"name\": \"Armenian\", value: \"hy\"}, {\r\n                                    \"name\": \"Assamese\",\r\n                                    value: \"as\"\r\n                                }, {\"name\": \"Avaric\", value: \"av\"}, {\"name\": \"Avestan\", value: \"ae\"}, {\"name\": \"Aymara\", value: \"ay\"}, {\"name\": \"Azerbaijani\", value: \"az\"}, {\r\n                                    \"name\": \"Bambara\",\r\n                                    value: \"bm\"\r\n                                }, {\"name\": \"Bashkir\", value: \"ba\"}, {\"name\": \"Basque\", value: \"eu\"}, {\"name\": \"Belarusian\", value: \"be\"}, {\"name\": \"Bengali\", value: \"bn\"}, {\r\n                                    \"name\": \"Bihari\",\r\n                                    value: \"bh\"\r\n                                }, {\"name\": \"Bislama\", value: \"bi\"}, {\"name\": \"Bosnian\", value: \"bs\"}, {\"name\": \"Breton\", value: \"br\"}, {\"name\": \"Bulgarian\", value: \"bg\"}, {\r\n                                    \"name\": \"Burmese\",\r\n                                    value: \"my\"\r\n                                }, {\"name\": \"Catalan\", value: \"ca\"}, {\"name\": \"Chamorro\", value: \"ch\"}, {\"name\": \"Chechen\", value: \"ce\"}, {\"name\": \"Chichewa\", value: \"ny\"}, {\r\n                                    \"name\": \"Chinese\",\r\n                                    value: \"zh\"\r\n                                }, {\"name\": \"Chuvash\", value: \"cv\"}, {\"name\": \"Cornish\", value: \"kw\"}, {\"name\": \"Corsican\", value: \"co\"}, {\"name\": \"Cree\", value: \"cr\"}, {\r\n                                    \"name\": \"Croatian\",\r\n                                    value: \"hr\"\r\n                                }, {\"name\": \"Czech\", value: \"cs\"}, {\"name\": \"Danish\", value: \"da\"}, {\"name\": \"Divehi\", value: \"dv\"}, {\"name\": \"Dutch\", value: \"nl\"}, {\r\n                                    \"name\": \"Dzongkha\",\r\n                                    value: \"dz\"\r\n                                }, {\"name\": \"English\", value: \"en\"}, {\"name\": \"Esperanto\", value: \"eo\"}, {\"name\": \"Estonian\", value: \"et\"}, {\"name\": \"Ewe\", value: \"ee\"}, {\r\n                                    \"name\": \"Faroese\",\r\n                                    value: \"fo\"\r\n                                }, {\"name\": \"Fijian\", value: \"fj\"}, {\"name\": \"Finnish\", value: \"fi\"}, {\"name\": \"French\", value: \"fr\"}, {\"name\": \"Fula\", value: \"ff\"}, {\r\n                                    \"name\": \"Galician\",\r\n                                    value: \"gl\"\r\n                                }, {\"name\": \"Georgian\", value: \"ka\"}, {\"name\": \"German\", value: \"de\"}, {\"name\": \"Greek\", value: \"el\"}, {\"name\": \"Guaraní\", value: \"gn\"}, {\r\n                                    \"name\": \"Gujarati\",\r\n                                    value: \"gu\"\r\n                                }, {\"name\": \"Haitian\", value: \"ht\"}, {\"name\": \"Hausa\", value: \"ha\"}, {\"name\": \"Hebrew\", value: \"he\"}, {\"name\": \"Herero\", value: \"hz\"}, {\r\n                                    \"name\": \"Hindi\",\r\n                                    value: \"hi\"\r\n                                }, {\"name\": \"Hiri Motu\", value: \"ho\"}, {\"name\": \"Hungarian\", value: \"hu\"}, {\"name\": \"Interlingua\", value: \"ia\"}, {\r\n                                    \"name\": \"Indonesian\",\r\n                                    value: \"id\"\r\n                                }, {\"name\": \"Interlingue\", value: \"ie\"}, {\"name\": \"Irish\", value: \"ga\"}, {\"name\": \"Igbo\", value: \"ig\"}, {\"name\": \"Inupiaq\", value: \"ik\"}, {\r\n                                    \"name\": \"Ido\",\r\n                                    value: \"io\"\r\n                                }, {\"name\": \"Icelandic\", value: \"is\"}, {\"name\": \"Italian\", value: \"it\"}, {\"name\": \"Inuktitut\", value: \"iu\"}, {\"name\": \"Japanese\", value: \"ja\"}, {\r\n                                    \"name\": \"Javanese\",\r\n                                    value: \"jv\"\r\n                                }, {\"name\": \"Kalaallisut\", value: \"kl\"}, {\"name\": \"Kannada\", value: \"kn\"}, {\"name\": \"Kanuri\", value: \"kr\"}, {\"name\": \"Kashmiri\", value: \"ks\"}, {\r\n                                    \"name\": \"Kazakh\",\r\n                                    value: \"kk\"\r\n                                }, {\"name\": \"Khmer\", value: \"km\"}, {\"name\": \"Kikuyu\", value: \"ki\"}, {\"name\": \"Kinyarwanda\", value: \"rw\"}, {\"name\": \"Kyrgyz\", value: \"ky\"}, {\r\n                                    \"name\": \"Komi\",\r\n                                    value: \"kv\"\r\n                                }, {\"name\": \"Kongo\", value: \"kg\"}, {\"name\": \"Korean\", value: \"ko\"}, {\"name\": \"Kurdish\", value: \"ku\"}, {\"name\": \"Kwanyama\", value: \"kj\"}, {\r\n                                    \"name\": \"Latin\",\r\n                                    value: \"la\"\r\n                                }, {\"name\": \"Luxembourgish\", value: \"lb\"}, {\"name\": \"Ganda\", value: \"lg\"}, {\"name\": \"Limburgish\", value: \"li\"}, {\"name\": \"Lingala\", value: \"ln\"}, {\r\n                                    \"name\": \"Lao\",\r\n                                    value: \"lo\"\r\n                                }, {\"name\": \"Lithuanian\", value: \"lt\"}, {\"name\": \"Luba-Katanga\", value: \"lu\"}, {\"name\": \"Latvian\", value: \"lv\"}, {\"name\": \"Manx\", value: \"gv\"}, {\r\n                                    \"name\": \"Macedonian\",\r\n                                    value: \"mk\"\r\n                                }, {\"name\": \"Malagasy\", value: \"mg\"}, {\"name\": \"Malay\", value: \"ms\"}, {\"name\": \"Malayalam\", value: \"ml\"}, {\"name\": \"Maltese\", value: \"mt\"}, {\r\n                                    \"name\": \"Māori\",\r\n                                    value: \"mi\"\r\n                                }, {\"name\": \"Marathi\", value: \"mr\"}, {\"name\": \"Marshallese\", value: \"mh\"}, {\"name\": \"Mongolian\", value: \"mn\"}, {\"name\": \"Nauru\", value: \"na\"}, {\r\n                                    \"name\": \"Navajo\",\r\n                                    value: \"nv\"\r\n                                }, {\"name\": \"Northern Ndebele\", value: \"nd\"}, {\"name\": \"Nepali\", value: \"ne\"}, {\"name\": \"Ndonga\", value: \"ng\"}, {\r\n                                    \"name\": \"Norwegian Bokmål\",\r\n                                    value: \"nb\"\r\n                                }, {\"name\": \"Norwegian Nynorsk\", value: \"nn\"}, {\"name\": \"Norwegian\", value: \"no\"}, {\"name\": \"Nuosu\", value: \"ii\"}, {\r\n                                    \"name\": \"Southern Ndebele\",\r\n                                    value: \"nr\"\r\n                                }, {\"name\": \"Occitan\", value: \"oc\"}, {\"name\": \"Ojibwe\", value: \"oj\"}, {\"name\": \"Old Church Slavonic\", value: \"cu\"}, {\"name\": \"Oromo\", value: \"om\"}, {\r\n                                    \"name\": \"Oriya\",\r\n                                    value: \"or\"\r\n                                }, {\"name\": \"Ossetian\", value: \"os\"}, {\"name\": \"Panjabi\", value: \"pa\"}, {\"name\": \"Pāli\", value: \"pi\"}, {\"name\": \"Persian\", value: \"fa\"}, {\r\n                                    \"name\": \"Polish\",\r\n                                    value: \"pl\"\r\n                                }, {\"name\": \"Pashto\", value: \"ps\"}, {\"name\": \"Portuguese\", value: \"pt\"}, {\"name\": \"Quechua\", value: \"qu\"}, {\"name\": \"Romansh\", value: \"rm\"}, {\r\n                                    \"name\": \"Kirundi\",\r\n                                    value: \"rn\"\r\n                                }, {\"name\": \"Romanian\", value: \"ro\"}, {\"name\": \"Russian\", value: \"ru\"}, {\"name\": \"Sanskrit\", value: \"sa\"}, {\"name\": \"Sardinian\", value: \"sc\"}, {\r\n                                    \"name\": \"Sindhi\",\r\n                                    value: \"sd\"\r\n                                }, {\"name\": \"Northern Sami\", value: \"se\"}, {\"name\": \"Samoan\", value: \"sm\"}, {\"name\": \"Sango\", value: \"sg\"}, {\"name\": \"Serbian\", value: \"sr\"}, {\r\n                                    \"name\": \"Gaelic\",\r\n                                    value: \"gd\"\r\n                                }, {\"name\": \"Shona\", value: \"sn\"}, {\"name\": \"Sinhala\", value: \"si\"}, {\"name\": \"Slovak\", value: \"sk\"}, {\"name\": \"Slovene\", value: \"sl\"}, {\r\n                                    \"name\": \"Somali\",\r\n                                    value: \"so\"\r\n                                }, {\"name\": \"Southern Sotho\", value: \"st\"}, {\"name\": \"Spanish\", value: \"es\"}, {\"name\": \"Sundanese\", value: \"su\"}, {\"name\": \"Swahili\", value: \"sw\"}, {\r\n                                    \"name\": \"Swati\",\r\n                                    value: \"ss\"\r\n                                }, {\"name\": \"Swedish\", value: \"sv\"}, {\"name\": \"Tamil\", value: \"ta\"}, {\"name\": \"Telugu\", value: \"te\"}, {\"name\": \"Tajik\", value: \"tg\"}, {\r\n                                    \"name\": \"Thai\",\r\n                                    value: \"th\"\r\n                                }, {\"name\": \"Tigrinya\", value: \"ti\"}, {\"name\": \"Tibetan Standard\", value: \"bo\"}, {\"name\": \"Turkmen\", value: \"tk\"}, {\"name\": \"Tagalog\", value: \"tl\"}, {\r\n                                    \"name\": \"Tswana\",\r\n                                    value: \"tn\"\r\n                                }, {\"name\": \"Tonga\", value: \"to\"}, {\"name\": \"Turkish\", value: \"tr\"}, {\"name\": \"Tsonga\", value: \"ts\"}, {\"name\": \"Tatar\", value: \"tt\"}, {\r\n                                    \"name\": \"Twi\",\r\n                                    value: \"tw\"\r\n                                }, {\"name\": \"Tahitian\", value: \"ty\"}, {\"name\": \"Uyghur\", value: \"ug\"}, {\"name\": \"Ukrainian\", value: \"uk\"}, {\"name\": \"Urdu\", value: \"ur\"}, {\r\n                                    \"name\": \"Uzbek\",\r\n                                    value: \"uz\"\r\n                                }, {\"name\": \"Venda\", value: \"ve\"}, {\"name\": \"Vietnamese\", value: \"vi\"}, {\"name\": \"Volapük\", value: \"vo\"}, {\"name\": \"Walloon\", value: \"wa\"}, {\r\n                                    \"name\": \"Welsh\",\r\n                                    value: \"cy\"\r\n                                }, {\"name\": \"Wolof\", value: \"wo\"}, {\"name\": \"Western Frisian\", value: \"fy\"}, {\"name\": \"Xhosa\", value: \"xh\"}, {\"name\": \"Yiddish\", value: \"yi\"}, {\r\n                                    \"name\": \"Yoruba\",\r\n                                    value: \"yo\"\r\n                                }, {\"name\": \"Zhuang\", value: \"za\"}, {\"name\": \"Zulu\", value: \"zu\"}]\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'userAgent',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'User agent',\r\n                                help: 'Used when accessing indexers',\r\n                                required: true\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'userAgents',\r\n                            type: 'horizontalChips',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Map user agents',\r\n                                help: 'Used to map the user agent from accessing services to the service names. Apply words with return key.'\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {\r\n                        label: 'Result filters'\r\n                    },\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'applyRestrictions',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                label: 'Apply word filters',\r\n                                options: [\r\n                                    {name: 'Internal searches', value: 'INTERNAL'},\r\n                                    {name: 'API searches', value: 'API'},\r\n                                    {name: 'All searches', value: 'BOTH'},\r\n                                    {name: 'Never', value: 'NONE'}\r\n                                ],\r\n                                help: \"For which type of search word/regex filters will be applied\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'forbiddenWords',\r\n                            type: 'horizontalChips',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Forbidden words',\r\n                                help: \"Results with any of these words in the title will be ignored. Title is converted to lowercase before. Apply words with return key.\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'forbiddenRegex',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Forbidden regex',\r\n                                help: 'Must not be present in a title (title is converted to lowercase before)'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'requiredWords',\r\n                            type: 'horizontalChips',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Required words',\r\n                                help: \"Only results with titles that contain *all* words will be used. Title is converted to lowercase before. Apply words with return key.\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'requiredRegex',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Required regex',\r\n                                help: 'Must be present in a title (title is converted to lowercase before)'\r\n                            }\r\n                        },\r\n\r\n                        {\r\n                            key: 'forbiddenGroups',\r\n                            type: 'horizontalChips',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Forbidden groups',\r\n                                help: 'Posts from any groups containing any of these words will be ignored. Apply words with return key.'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'forbiddenPosters',\r\n                            type: 'horizontalChips',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Forbidden posters',\r\n                                help: 'Posts from any posters containing any of these words will be ignored. Apply words with return key.'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'maxAge',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Maximum results age',\r\n                                help: 'Results older than this are ignored. Can be overwritten per search. Apply words with return key.',\r\n                                addonRight: {\r\n                                    text: 'days'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'ignorePassworded',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Ignore passworded releases',\r\n                                help: \"Not all indexers provide this information\"\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {\r\n                        label: 'Result processing'\r\n                    },\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'wrapApiErrors',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Wrap API errors in empty results page',\r\n                                help: 'When enabled accessing tools will think the search was completed successfully but without results'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'duplicateSizeThresholdInPercent',\r\n                            type: 'horizontalPercentInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Duplicate size threshold',\r\n                                required: true,\r\n                                addonRight: {\r\n                                    text: '%'\r\n                                }\r\n\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'duplicateAgeThreshold',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Duplicate age threshold',\r\n                                required: true,\r\n                                addonRight: {\r\n                                    text: 'hours'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'removeTrailing',\r\n                            type: 'horizontalChips',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Remove trailing...',\r\n                                help: 'Removed from title if it ends with either of these. Case insensitive and disregards leading/trailing spaces. Apply words with return key.'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'useOriginalCategories',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Use original categories',\r\n                                help: 'Enable to use the category descriptions provided by the indexer'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'nzbAccessType',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'select',\r\n                                label: 'NZB access type',\r\n                                options: [\r\n                                    {name: 'Proxy NZBs from indexer', value: 'PROXY'},\r\n                                    {name: 'Redirect to the indexer', value: 'REDIRECT'}\r\n                                ],\r\n                                help: \"How access to NZBs is provided when NZBs are downloaded (by the user or external tools). Redirecting is recommended.\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'loadAllCachedOnInternal',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Load all cached results',\r\n                                help: 'Show all cached results when searching internally. Might make sorting / filtering slower'\r\n                            }\r\n                        },\r\n                        {\r\n                            wrapper: 'fieldset',\r\n                            templateOptions: {\r\n                                label: 'Other'\r\n                            },\r\n                            fieldGroup: [\r\n                                {\r\n                                    key: 'keepSearchResultsForDays',\r\n                                    type: 'horizontalInput',\r\n                                    templateOptions: {\r\n                                        type: 'number',\r\n                                        label: 'Store results for ...',\r\n                                        addonRight: {\r\n                                            text: 'days'\r\n                                        },\r\n                                        required: true,\r\n                                        help: 'Meta data from searches is stored in the database. When they\\'re deleted existing links to Hydra become invalid.'\r\n                                    }\r\n                                },\r\n                                {\r\n                                    key: 'showQuickFilterButtons',\r\n                                    type: 'horizontalSwitch',\r\n                                    templateOptions: {\r\n                                        type: 'switch',\r\n                                        label: 'Show quick filter',\r\n                                        help: 'Show quick filter buttons for movie and TV results'\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n\r\n            categoriesConfig: [\r\n                {\r\n                    key: 'enableCategorySizes',\r\n                    type: 'horizontalSwitch',\r\n                    templateOptions: {\r\n                        type: 'switch',\r\n                        label: 'Category sizes',\r\n                        help: \"Preset min and max sizes depending on the selected category\"\r\n                    }\r\n                },\r\n                {\r\n                    type: 'help',\r\n                    templateOptions: {\r\n                        type: 'help',\r\n                        lines: [\r\n                            \"The category configuration is not validated in any way. You can seriously fuck up Hydra's results and overall behavior so take care.\",\r\n                            \"Restrictions will taken from a result's category, not the search request category which may not always be the same.\"\r\n                        ],\r\n                        marginTop: '50px'\r\n                    }\r\n                },\r\n                {\r\n                    type: 'repeatSection',\r\n                    key: 'categories',\r\n                    model: rootModel.categoriesConfig,\r\n                    templateOptions: {\r\n                        btnText: 'Add new category',\r\n                        fields: [\r\n                            {\r\n                                key: 'name',\r\n                                type: 'horizontalInput',\r\n                                templateOptions: {\r\n                                    type: 'text',\r\n                                    label: 'Name',\r\n                                    help: 'Renaming categories might cause problems with repeating searches from the history',\r\n                                    required: true\r\n                                }\r\n                            },\r\n                            {\r\n                                key: 'searchType',\r\n                                type: 'horizontalSelect',\r\n                                templateOptions: {\r\n                                    label: 'Search type',\r\n                                    options: [\r\n                                        {name: 'General', value: 'SEARCH'},\r\n                                        {name: 'Audio', value: 'MUSIC'},\r\n                                        {name: 'EBook', value: 'BOOK'},\r\n                                        {name: 'Movie', value: 'MOVIE'},\r\n                                        {name: 'TV', value: 'TVSEARCH'}\r\n                                    ],\r\n                                    help: \"Determines how indexers will be searched and if autocompletion is available in the GUI\"\r\n                                }\r\n                            },\r\n                            {\r\n                                key: 'subtype',\r\n                                type: 'horizontalSelect',\r\n                                templateOptions: {\r\n                                    label: 'Sub type',\r\n                                    options: [\r\n                                        {name: 'Anime', value: 'ANIME'},\r\n                                        {name: 'Audiobook', value: 'AUDIOBOOK'},\r\n                                        {name: 'Comic', value: 'COMIC'},\r\n                                        {name: 'Ebook', value: 'EBOOK'},\r\n                                        {name: 'None', value: 'NONE'}\r\n                                    ],\r\n                                    help: \"Special search type. Used for indexer specific mappings between categories and newznab IDs\"\r\n                                }\r\n                            },\r\n                            {\r\n                                key: 'requiredWords',\r\n                                type: 'horizontalChips',\r\n                                templateOptions: {\r\n                                    type: 'text',\r\n                                    label: 'Required words',\r\n                                    help: \"Must *all* be present in a title which is converted to lowercase before. Apply words with return key.\"\r\n                                }\r\n                            },\r\n                            {\r\n                                key: 'requiredRegex',\r\n                                type: 'horizontalInput',\r\n                                templateOptions: {\r\n                                    type: 'text',\r\n                                    label: 'Required regex',\r\n                                    help: 'Must be present in a title which is converted to lowercase before'\r\n                                }\r\n                            },\r\n                            {\r\n                                key: 'forbiddenWords',\r\n                                type: 'horizontalChips',\r\n                                templateOptions: {\r\n                                    type: 'text',\r\n                                    label: 'Forbidden words',\r\n                                    help: \"None may be present in a title which is converted to lowercase before. Apply words with return key.\"\r\n                                }\r\n                            },\r\n                            {\r\n                                key: 'forbiddenRegex',\r\n                                type: 'horizontalInput',\r\n                                templateOptions: {\r\n                                    type: 'text',\r\n                                    label: 'Forbidden regex',\r\n                                    help: 'Must not be present in a title which is converted to lowercase before'\r\n                                }\r\n                            },\r\n                            {\r\n                                key: 'applyRestrictionsType',\r\n                                type: 'horizontalSelect',\r\n                                templateOptions: {\r\n                                    label: 'Apply restrictions',\r\n                                    options: [\r\n                                        {name: 'Internal searches', value: 'INTERNAL'},\r\n                                        {name: 'API searches', value: 'API'},\r\n                                        {name: 'All searches', value: 'BOTH'},\r\n                                        {name: 'Never', value: 'NONE'}\r\n                                    ],\r\n                                    help: \"For which type of search word restrictions will be applied\"\r\n                                }\r\n                            },\r\n                            {\r\n                                wrapper: 'settingWrapper',\r\n                                templateOptions: {\r\n                                    label: 'Size preset',\r\n                                    help: \"Will set these values on the search page\"\r\n                                },\r\n                                fieldGroup: [\r\n                                    {\r\n                                        key: 'minSizePreset',\r\n                                        type: 'duoSetting',\r\n                                        templateOptions: {\r\n                                            addonRight: {\r\n                                                text: 'MB'\r\n                                            }\r\n\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        type: 'duolabel'\r\n                                    },\r\n                                    {\r\n                                        key: 'maxSizePreset',\r\n                                        type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                    }\r\n                                ]\r\n                            },\r\n                            {\r\n                                key: 'applySizeLimitsToApi',\r\n                                type: 'horizontalSwitch',\r\n                                templateOptions: {\r\n                                    type: 'switch',\r\n                                    label: 'Limit API results size',\r\n                                    help: \"Enable to apply the size preset to API results from this category\"\r\n                                }\r\n                            },\r\n                            {\r\n                                key: 'newznabCategories',\r\n                                type: 'horizontalChips',\r\n                                templateOptions: {\r\n                                    type: 'text',\r\n                                    label: 'Newznab categories',\r\n                                    help: 'Map newznab categories to Hydra categories. Used for parsing and when searching internally. Apply words with return key.'\r\n                                }\r\n                            },\r\n                            {\r\n                                key: 'ignoreResultsFrom',\r\n                                type: 'horizontalSelect',\r\n                                templateOptions: {\r\n                                    label: 'Ignore results',\r\n                                    options: [\r\n                                        {name: 'For internal searches', value: 'INTERNAL'},\r\n                                        {name: 'For API searches', value: 'API'},\r\n                                        {name: 'For all searches', value: 'BOTH'},\r\n                                        {name: 'Never', value: 'NONE'}\r\n                                    ],\r\n                                    help: \"Ignore results from this category\"\r\n                                }\r\n                            }\r\n\r\n                        ],\r\n                        defaultModel: {\r\n                            name: null,\r\n                            applyRestrictionsType: \"NONE\",\r\n                            forbiddenRegex: null,\r\n                            forbiddenWords: null,\r\n                            ignoreResultsFrom: \"NONE\",\r\n                            mayBeSelected: true,\r\n                            maxSizePreset: null,\r\n                            minSizePreset: null,\r\n                            newznabCategories: [],\r\n                            preselect: true,\r\n                            requiredRegex: null,\r\n                            requiredWords: null,\r\n                            searchType: \"SEARCH\",\r\n                            subType: \"NONE\"\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n\r\n            downloading: [\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {label: 'General'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'saveTorrentsTo',\r\n                            type: 'fileInput',\r\n                            templateOptions: {\r\n                                label: 'Torrent black hole',\r\n                                help: 'When the \"Torrent\" button is clicked torrents will be saved to this folder on the server. Ignored if not set.',\r\n                                type: \"folder\"\r\n                            }\r\n                        }\r\n                    ]\r\n\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'downloaders',\r\n                    templateOptions: {label: 'Downloaders'},\r\n                    fieldGroup: [\r\n                        {\r\n                            type: \"arrayConfig\",\r\n                            data: {\r\n                                defaultModel: {\r\n                                    enabled: true\r\n                                },\r\n                                entryTemplateUrl: 'downloaderEntry.html',\r\n                                presets: function () {\r\n                                    return getDownloaderPresets();\r\n                                },\r\n                                checkAddingAllowed: function () {\r\n                                    return true;\r\n                                },\r\n                                presetsOnly: true,\r\n                                addNewText: 'Add new downloader',\r\n                                fieldsFunction: getDownloaderBoxFields,\r\n                                allowDeleteFunction: function () {\r\n                                    return true;\r\n                                },\r\n                                checkBeforeClose: function (scope, model) {\r\n                                    var DownloaderCheckBeforeCloseService = $injector.get(\"DownloaderCheckBeforeCloseService\");\r\n                                    return DownloaderCheckBeforeCloseService.check(scope, model);\r\n                                },\r\n                                resetFunction: function (scope) {\r\n                                    scope.options.resetModel();\r\n                                    scope.options.resetModel();\r\n                                }\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n\r\n\r\n            indexers: [\r\n                {\r\n                    type: \"arrayConfig\",\r\n                    data: {\r\n                        defaultModel: {\r\n                            allCapsChecked: false,\r\n                            apiKey: null,\r\n                            backend: 'NEWZNAB',\r\n                            configComplete: false,\r\n                            categoryMapping: null,\r\n                            downloadLimit: null,\r\n                            enabled: true,\r\n                            enabledCategories: [],\r\n                            enabledForSearchSource: \"BOTH\",\r\n                            generalMinSize: null,\r\n                            hitLimit: null,\r\n                            hitLimitResetTime: 0,\r\n                            host: null,\r\n                            loadLimitOnRandom: null,\r\n                            name: null,\r\n                            password: null,\r\n                            preselect: true,\r\n                            score: 0,\r\n                            searchModuleType: 'NEWZNAB',\r\n                            searchModuleType: 'NEWZNAB',\r\n                            showOnSearch: true,\r\n                            supportedSearchIds: undefined,\r\n                            supportedSearchTypes: undefined,\r\n                            timeout: null,\r\n                            username: null,\r\n                            userAgent: null\r\n                        },\r\n                        addNewText: 'Add new indexer',\r\n                        entryTemplateUrl: 'indexerEntry.html',\r\n                        presets: function (model) {\r\n                            return getIndexerPresets(model);\r\n                        },\r\n\r\n                        checkAddingAllowed: function (existingIndexers, preset) {\r\n                            if (!preset || !(preset.searchModuleType === \"ANIZB\" || preset.searchModuleType === \"BINSEARCH\" || preset.searchModuleType === \"NZBINDEX\" || preset.searchModuleType === \"NZBCLUB\")) {\r\n                                return true;\r\n                            }\r\n                            return !_.any(existingIndexers, function (existingEntry) {\r\n                                return existingEntry.name === preset.name;\r\n                            });\r\n                        },\r\n                        fieldsFunction: getIndexerBoxFields,\r\n                        allowDeleteFunction: function (model) {\r\n                            return true;\r\n                        },\r\n                        checkBeforeClose: function (scope, model) {\r\n                            var IndexerCheckBeforeCloseService = $injector.get(\"IndexerCheckBeforeCloseService\");\r\n                            return IndexerCheckBeforeCloseService.check(scope, model);\r\n                        },\r\n                        resetFunction: function (scope) {\r\n                            //Then reset the model twice (for some reason when we do it once the search types / ids fields are empty, resetting again fixes that... (wtf))\r\n                            scope.options.resetModel();\r\n                            scope.options.resetModel();\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n            auth: [\r\n                {\r\n                    key: 'authType',\r\n                    type: 'horizontalSelect',\r\n                    templateOptions: {\r\n                        label: 'Auth type',\r\n                        options: [\r\n                            {name: 'None', value: 'NONE'},\r\n                            {name: 'HTTP Basic auth', value: 'BASIC'},\r\n                            {name: 'Login form', value: 'FORM'}\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    key: 'restrictSearch',\r\n                    type: 'horizontalSwitch',\r\n                    templateOptions: {\r\n                        type: 'switch',\r\n                        label: 'Restrict searching',\r\n                        help: 'Restrict access to searching'\r\n                    },\r\n                    hideExpression: function () {\r\n                        return rootModel.auth.authType === \"NONE\";\r\n                    }\r\n                },\r\n                {\r\n                    key: 'restrictStats',\r\n                    type: 'horizontalSwitch',\r\n                    templateOptions: {\r\n                        type: 'switch',\r\n                        label: 'Restrict stats',\r\n                        help: 'Restrict access to stats'\r\n                    },\r\n                    hideExpression: function () {\r\n                        return rootModel.auth.authType === \"NONE\";\r\n                    }\r\n                },\r\n                {\r\n                    key: 'restrictAdmin',\r\n                    type: 'horizontalSwitch',\r\n                    templateOptions: {\r\n                        type: 'switch',\r\n                        label: 'Restrict admin',\r\n                        help: 'Restrict access to admin functions'\r\n                    },\r\n                    hideExpression: function () {\r\n                        return rootModel.auth.authType === \"NONE\";\r\n                    }\r\n                },\r\n                {\r\n                    key: 'restrictDetailsDl',\r\n                    type: 'horizontalSwitch',\r\n                    templateOptions: {\r\n                        type: 'switch',\r\n                        label: 'Restrict NZB details & DL',\r\n                        help: 'Restrict NZB details, comments and download links'\r\n                    },\r\n                    hideExpression: function () {\r\n                        return rootModel.auth.authType === \"NONE\";\r\n                    }\r\n                },\r\n                {\r\n                    key: 'restrictIndexerSelection',\r\n                    type: 'horizontalSwitch',\r\n                    templateOptions: {\r\n                        type: 'switch',\r\n                        label: 'Restrict indexer selection box',\r\n                        help: 'Restrict visibility of indexer selection box in search. Affects only GUI'\r\n                    },\r\n                    hideExpression: function () {\r\n                        return rootModel.auth.authType === \"NONE\";\r\n                    }\r\n                },\r\n                {\r\n                    key: 'rememberUsers',\r\n                    type: 'horizontalSwitch',\r\n                    templateOptions: {\r\n                        type: 'switch',\r\n                        label: 'Remember users',\r\n                        help: 'Remember users with cookie for 14 days'\r\n                    },\r\n                    hideExpression: function () {\r\n                        return rootModel.auth.authType === \"NONE\";\r\n                    }\r\n                },\r\n                {\r\n                    key: 'rememberMeValidityDays',\r\n                    type: 'horizontalInput',\r\n                    templateOptions: {\r\n                        type: 'number',\r\n                        label: 'Cookie expiry',\r\n                        help: 'How long users are remembered',\r\n                        addonRight: {\r\n                            text: 'days'\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    type: 'repeatSection',\r\n                    key: 'users',\r\n                    model: rootModel.auth,\r\n                    hideExpression: function () {\r\n                        return rootModel.auth.authType === \"NONE\";\r\n                    },\r\n                    templateOptions: {\r\n\r\n                        btnText: 'Add new user',\r\n                        altLegendText: 'Authless',\r\n                        fields: [\r\n                            {\r\n                                key: 'username',\r\n                                type: 'horizontalInput',\r\n                                templateOptions: {\r\n                                    type: 'text',\r\n                                    label: 'Username',\r\n                                    required: true\r\n                                }\r\n\r\n                            },\r\n                            {\r\n                                key: 'password',\r\n                                type: 'passwordSwitch',\r\n                                templateOptions: {\r\n                                    type: 'password',\r\n                                    label: 'Password',\r\n                                    required: true\r\n                                }\r\n                            },\r\n                            {\r\n                                key: 'maySeeAdmin',\r\n                                type: 'horizontalSwitch',\r\n                                templateOptions: {\r\n                                    type: 'switch',\r\n                                    label: 'May see admin area'\r\n                                }\r\n                            },\r\n                            {\r\n                                key: 'maySeeStats',\r\n                                type: 'horizontalSwitch',\r\n                                templateOptions: {\r\n                                    type: 'switch',\r\n                                    label: 'May see stats'\r\n                                },\r\n                                hideExpression: 'model.maySeeAdmin'\r\n                            },\r\n                            {\r\n                                key: 'maySeeDetailsDl',\r\n                                type: 'horizontalSwitch',\r\n                                templateOptions: {\r\n                                    type: 'switch',\r\n                                    label: 'May see NZB details & DL links'\r\n                                },\r\n                                hideExpression: 'model.maySeeAdmin'\r\n                            },\r\n                            {\r\n                                key: 'showIndexerSelection',\r\n                                type: 'horizontalSwitch',\r\n                                templateOptions: {\r\n                                    type: 'switch',\r\n                                    label: 'May see indexer selection box'\r\n                                },\r\n                                hideExpression: 'model.maySeeAdmin'\r\n                            }\r\n                        ],\r\n                        defaultModel: {\r\n                            username: null,\r\n                            password: null,\r\n                            maySeeStats: true,\r\n                            maySeeAdmin: true,\r\n                            maySeeDetailsDl: true,\r\n                            showIndexerSelection: true\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\nConfigFields.$inject = [\"$injector\"];\r\n\r\n\r\nfunction getIndexerPresets(configuredIndexers) {\r\n    var presets = [\r\n        [\r\n            {\r\n                name: \"6box\",\r\n                host: \"https://6box.me\"\r\n            },\r\n            {\r\n                name: \"6box spotweb\",\r\n                host: \"https://6box.me/spotweb\"\r\n            },\r\n            {\r\n                name: \"altHUB\",\r\n                host: \"https://api.althub.co.za\"\r\n            }, {\r\n            name: \"dbKitty\",\r\n            host: \"https://dbkitty.club\"\r\n        },\r\n            {\r\n                name: \"DogNZB\",\r\n                host: \"https://api.dognzb.cr\"\r\n            },\r\n            {\r\n                name: \"Drunken Slug\",\r\n                host: \"https://api.drunkenslug.com\"\r\n            },\r\n            {\r\n                name: \"FastNZB\",\r\n                host: \"https://fastnzb.com\"\r\n            },\r\n            {\r\n                name: \"LuluNZB\",\r\n                host: \"https://lulunzb.com\"\r\n            },\r\n            {\r\n                name: \"miatrix\",\r\n                host: \"https://www.miatrix.com\"\r\n            },\r\n            {\r\n                name: \"newz69.keagaming\",\r\n                host: \"https://newz69.keagaming.com\"\r\n            },\r\n            {\r\n                name: \"NewzTown\",\r\n                host: \"https://newztown.co.za\"\r\n            },\r\n            {\r\n                name: \"NZB Finder\",\r\n                host: \"https://nzbfinder.ws\"\r\n            },\r\n            {\r\n                name: \"NZBCat\",\r\n                host: \"https://nzb.cat\"\r\n            },\r\n            {\r\n                name: \"nzb.ag\",\r\n                host: \"https://nzb.ag\"\r\n            },\r\n            {\r\n                name: \"nzb.is\",\r\n                host: \"https://nzb.is\"\r\n            },\r\n            {\r\n                name: \"nzb.su\",\r\n                host: \"https://api.nzb.su\"\r\n            },\r\n            {\r\n                name: \"nzb7\",\r\n                host: \"https://www.nzb7.com\"\r\n            },\r\n            {\r\n                name: \"NZBGeek\",\r\n                host: \"https://api.nzbgeek.info\"\r\n            },\r\n            {\r\n                name: \"NzbNdx\",\r\n                host: \"https://www.nzbndx.com\"\r\n            },\r\n            {\r\n                name: \"NzBNooB\",\r\n                host: \"https://www.nzbnoob.com\"\r\n            },\r\n            {\r\n                name: \"nzbplanet\",\r\n                host: \"https://nzbplanet.net\"\r\n            },\r\n            {\r\n                name: \"NZBs.org\",\r\n                host: \"https://nzbs.org\"\r\n            },\r\n            {\r\n                name: \"NZBs.io\",\r\n                host: \"https://www.nzbs.io\"\r\n            },\r\n            {\r\n                name: \"Nzeeb\",\r\n                host: \"https://www.nzeeb.com\"\r\n            },\r\n            {\r\n                name: \"oznzb\",\r\n                host: \"https://api.oznzb.com\"\r\n            },\r\n            {\r\n                name: \"omgwtfnzbs\",\r\n                host: \"https://api.omgwtfnzbs.me\"\r\n            },\r\n            {\r\n                name: \"PFMonkey\",\r\n                host: \"https://www.pfmonkey.com\"\r\n            },\r\n            {\r\n                name: \"SimplyNZBs\",\r\n                host: \"https://simplynzbs.com\"\r\n            },\r\n            {\r\n                name: \"Tabula-Rasa\",\r\n                host: \"https://www.tabula-rasa.pw\"\r\n            },\r\n            {\r\n                name: \"Usenet-Crawler\",\r\n                host: \"https://www.usenet-crawler.com\"\r\n            }\r\n        ],\r\n        [\r\n            {\r\n                allCapsChecked: true,\r\n                configComplete: true,\r\n                name: \"Jackett/Cardigann\",\r\n                host: \"http://127.0.0.1:9117/api/v2.0/indexers/YOURTRACKER/results/torznab/\",\r\n                supportedSearchIds: undefined,\r\n                supportedSearchTypes: undefined,\r\n                searchModuleType: \"TORZNAB\",\r\n                enabledForSearchSource: \"BOTH\"\r\n            }\r\n        ],\r\n        [\r\n            {\r\n                allCapsChecked: true,\r\n                enabledForSearchSource: \"BOTH\",\r\n                categories: [\"Anime\"],\r\n                configComplete: true,\r\n                downloadLimit: null,\r\n                enabled: false,\r\n                hitLimit: null,\r\n                hitLimitResetTime: null,\r\n                host: \"https://anizb.org\",\r\n                loadLimitOnRandom: null,\r\n                name: \"anizb\",\r\n                password: null,\r\n                preselect: true,\r\n                score: 0,\r\n                supportedSearchIds: [],\r\n                supportedSearchTypes: [],\r\n                showOnSearch: true,\r\n                timeout: null,\r\n                searchModuleType: \"ANIZB\",\r\n                username: null\r\n            },\r\n            {\r\n                allCapsChecked: true,\r\n                enabledForSearchSource: \"INTERNAL\",\r\n                categories: [],\r\n                configComplete: true,\r\n                downloadLimit: null,\r\n                enabled: true,\r\n                hitLimit: null,\r\n                hitLimitResetTime: null,\r\n                host: \"https://binsearch.info\",\r\n                loadLimitOnRandom: null,\r\n                name: \"Binsearch\",\r\n                password: null,\r\n                preselect: true,\r\n                score: 0,\r\n                supportedSearchIds: [],\r\n                supportedSearchTypes: [],\r\n                showOnSearch: true,\r\n                timeout: null,\r\n                searchModuleType: \"BINSEARCH\",\r\n                username: null\r\n            },\r\n            {\r\n                allCapsChecked: true,\r\n                enabledForSearchSource: \"INTERNAL\",\r\n                categories: [],\r\n                configComplete: true,\r\n                downloadLimit: null,\r\n                enabled: true,\r\n                generalMinSize: 1,\r\n                hitLimit: null,\r\n                hitLimitResetTime: null,\r\n                host: \"https://nzbindex.com\",\r\n                loadLimitOnRandom: null,\r\n                name: \"NZBIndex\",\r\n                password: null,\r\n                preselect: true,\r\n                score: 0,\r\n                supportedSearchIds: [],\r\n                supportedSearchTypes: [],\r\n                showOnSearch: true,\r\n                timeout: null,\r\n                searchModuleType: \"NZBINDEX\",\r\n                username: null\r\n            }\r\n        ]\r\n    ];\r\n\r\n    return presets;\r\n}\r\n\r\nfunction getIndexerBoxFields(model, parentModel, isInitial, injector, CategoriesService) {\r\n    var fieldset = [];\r\n    if (model.searchModuleType === \"TORZNAB\") {\r\n        fieldset.push({\r\n            type: 'help',\r\n            templateOptions: {\r\n                type: 'help',\r\n                lines: [\"Torznab indexers can only be used for internal searches or dedicated searches using /torznab/api\"]\r\n            }\r\n        });\r\n    } else if ((model.searchModuleType === \"NEWZNAB\" || model.searchModuleType === \"TORZNAB\") && !isInitial) {\r\n        var message;\r\n        var cssClass;\r\n        if (!model.configComplete) {\r\n            message = \"The config of this indexer is incomplete. Please click the button at the bottom to check its capabilities and complete its configuration.\";\r\n            cssClass = \"alert alert-danger\";\r\n        } else {\r\n            message = \"The capabilities of this indexer were not checked completely. Some actually supported search types or IDs may not be usable.\";\r\n            cssClass = \"alert alert-warning\";\r\n        }\r\n        fieldset.push({\r\n            type: 'help',\r\n            hideExpression: 'model.allCapsChecked && model.configComplete',\r\n            templateOptions: {\r\n                type: 'help',\r\n                lines: [message],\r\n                class: cssClass\r\n            }\r\n        });\r\n    }\r\n\r\n    fieldset.push({\r\n        key: 'enabled',\r\n        type: 'horizontalSwitch',\r\n        hideExpression: '!model.configComplete',\r\n        templateOptions: {\r\n            type: 'switch',\r\n            label: 'Enabled'\r\n        }\r\n    });\r\n\r\n    if (model.searchModuleType === 'NEWZNAB' || model.searchModuleType === 'TORZNAB') {\r\n        fieldset.push(\r\n            {\r\n                key: 'name',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'text',\r\n                    label: 'Name',\r\n                    required: true,\r\n                    help: 'Used for identification. Changing the name will lose all history and stats!'\r\n                },\r\n                validators: {\r\n                    uniqueName: {\r\n                        expression: function (viewValue) {\r\n                            if (isInitial || viewValue !== model.name) {\r\n                                return _.pluck(parentModel, \"name\").indexOf(viewValue) === -1;\r\n                            }\r\n                            return true;\r\n                        },\r\n                        message: '\"Indexer \\\\\"\" + $viewValue + \"\\\\\" already exists\"'\r\n                    },\r\n                    noComma:\r\n                        {\r\n                            expression: function ($viewValue, $modelValue) {\r\n                                var value = $modelValue || $viewValue;\r\n                                if (value) {\r\n                                    return value.indexOf(\",\") === -1;\r\n                                }\r\n                                return true;\r\n                            },\r\n                            message: '\"Name may not contain a comma\"'\r\n                        }\r\n                }\r\n            })\r\n    }\r\n    if (model.searchModuleType === 'NEWZNAB' || model.searchModuleType === 'TORZNAB') {\r\n        var hostField = {\r\n            key: 'host',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'text',\r\n                label: 'Host',\r\n                required: true,\r\n                placeholder: 'http://www.someindexer.com'\r\n            },\r\n            watcher: {\r\n                listener: function (field, newValue, oldValue, scope) {\r\n                    if (newValue !== oldValue) {\r\n                        scope.$parent.needsConnectionTest = true;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        if (model.searchModuleType === 'TORZNAB') {\r\n            hostField.templateOptions.help = 'If you use Jackett and have an external URL use that one';\r\n        }\r\n        fieldset.push(\r\n            hostField\r\n        );\r\n    }\r\n\r\n    if (model.searchModuleType === 'NEWZNAB' || model.searchModuleType === 'TORZNAB') {\r\n        fieldset.push(\r\n            {\r\n                key: 'apiKey',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'text',\r\n                    label: 'API Key'\r\n                },\r\n                watcher: {\r\n                    listener: function (field, newValue, oldValue, scope) {\r\n                        if (newValue !== oldValue) {\r\n                            scope.$parent.needsConnectionTest = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    fieldset.push(\r\n        {\r\n            key: 'score',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'number',\r\n                label: 'Priority',\r\n                required: true,\r\n                help: 'When duplicate search results are found the result from the indexer with the highest number will be selected'\r\n            }\r\n        });\r\n\r\n    fieldset.push(\r\n        {\r\n            key: 'timeout',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'number',\r\n                label: 'Timeout',\r\n                help: 'Supercedes the general timeout in \"Searching\"'\r\n            }\r\n        },\r\n        {\r\n            key: 'schedule',\r\n            type: 'horizontalChips',\r\n            templateOptions: {\r\n                type: 'text',\r\n                label: 'Schedule',\r\n                help: 'Determines when an indexer should be selected. See <a href=\"https://github.com/theotherp/nzbhydra2/wiki/Indexer-schedules\" target=\"_blank\">wiki</a>. You can enter multiple time spans. Apply values with return key.'\r\n            }\r\n        }\r\n    );\r\n\r\n    if (model.searchModuleType === 'NEWZNAB' || model.searchModuleType === 'TORZNAB') {\r\n        fieldset.push(\r\n            {\r\n                key: 'hitLimit',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    label: 'API hit limit',\r\n                    help: 'Maximum number of API hits since \"API hit reset time\"'\r\n                }\r\n            },\r\n            {\r\n                key: 'downloadLimit',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    label: 'Download limit',\r\n                    help: 'When # of downloads since \"Hit reset time\" is reached indexer will not be searched.'\r\n                }\r\n            }\r\n        );\r\n        fieldset.push(\r\n            {\r\n                key: 'loadLimitOnRandom',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    label: 'Load limiting',\r\n                    help: 'If set indexer will only be picked for one out of x API searches (on average)'\r\n                },\r\n                validators: {\r\n                    greaterThanZero: {\r\n                        expression: function ($viewValue, $modelValue) {\r\n                            var value = $modelValue || $viewValue;\r\n                            return angular.isUndefined(value) || value === null || value === \"\" || value > 1;\r\n                        },\r\n                        message: '\"Value must be greater than 1\"'\r\n                    }\r\n\r\n                }\r\n            },\r\n            {\r\n                key: 'hitLimitResetTime',\r\n                type: 'horizontalInput',\r\n                hideExpression: '!model.hitLimit && !model.downloadLimit',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    label: 'Hit reset time',\r\n                    help: 'UTC hour of day at which the API hit counter is reset (0-23). Leave empty for a rolling reset counter'\r\n                },\r\n                validators: {\r\n                    timeOfDay: {\r\n                        expression: function ($viewValue, $modelValue) {\r\n                            var value = $modelValue || $viewValue;\r\n                            return value >= 0 && value <= 23;\r\n                        },\r\n                        message: '$viewValue + \" is not a valid hour of day (0-23)\"'\r\n                    }\r\n\r\n                }\r\n            });\r\n    }\r\n    if (model.searchModuleType === 'NEWZNAB') {\r\n        fieldset.push(\r\n            {\r\n                key: 'username',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'text',\r\n                    required: false,\r\n                    label: 'Username',\r\n                    help: 'Only needed if indexer requires HTTP auth for API access (rare)'\r\n                },\r\n                watcher: {\r\n                    listener: function (field, newValue, oldValue, scope) {\r\n                        if (newValue !== oldValue) {\r\n                            scope.$parent.needsConnectionTest = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n    if (model.searchModuleType === 'NEWZNAB') {\r\n        fieldset.push(\r\n            {\r\n                key: 'password',\r\n                type: 'passwordSwitch',\r\n                hideExpression: '!model.username',\r\n                templateOptions: {\r\n                    type: 'text',\r\n                    required: false,\r\n                    label: 'Password',\r\n                    help: 'Only needed if indexer requires HTTP auth for API access (rare)'\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    if (model.searchModuleType === 'NEWZNAB') {\r\n        fieldset.push(\r\n            {\r\n                key: 'userAgent',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'text',\r\n                    required: false,\r\n                    label: 'User agent',\r\n                    help: 'Rarely needed. Will supercede the one in the main searching settings'\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    fieldset.push(\r\n        {\r\n            key: 'preselect',\r\n            type: 'horizontalSwitch',\r\n            hideExpression: 'model.enabledForSearchSource===\"EXTERNAL\"',\r\n            templateOptions: {\r\n                type: 'switch',\r\n                label: 'Preselect',\r\n                help: 'Preselect this indexer on the search page'\r\n            }\r\n        }\r\n    );\r\n    fieldset.push(\r\n        {\r\n            key: 'enabledForSearchSource',\r\n            type: 'horizontalSelect',\r\n            templateOptions: {\r\n                label: 'Enable for...',\r\n                options: [\r\n                    {name: 'Internal searches only', value: 'INTERNAL'},\r\n                    {name: 'API searches only', value: 'API'},\r\n                    {name: 'Internal and API searches', value: 'BOTH'}\r\n                ]\r\n            }\r\n        }\r\n    );\r\n\r\n    if (model.searchModuleType !== \"ANIZB\") {\r\n        var cats = CategoriesService.getWithoutAll();\r\n        var options = _.map(cats, function (x) {\r\n            return {id: x.name, label: x.name}\r\n        });\r\n        fieldset.push(\r\n            {\r\n                key: 'enabledCategories',\r\n                type: 'horizontalMultiselect',\r\n                templateOptions: {\r\n                    label: 'Enable for...',\r\n                    help: 'Only use indexer for these and also reject results from others',\r\n                    options: options,\r\n                    getPlaceholder: function () {\r\n                        return \"All categories\";\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    if (model.searchModuleType === 'NEWZNAB' || model.searchModuleType === 'TORZNAB') {\r\n        fieldset.push(\r\n            {\r\n                key: 'supportedSearchIds',\r\n                type: 'horizontalMultiselect',\r\n                templateOptions: {\r\n                    label: 'Search IDs',\r\n                    options: [\r\n                        {label: 'TVDB', id: 'TVDB'},\r\n                        {label: 'TVRage', id: 'TVRAGE'},\r\n                        {label: 'IMDB', id: 'IMDB'},\r\n                        {label: 'Trakt', id: 'TRAKT'},\r\n                        {label: 'TVMaze', id: 'TVMAZE'},\r\n                        {label: 'TMDB', id: 'TMDB'}\r\n                    ],\r\n                    getPlaceholder: function (model) {\r\n                        if (angular.isUndefined(model)) {\r\n                            return \"Unknown\";\r\n                        }\r\n                        return \"None\";\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n    if (model.searchModuleType === 'NEWZNAB' || model.searchModuleType === 'TORZNAB') {\r\n        fieldset.push(\r\n            {\r\n                key: 'supportedSearchTypes',\r\n                type: 'horizontalMultiselect',\r\n                templateOptions: {\r\n                    label: 'Search types',\r\n                    options: [\r\n                        {label: 'Movies', id: 'MOVIE'},\r\n                        {label: 'TV', id: 'TVSEARCH'},\r\n                        {label: 'Ebooks', id: 'BOOK'},\r\n                        {label: 'Audio', id: 'AUDIO'}\r\n                    ],\r\n                    getPlaceholder: function (model) {\r\n                        if (angular.isUndefined(model)) {\r\n                            return \"Unknown\";\r\n                        }\r\n                        return \"None\";\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    if (model.searchModuleType === 'NEWZNAB' || model.searchModuleType === 'TORZNAB') {\r\n        fieldset.push(\r\n            {\r\n                type: 'horizontalCheckCaps',\r\n                hideExpression: '!model.host || !model.apiKey || !model.name',\r\n                templateOptions: {\r\n                    label: 'Check capabilities',\r\n                    help: 'Find out what search types and IDs the indexer supports. Done automatically for new indexers.'\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    if (model.searchModuleType === 'nzbindex') {\r\n        fieldset.push(\r\n            {\r\n                key: 'generalMinSize',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    label: 'Min size',\r\n                    help: 'NZBIndex returns a lot of crap with small file sizes. Set this value and all smaller results will be filtered out no matter the category'\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    return fieldset;\r\n}\r\n\r\n\r\nfunction getDownloaderBoxFields(model, parentModel, isInitial) {\r\n    var fieldset = [];\r\n\r\n    fieldset = _.union(fieldset, [\r\n        {\r\n            key: 'enabled',\r\n            type: 'horizontalSwitch',\r\n            templateOptions: {\r\n                type: 'switch',\r\n                label: 'Enabled'\r\n            }\r\n        },\r\n        {\r\n            key: 'name',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'text',\r\n                label: 'Name',\r\n                required: true\r\n            },\r\n            validators: {\r\n                uniqueName: {\r\n                    expression: function (viewValue) {\r\n                        if (isInitial || viewValue !== model.name) {\r\n                            return _.pluck(parentModel, \"name\").indexOf(viewValue) === -1;\r\n                        }\r\n                        return true;\r\n                    },\r\n                    message: '\"Downloader \\\\\"\" + $viewValue + \"\\\\\" already exists\"'\r\n                }\r\n            }\r\n\r\n        },\r\n        {\r\n            key: 'url',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'text',\r\n                label: 'URL',\r\n                help: 'URL with scheme and full path',\r\n                required: true\r\n            },\r\n            watcher: {\r\n                listener: function (field, newValue, oldValue, scope) {\r\n                    if (newValue !== oldValue) {\r\n                        scope.$parent.needsConnectionTest = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    ]);\r\n\r\n\r\n    if (model.downloaderType === \"SABNZBD\") {\r\n        fieldset.push({\r\n            key: 'apiKey',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'text',\r\n                label: 'API Key'\r\n            },\r\n            watcher: {\r\n                listener: function (field, newValue, oldValue, scope) {\r\n                    if (newValue !== oldValue) {\r\n                        scope.$parent.needsConnectionTest = true;\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    } else if (model.downloaderType === \"NZBGET\") {\r\n        fieldset.push({\r\n            key: 'username',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'text',\r\n                label: 'Username'\r\n            },\r\n            watcher: {\r\n                listener: function (field, newValue, oldValue, scope) {\r\n                    if (newValue !== oldValue) {\r\n                        scope.$parent.needsConnectionTest = true;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        fieldset.push({\r\n            key: 'password',\r\n            type: 'passwordSwitch',\r\n            templateOptions: {\r\n                type: 'text',\r\n                label: 'Password'\r\n            },\r\n            watcher: {\r\n                listener: function (field, newValue, oldValue, scope) {\r\n                    if (newValue !== oldValue) {\r\n                        scope.$parent.needsConnectionTest = true;\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    fieldset = _.union(fieldset, [\r\n        {\r\n            key: 'defaultCategory',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'text',\r\n                label: 'Default category',\r\n                help: 'When adding NZBs this category will be used instead of asking for the category. Write \"No category\" to let the downloader decide.',\r\n                placeholder: 'Ask when downloading'\r\n            }\r\n        },\r\n        {\r\n            key: 'nzbAccessType',\r\n            type: 'horizontalSelect',\r\n            templateOptions: {\r\n                type: 'select',\r\n                label: 'NZB access type',\r\n                options: [\r\n                    {name: 'Proxy NZBs from indexer', value: 'PROXY'},\r\n                    {name: 'Redirect to the indexer', value: 'REDIRECT'}\r\n                ],\r\n                help: \"How external access to NZBs is provided. Redirecting is recommended.\"\r\n            }\r\n        },\r\n        {\r\n            key: 'nzbAddingType',\r\n            type: 'horizontalSelect',\r\n            templateOptions: {\r\n                type: 'select',\r\n                label: 'NZB adding type',\r\n                options: [\r\n                    {name: 'Send link', value: 'SEND_LINK'},\r\n                    {name: 'Upload NZB', value: 'UPLOAD'}\r\n                ],\r\n                help: \"How NZBs are added to the downloader, either by sending a link to the NZB or by uploading the NZB data\"\r\n            }\r\n        },\r\n        {\r\n            key: 'iconCssClass',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'text',\r\n                label: 'Icon CSS class',\r\n                help: 'Copy an icon name from http://fontawesome.io/examples/ (e.g. \"film\")',\r\n                placeholder: 'Default'\r\n            }\r\n        }\r\n    ]);\r\n\r\n    return fieldset;\r\n}\r\n\r\nfunction getDownloaderPresets() {\r\n    return [[\r\n        {\r\n            name: \"NZBGet\",\r\n            downloaderType: \"NZBGET\",\r\n            username: \"nzbgetx\",\r\n            nzbAddingType: \"SEND_LINK\",\r\n            nzbAccessType: \"REDIRECT\",\r\n            iconCssClass: \"\",\r\n            downloadType: \"NZB\",\r\n            url: \"http://nzbget:tegbzn6789@localhost:6789\"\r\n        },\r\n        {\r\n            url: \"http://localhost:8086\",\r\n            downloaderType: \"SABNZBD\",\r\n            name: \"SABnzbd\",\r\n            nzbAddingType: \"SEND_LINK\",\r\n            nzbAccessType: \"REDIRECT\",\r\n            iconCssClass: \"\",\r\n            downloadType: \"NZB\"\r\n        }\r\n    ]];\r\n}\r\n\r\nfunction handleConnectionCheckFail(ModalService, data, model, whatFailed, deferred) {\r\n    var message;\r\n    var yesText;\r\n    if (data.checked) {\r\n        message = \"The connection to the \" + whatFailed + \" failed: \" + data.message + \"<br>Do you want to add it anyway?\";\r\n        yesText = \"I know what I'm doing\";\r\n    } else {\r\n        message = \"The connection to the \" + whatFailed + \" could not be tested, sorry. Please check the log.\";\r\n        yesText = \"I'll risk it\";\r\n    }\r\n    ModalService.open(\"Connection check failed\", message, {\r\n        yes: {\r\n            onYes: function () {\r\n                deferred.resolve();\r\n            },\r\n            text: yesText\r\n        },\r\n        no: {\r\n            onNo: function () {\r\n                model.enabled = false;\r\n                deferred.resolve();\r\n            },\r\n            text: \"Add it, but disabled\"\r\n        },\r\n        cancel: {\r\n            onCancel: function () {\r\n                deferred.reject();\r\n            },\r\n            text: \"Aahh, let me try again\"\r\n        }\r\n    });\r\n}\r\n\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .factory('IndexerCheckBeforeCloseService', IndexerCheckBeforeCloseService);\r\n\r\nfunction IndexerCheckBeforeCloseService($q, ModalService, ConfigBoxService, growl, blockUI) {\r\n\r\n    return {\r\n        check: checkBeforeClose\r\n    };\r\n\r\n    function checkBeforeClose(scope, model) {\r\n        var deferred = $q.defer();\r\n        if (!scope.isInitial && (!scope.needsConnectionTest || scope.form.capsChecked)) {\r\n            checkCapsWhenClosing(scope, model).then(function () {\r\n                deferred.resolve(model);\r\n            }, function () {\r\n                deferred.reject();\r\n            });\r\n        } else {\r\n            blockUI.start(\"Testing connection...\");\r\n            scope.spinnerActive = true;\r\n            var url = \"internalapi/indexer/checkConnection\";\r\n            ConfigBoxService.checkConnection(url, model).then(function () {\r\n                    growl.info(\"Connection to the indexer tested successfully\");\r\n                    checkCapsWhenClosing(scope, model).then(function (data) {\r\n                        blockUI.reset();\r\n                        scope.spinnerActive = false;\r\n                        deferred.resolve(data);\r\n                    }, function () {\r\n                        blockUI.reset();\r\n                        scope.spinnerActive = false;\r\n                        deferred.reject();\r\n                    });\r\n                },\r\n                function (data) {\r\n                    blockUI.reset();\r\n                    handleConnectionCheckFail(ModalService, data, model, \"indexer\", deferred);\r\n                });\r\n        }\r\n        return deferred.promise;\r\n\r\n    }\r\n\r\n    //Called when the indexer dialog is closed\r\n    function checkCapsWhenClosing(scope, model) {\r\n        var deferred = $q.defer();\r\n        var url = \"internalapi/indexer/checkCaps\";\r\n        if (angular.isUndefined(model.supportedSearchIds) || angular.isUndefined(model.supportedSearchTypes)) {\r\n\r\n            blockUI.start(\"New indexer found. Testing its capabilities. This may take a bit...\");\r\n            ConfigBoxService.checkCaps(url, model).then(\r\n                function (data) {\r\n                    blockUI.reset();\r\n                    scope.spinnerActive = false;\r\n                    if (data.allCapsChecked && data.configComplete) {\r\n                        growl.info(\"Successfully tested capabilites of indexer\");\r\n                    } else if (!data.allCapsChecked && data.configComplete) {\r\n                        ModalService.open(\"Incomplete caps check\", \"The capabilities of the indexer could not be checked completely. You may use it but it's recommended to repeat the check at another time.<br>Until then some search types or IDs may not be usable.\", {}, \"md\", \"left\");\r\n                    } else if (!data.configComplete) {\r\n                        ModalService.open(\"Error testing capabilities\", \"An error occurred while contacting the indexer. It will not be usable until the caps check has been executed. You can trigger it manually from the indexer config box\", {}, \"md\", \"left\");\r\n                    }\r\n\r\n                    deferred.resolve(data.indexerConfig);\r\n                },\r\n                function () {\r\n                    blockUI.reset();\r\n                    scope.spinnerActive = false;\r\n                    model.supportedSearchIds = undefined;\r\n                    model.supportedSearchTypes = undefined;\r\n                    ModalService.open(\"Error testing capabilities\", \"An error occurred while contacting the indexer. It will not be usable until the caps check has been executed. You can trigger it manually using the button below.\", {}, \"md\", \"left\");\r\n                    deferred.resolve();\r\n                }).finally(\r\n                function () {\r\n                    scope.spinnerActive = false;\r\n                })\r\n        } else {\r\n            deferred.resolve();\r\n        }\r\n        return deferred.promise;\r\n\r\n    }\r\n}\r\nIndexerCheckBeforeCloseService.$inject = [\"$q\", \"ModalService\", \"ConfigBoxService\", \"growl\", \"blockUI\"];\r\n\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .factory('DownloaderCheckBeforeCloseService', DownloaderCheckBeforeCloseService);\r\n\r\nfunction DownloaderCheckBeforeCloseService($q, ConfigBoxService, growl, ModalService, blockUI) {\r\n\r\n    return {\r\n        check: checkBeforeClose\r\n    };\r\n\r\n    function checkBeforeClose(scope, model) {\r\n        var deferred = $q.defer();\r\n        if (!scope.isInitial && !scope.needsConnectionTest) {\r\n            deferred.resolve();\r\n        } else {\r\n            scope.spinnerActive = true;\r\n            blockUI.start(\"Testing connection...\");\r\n            var url = \"internalapi/downloader/checkConnection\";\r\n            ConfigBoxService.checkConnection(url, JSON.stringify(model)).then(function () {\r\n                    blockUI.reset();\r\n                    scope.spinnerActive = false;\r\n                    growl.info(\"Connection to the downloader tested successfully\");\r\n                    deferred.resolve();\r\n                },\r\n                function (data) {\r\n                    blockUI.reset();\r\n                    scope.spinnerActive = false;\r\n                    handleConnectionCheckFail(ModalService, data, model, \"downloader\", deferred);\r\n                }).finally(function () {\r\n                scope.spinnerActive = false;\r\n                blockUI.reset();\r\n            });\r\n        }\r\n        return deferred.promise;\r\n    }\r\n\r\n}\r\nDownloaderCheckBeforeCloseService.$inject = [\"$q\", \"ConfigBoxService\", \"growl\", \"ModalService\", \"blockUI\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigModel', function () {\r\n        return {};\r\n    });\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigWatcher', function () {\r\n        var $scope;\r\n\r\n        return {\r\n            watch: watch\r\n        };\r\n\r\n        function watch(scope) {\r\n            $scope = scope;\r\n            $scope.$watchGroup([\"config.main.host\"], function () {\r\n            }, true);\r\n        }\r\n    });\r\n\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('ConfigController', ConfigController);\r\n\r\nfunction ConfigController($scope, $http, activeTab, ConfigService, config, DownloaderCategoriesService, ConfigFields, ConfigModel, ModalService, RestartService, localStorageService, $state, growl) {\r\n    $scope.config = config;\r\n    $scope.submit = submit;\r\n    $scope.activeTab = activeTab;\r\n\r\n    $scope.restartRequired = false;\r\n    $scope.ignoreSaveNeeded = false;\r\n\r\n\r\n    function updateAndAskForRestartIfNecessary() {\r\n        if (angular.isUndefined($scope.form)) {\r\n            console.error(\"Unable to determine if a restart is necessary\");\r\n            return;\r\n        }\r\n\r\n        $scope.form.$setPristine();\r\n        DownloaderCategoriesService.invalidate();\r\n        if ($scope.restartRequired) {\r\n            ModalService.open(\"Restart required\", \"The changes you have made may require a restart to be effective.<br>Do you want to restart now?\", {\r\n                yes: {\r\n                    onYes: function () {\r\n                        RestartService.restart();\r\n                    }\r\n                },\r\n                no: {\r\n                    onNo: function ($uibModalInstance) {\r\n                        //Needs to be clicked twice for some reason\r\n                        $scope.restartRequired = false;\r\n                        $uibModalInstance.dismiss();\r\n                        $uibModalInstance.dismiss();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleConfigSetResponse(response, ignoreWarnings, restartNeeded) {\r\n        if (angular.isUndefined(ignoreWarnings)) {\r\n            ignoreWarnings = localStorageService.get(\"ignoreWarnings\") !== null ? localStorageService.get(\"ignoreWarnings\") : false;\r\n        }\r\n        //Communication with server was successful but there might be validation errors and/or warnings\r\n        var warningMessages = response.data.warningMessages;\r\n        var errorMessages = response.data.errorMessages;\r\n        $scope.restartRequired = response.data.restartNeeded || (angular.isDefined(restartNeeded) ? restartNeeded : false);\r\n        var showMessage = errorMessages.length > 0 || (warningMessages.length > 0 && !ignoreWarnings);\r\n\r\n        function extendMessageWithList(message, messages) {\r\n            _.forEach(messages, function (x) {\r\n                message += \"<li>\" + x + \"</li>\";\r\n            });\r\n            message += \"</ul></span>\";\r\n            return message;\r\n        }\r\n\r\n        if (showMessage) {\r\n            var options;\r\n            var message;\r\n            var title;\r\n            if (errorMessages.length > 0) { //Actual errors which cannot be ignored\r\n                title = \"Config validation failed\";\r\n                message = '<span class=\"error\">The following errors have been found in your config. They need to be fixed.<ul>';\r\n                message = extendMessageWithList(message, response.data.errorMessages);\r\n                if (warningMessages.length > 0) {\r\n                    message += '<br><span class=\"warning\">The following warnings were found. You can ignore them if you wish.<ul>';\r\n                    message = extendMessageWithList(message, response.data.warningMessages);\r\n                }\r\n                options = {\r\n                    yes: {\r\n                        onYes: function () {\r\n                        },\r\n                        text: \"OK\"\r\n                    }\r\n                };\r\n            } else if (warningMessages.length > 0) {\r\n                title = \"Config validation warnings\";\r\n                message = '<br><span class=\"warning\">The following warnings have been found. You can ignore them if you wish. The config was already saved.<ul>';\r\n                message = extendMessageWithList(message, response.data.warningMessages);\r\n                options = {\r\n                    cancel: {\r\n                        onCancel: function () {\r\n                            $scope.form.$setPristine();\r\n                            localStorageService.set(\"ignoreWarnings\", true);\r\n                            ConfigService.set($scope.config, true).then(function (response) {\r\n                                handleConfigSetResponse(response, true, $scope.restartRequired);\r\n                                updateAndAskForRestartIfNecessary();\r\n                            }, function (response) {\r\n                                //Actual error while setting or validating config\r\n                                growl.error(response.data);\r\n                            });\r\n                        },\r\n                        text: \"OK, don't show warnings again\"\r\n                    },\r\n                    yes: {\r\n                        onYes: function () {\r\n                            handleConfigSetResponse(response, true, $scope.restartRequired);\r\n                            updateAndAskForRestartIfNecessary();\r\n                        },\r\n                        text: \"OK\"\r\n                    }\r\n                };\r\n            }\r\n\r\n            ModalService.open(title, message, options, \"md\", \"left\");\r\n        } else {\r\n            updateAndAskForRestartIfNecessary();\r\n        }\r\n    }\r\n\r\n    function submit() {\r\n        if ($scope.form.$valid) {\r\n            ConfigService.set($scope.config, true).then(function (response) {\r\n                handleConfigSetResponse(response);\r\n            }, function (response) {\r\n                //Actual error while setting or validating config\r\n                growl.error(response.data);\r\n            });\r\n\r\n        } else {\r\n            growl.error(\"Config invalid. Please check your settings.\");\r\n\r\n            //Ridiculously hacky way to make the error messages appear\r\n            try {\r\n                if (angular.isDefined(form.$error.required)) {\r\n                    _.each(form.$error.required, function (item) {\r\n                        if (angular.isDefined(item.$error.required)) {\r\n                            _.each(item.$error.required, function (item2) {\r\n                                item2.$setTouched();\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n                angular.forEach($scope.form.$error.required, function (field) {\r\n                    field.$setTouched();\r\n                });\r\n            } catch (err) {\r\n                //\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    ConfigModel = config;\r\n\r\n    $scope.fields = ConfigFields.getFields($scope.config);\r\n\r\n    $scope.allTabs = [\r\n        {\r\n            active: false,\r\n            state: 'root.config.main',\r\n            name: 'Main',\r\n            model: ConfigModel.main,\r\n            fields: $scope.fields.main,\r\n            options: {}\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.config.auth',\r\n            name: 'Authorization',\r\n            model: ConfigModel.auth,\r\n            fields: $scope.fields.auth,\r\n            options: {}\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.config.searching',\r\n            name: 'Searching',\r\n            model: ConfigModel.searching,\r\n            fields: $scope.fields.searching,\r\n            options: {}\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.config.categories',\r\n            name: 'Categories',\r\n            model: ConfigModel.categoriesConfig,\r\n            fields: $scope.fields.categoriesConfig,\r\n            options: {}\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.config.downloading',\r\n            name: 'Downloading',\r\n            model: ConfigModel.downloading,\r\n            fields: $scope.fields.downloading,\r\n            options: {}\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.config.indexers',\r\n            name: 'Indexers',\r\n            model: ConfigModel.indexers,\r\n            fields: $scope.fields.indexers,\r\n            options: {}\r\n        }\r\n    ];\r\n\r\n    $scope.isSavingNeeded = function () {\r\n        return $scope.form.$dirty && $scope.form.$valid && !$scope.ignoreSaveNeeded;\r\n    };\r\n\r\n    $scope.goToConfigState = function (index) {\r\n        $state.go($scope.allTabs[index].state, {activeTab: index}, {inherit: false, notify: true, reload: true});\r\n    };\r\n\r\n    $scope.help = function () {\r\n        var tabName = $scope.allTabs[$scope.activeTab].name;\r\n        $http.get(\"internalapi/help/\" + tabName).then(function (result) {\r\n                var html = '<span style=\"text-align: left;\">' + result.data + \"</span>\";\r\n                ModalService.open(tabName + \" - Help\", html, {}, \"lg\");\r\n            },\r\n            function () {\r\n                growl.error(\"Error while loading help\")\r\n            })\r\n    };\r\n\r\n    $scope.$on('$stateChangeStart',\r\n        function (event, toState, toParams, fromState, fromParams) {\r\n            if ($scope.isSavingNeeded()) {\r\n                event.preventDefault();\r\n                ModalService.open(\"Unsaved changed\", \"Do you want to save before leaving?\", {\r\n                    yes: {\r\n                        onYes: function () {\r\n                            $scope.submit();\r\n                            $state.go(toState);\r\n                        },\r\n                        text: \"Yes\"\r\n                    },\r\n                    no: {\r\n                        onNo: function () {\r\n                            $scope.ignoreSaveNeeded = true;\r\n                            $scope.allTabs[$scope.activeTab].options.resetModel();\r\n                            $state.go(toState);\r\n                        },\r\n                        text: \"No\"\r\n                    },\r\n                    cancel: {\r\n                        onCancel: function () {\r\n                            event.preventDefault();\r\n                        },\r\n                        text: \"Cancel\"\r\n                    }\r\n                });\r\n            }\r\n        })\r\n}\r\nConfigController.$inject = [\"$scope\", \"$http\", \"activeTab\", \"ConfigService\", \"config\", \"DownloaderCategoriesService\", \"ConfigFields\", \"ConfigModel\", \"ModalService\", \"RestartService\", \"localStorageService\", \"$state\", \"growl\"];\r\n\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('CategoriesService', CategoriesService);\r\n\r\nfunction CategoriesService(ConfigService) {\r\n\r\n    return {\r\n        getByName: getByName,\r\n        getAllCategories: getAllCategories,\r\n        getDefault: getDefault,\r\n        getWithoutAll: getWithoutAll\r\n    };\r\n\r\n\r\n    function getByName(name) {\r\n        for (var cat in ConfigService.getSafe().categoriesConfig.categories) {\r\n            var category = ConfigService.getSafe().categoriesConfig.categories[cat];\r\n            if (category.name === name) {\r\n                return category;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAllCategories() {\r\n        return ConfigService.getSafe().categoriesConfig.categories;\r\n    }\r\n\r\n    function getWithoutAll() {\r\n        var cats = ConfigService.getSafe().categoriesConfig.categories;\r\n        return cats.slice(1, cats.length);\r\n    }\r\n\r\n    function getDefault() {\r\n        return getAllCategories()[0];\r\n    }\r\n\r\n}\r\nCategoriesService.$inject = [\"ConfigService\"];","angular\r\n    .module('nzbhydraApp')\r\n    .factory('BackupService', BackupService);\r\n\r\nfunction BackupService($http) {\r\n\r\n    return {\r\n        getBackupsList: getBackupsList,\r\n        restoreFromFile: restoreFromFile\r\n    };\r\n\r\n\r\n    function getBackupsList() {\r\n        return $http.get('internalapi/backup/list').then(function (data) {\r\n            return data.data;\r\n        });\r\n    }\r\n\r\n    function restoreFromFile(filename) {\r\n        return $http.get('internalapi/backup/restore', {params: {filename: filename}}).then(function (response) {\r\n            return response;\r\n        });\r\n    }\r\n\r\n}\r\nBackupService.$inject = [\"$http\"];"],"sourceRoot":"/source/"}