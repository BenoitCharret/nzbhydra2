{"version":3,"sources":["nzbhydra.js","directives/tasks.js","directives/tab-or-chart.js","directives/send-torrent-to-blackhole.js","directives/selection-button.js","directives/search-result.js","directives/on-finish-render.js","directives/multiselect-dropdown.js","directives/indexer-selection-button.js","directives/indexer-input.js","directives/hydra-updates.js","directives/hydra-news.js","directives/hydra-log.js","directives/focus-on.js","directives/download-nzbzip-button.js","directives/download-nzbs-button.js","directives/dataTableDirectives.js","directives/connection-test.js","directives/click-outside.js","directives/cfg-form-entry.js","directives/backup.js","directives/addable-nzbs.js","directives/addable-nzb.js","update-service.js","update-footer-controller.js","system-controller.js","stats-service.js","stats-controller.js","search-service.js","search-results-controller.js","search-history-service.js","search-history-controller.js","search-controller.js","restart-service.js","nzbhydra-control-service.js","nzb-download-service.js","modal.js","modal-service.js","migration-service.js","login-controller.js","indexer-statuses-controller.js","index-controller.js","hydra-auth-service.js","header-controller.js","directives/keep-focus.js","generic-error-handler.js","formly-config.js","filters.js","file-selection-service.js","file-download-service.js","downloader-categories-service.js","download-history-controller.js","debug-service.js","config-service.js","config-fields-service.js","config-controller.js","categories-service.js","backup-service.js","angular-scroll.js"],"names":["angular","module","nzbhydraapp","hydraTasks","controller","$inject","templateUrl","$scope","$http","get","then","data","tasks","runTask","taskName","put","tabOrChart","transclude","chartSlot","tableSlot","restrict","replace","scope","display","sendTorrentToBlackhole","searchResultId","growl","ConfigService","DebugService","useBlackhole","getSafe","downloading","saveTorrentsTo","cssClass","add","response","successful","error","message","log","selectionButton","selected","selectable","invertSelection","selectAll","deselectAll","btn","isUndefined","_","difference","push","apply","splice","length","searchResult","require","result","$element","$attrs","$uibModal","$window","localStorageService","HydraAuthService","foo","calculateDisplayState","resultDisplayed","titleGroupIndex","titlesExpanded","duplicatesExpanded","duplicateGroupIndex","duplicatesDisplayed","toggleTitleExpansion","$emit","titleGroupIndicator","toggleDuplicateExpansion","hash","$on","$event","value","handleDisplay","sendSelectionEvent","clickCheckbox","event","rowIndex","currentTarget","startIndex","endIndex","newValue","previousClickTargetElement","newClickTargetElement","num","betweena","betweenb","fromYlocation","$","prop","newYlocation","elementYlocation","handleSelection","showDetailsDl","getUserInfos","maySeeDetailsDl","showNfo","resultItem","has_nfo","uri","URI","toString","hasNfo","openModal","content","info","size","nfo","open","template","NfoModalInstanceCtrl","resolve","getNfoTooltip","downloadNzb","location","href","link","kify","number","Math","round","$uibModalInstance","ok","close","item","cancel","dismiss","onFinishRender","$timeout","element","attr","$last","dropdownMultiselectDirective","selectedModel","options","settings","events","toggleDropdown","$filter","$document","console","$dropdownTrigger","children","showSelectedValues","showSelectAll","showDeselectAll","noSelectedText","onToggleItem","noop","extend","buttonText","$watch","join","toggleItem","option","index","indexOf","id","oldValue","pluck","on","e","contains","collection","target","containsTarget","some","object","parentElement","parentFound","isDefined","className","split","$apply","indexerSelectionButton","selectedIndexers","availableIndexers","selectByPredicate","predicate","filter","anyTorrentIndexersSelectable","any","indexer","searchModuleType","forEach","x","name","reset","preselect","selectAllUsenet","selectAllTorrent","indexerInput","model","onClick","isFocused","onFocus","onBlur","hydraupdates","UpdateService","loadingPromise","getInfos","currentVersion","repVersion","latestVersion","updateAvailable","latestVersionIgnored","changelog","getVersionHistory","versionHistory","update","showChangelog","showChanges","forceUpdate","hydraNews","success","news","hydralog","$interval","$sce","getLog","active","params","offset","limit","jsonLogLines","fromJson","lines","hasMoreJsonLines","hasMore","trustAsHtml","logfilenames","startUpdateLogInterval","tailInterval","doTailLog","scrollToBottom","doUpdateLog","currentJsonIndex","logPromise","select","document","getElementById","scrollTop","getOlderFormatted","getNewerFormatted","max","toggleUpdate","set","toggleTailLog","entry","LogModalInstanceCtrl","formatTimestamp","date","moment","local","format","escapeHtml","$sanitize","text","formatClassname","fqn","substr","lastIndexOf","focusOn","elem","focus","downloadNzbzipButton","searchResults","searchTitle","callback","FileDownloadService","download","values","map","filename","method","url","zip","downloadFile","zipFilepath","addedIds","missedIds","status","headers","config","downloadNzbsButton","NzbDownloadService","downloaders","getEnabledDownloaders","blackholeEnabled","downloader","didFilterOutResults","didKeepAnyResults","downloadType","tos","originalCategory","sendToBlackhole","searchResultIds","columnFilterWrapper","controllerAs","bindToController","vm","this","isActive","toggle","$broadcast","clear","column","filterModel","freetextFilter","onKeypress","keyEvent","which","filterValue","filterType","checkboxesFilter","entries","showInvert","isBoolean","invert","undefined","booleanFilter","timeFilter","dateOptions","dateDisabled","formatYear","startingDay","formats","altInputFormats","openAfter","after","opened","openBefore","before","beforeDate","afterDate","numberRangeFilter","min","addon","columnSortable","sortMode","reversed","startMode","sortModel","sort","connectionTest","type","testButton","testMessage","showError","removeClass","addClass","testConnection","injector","username","password","apiKey","host","port","ssl","finally","childOf","c","p","parentNode","clickOutside","$parse","classList","outsideIfNot","eventHandler","i","r","classNames","l","hasClass","outsideIgnore","$eval","context","baseVal","RegExp","test","fn","_hasTouch","window","navigator","maxTouchPoints","off","cfgFormEntry","title","cfg","help","hydrabackup","BackupService","Upload","RequestsErrorHandler","RestartService","refreshBackupList","getBackupsList","backups","uploadActive","createBackupFile","dontdownload","createAndDownloadBackupFile","uploadBackupFile","file","errFiles","specificallyHandled","errFile","upload","restart","evt","progress","parseInt","loaded","total","floor","restoreFromFile","addableNzbs","searchresult","alwaysAsk","addableNzb","iconCssClass","downloaderType","originalClass","blockUI","modalInstance","backdrop","keyboard","startCountdown","ignore","version","UpdateModalInstanceCtrl","messages","interval","UpdateFooterController","checked","retrieveUpdateInfos","checkAndShowNews","showNews","NewsModalInstanceCtrl","mayUpdate","maySeeAdmin","wasWelcomeShown","defer","promise","WelcomeModalInstanceCtrl","closed","$state","MigrationService","startMigration","migrate","goToConfig","go","SystemController","activeTab","NzbHydraControlService","csv","sql","shutdown","reloadConfig","allTabs","state","goToSystemState","inherit","notify","reload","downloadDebuggingInfos","responseType","a","createElement","blob","Blob","URL","createObjectURL","body","appendChild","click","removeChild","executeSqlQuery","post","executeSqlUpdate","StatsService","includeDisabled","switchState","requestBody","getDownloadHistory","pageNumber","page","nzbDownloads","totalDownloads","totalElements","StatsController","initializingAfter","initializingBefore","subtract","toDate","historyInfoTypeUserEnabled","logging","historyUserInfoType","historyInfoTypeIpEnabled","updateStats","statId","start","statsToRetrieve","statsSwichState","statsLoadingPromise","includeDisabledIndexersInStats","stats","setStats","dispatchEvent","Event","getChart","chartType","xKey","yKey","xAxisLabel","yAxisLabel","chart","height","margin","top","right","bottom","left","d","y","showValues","valueFormat","color","showControls","showLegend","duration","xAxis","axisLabel","tickFormat","rotateLabels","showMaxMin","yAxis","axisLabelDistance","tooltip","enabled","zoom","scaleExtent","useFixedDomain","useNiceScale","horizontalOff","verticalOff","unzoomEventType","key","bar","indexerApiAccessStats","avgIndexerSearchResultsShares","avgResponseTimes","indexerDownloadShares","downloadsPerDayOfWeek","downloadsPerHourOfDay","searchesPerDayOfWeek","searchesPerHourOfDay","downloadsPerAgeStats","successfulDownloadsPerIndexer","downloadSharesPerUser","searchSharesPerUser","downloadSharesPerIp","searchSharesPerIp","userAgentSearchShares","userAgentDownloadShares","toggleIncludeDisabledIndexers","onStatsSwitchToggle","refresh","avgResponseTimesChart","resultsSharesChart","clipEdge","stacked","reduceXTicks","valueFormatter","series","totalShare","indexerName","uniqueShare","rotation","numberOfConfiguredIndexers","numberOfEnabledIndexers","getSharesPieChart","xValue","yValue","showLabels","donut","donutRatio","labelThreshold","labelsOutside","labelSunbeamLayout","legend","downloadsPerHourOfDayChart","downloadsPerDayOfWeekChart","searchesPerHourOfDayChart","searchesPerDayOfWeekChart","downloadsPerAgeChart","downloadsPerAge","successfulDownloadsPerIndexerChart","indexerDownloadSharesChart","share","downloadSharesPerIpChart","searchSharesPerIpChart","downloadSharesPerUserChart","searchSharesPerUserChart","userAgentSearchSharesChart","userAgentDownloadSharesChart","SearchService","lastExecutedQuery","lastExecutedSearchRequestParameters","lastResults","search","searchRequestId","category","query","metaData","season","episode","minsize","maxsize","minage","maxage","indexers","mode","searchRequestParameters","tmdbId","imdbId","tvdbId","tvrageid","rid","tvmazeid","processData","getLastResults","loadMore","loadAll","getSearchState","searchrequestid","getModalInstance","setModalInstance","mi","indexerSearchMetaDatas","numberOfAvailableResults","numberOfRejectedResults","numberOfAcceptedResults","numberOfProcessedResults","rejectedReasonsMap","notPickedIndexersWithReason","SearchResultsController","$stateParams","$q","CategoriesService","limitTo","indexersearches","k","v","reason","indexerResultsInfo","groupExpanded","selectedIds","lastClickedRowIndex","lastClickedValue","allSearchResults","isShowFilterButtons","searching","showQuickFilterButtons","isShowFilterButtonsMovie","toLowerCase","isShowFilterButtonsTv","filterButtonsModel","source","quality","filterButtonsModelMap","tv","camts","web","dvd","bluray","indexerStatusesExpanded","groupTorrentAndNewznabResults","sumGrabs","scrollToResults","loadMoreEnabled","totalAvailableUnknown","expandedTitlegroups","optionsOptions","label","optionsSelectedModel","blockAndUpdate","startBlocking","filteredResults","sortAndFilter","deferred","getCleanedTitle","getGroupingString","groupingString","results","words","sortPredicateKey","sortReversed","getSortPredicateValue","containgObject","filtered","epoch","ageDays","utc","diff","unix","grabs","seeders","every","word","mustContain","each","Array","prototype","containsAtLeastOne","isEmpty","anyRequired","substring","newSelected","grouped","groupBy","mapped","titleGroup","hashGroup","sortedHashGroup","sortBy","sortPredicateValue","indexerscore","sorted","reverse","sumOfGrabs","element1","element2","duplicateGroup","duplicateIndex","duplicatesLength","titlesLength","stopBlocking","setDataFromSearchResult","previousSearchResults","seen","out","len","j","uniq","concat","anyResultsRejected","anyIndexersSearchedSuccessfully","wasSuccessful","numberOfLoadedResults","hasMoreResults","totalResultsKnown","categoriesForFiltering","allUsedCategories","getWithoutAll","optionsExtraSettings","optionsEvents","indexersForFiltering","ps","loadedResults","loaded_results","firstResultPredicate","sortPredicate","groupId","onFilterButtonsModelChange","resort","toggleTitlegroupExpand","countResults","toggleIndexerStatuses","getRejectedReasonsTooltip","count","originalEvent","newCheckedValue","clickTargetElement","shiftKey","Number","lastClickedElement","downloadNzbsCallback","toRemove","filterRejectedZero","doShowResults","searchResultsElement","scrollToElement","print","SearchHistoryService","getSearchHistory","distinct","onlyCurrentUser","searchRequests","totalRequests","getSearchHistoryForSearching","formatRequest","request","includeIdLink","includequery","describeEmptySearch","includeTitle","categoryName","identifiers","indexBy","IMDB","identifierValue","TVDB","TVRAGE","TMDB","author","getStateParamsForRepeatedSearch","stateParams","availableIdentifiers","identifierKey","tmdbid","imdbid","tvdbid","SearchHistoryController","history","pagination","current","categoriesConfig","categories","preselectedTimeInterval","accessOptionsForFiltering","anyUsername","anyIp","ip","columnSizes","time","additionalParameters","openSearch","formatQuery","formatAdditional","pair","find","showDetails","searchId","ModalInstanceCtrl","details","SearchController","getNumberOrUndefined","isNaN","isNumber","epochEnter","isSearchCancelled","selectedItem","getAllCategories","mayBeSelected","ignoreResultsFrom","getByName","getDefault","decodeURIComponent","tvmazeId","showIndexers","searchHistory","safeConfig","getAvailableIndexers","alreadySelected","previouslyAvailable","availableIndexersList","chain","showOnSearch","activated","deselectedBefore","selectedBefore","getAndSetSearchRequests","showIndexerSelection","typeAheadWait","autocompleteLoading","isAskById","searchType","isById","autocompleteClass","toggleCategory","searchCategory","oldCategory","searchModel","$viewValue","$setViewValue","enableCategorySizes","minSizePreset","maxSizePreset","getAutocomplete","val","onTypeAheadEnter","Date","getTime","initiateSearch","onTypeAheadKeyDown","keyCode","clearAutocomplete","startSearch","random","SearchUpdateModalInstanceCtrl","backdropClass","onCancel","goToSearchUrl","tvrageId","encodeURIComponent","repeatSearch","searchBoxTooltip","$watchGroup","selectAutocompleteItem","$item","autocompleteActive","seriesSelected","toggleIndexer","updateSearchMessagesInterval","loggedSearchFinished","indexerSelectionFinished","indexersSelected","indexersFinished","searchFinished","progressMax","cancelSearch","baseUrl","RestartModalInstanceCtrl","pingUrl","internalCaR","timer","ignoreLoadingBar","DownloaderCategoriesService","defaultCategory","openCategorySelection","sendNzbAddCommand","downloaderName","ModalService","headline","textAlign","showCancel","showNo","no","yes","onYes","onNo","targetScope","GeneralModalService","msg","MigrationModalInstanceCtrl","isMigrating","doMigrateDatabase","isFileBasedOpen","isUrlBasedOpen","baseurl","settingsCfgFile","dbFile","nzbhydraDbFile","updateMigrationMessagesInterval","stop","requirementsMet","configMigrated","databaseMigrated","warningMessages","LoginController","user","login","setLoggedInByForm","IndexerStatusesController","statuses","isInPast","epochSeconds","enable","encodeURI","formatDate","dateFilter","timestamp","hidePast","t","reformatDate","reformatDateSeconds","humanizeDate","to","IndexController","$rootScope","bootstrapped","$httpParamSerializerJQLike","isLoggedIn","Content-Type","askForPassword","logout","maySeeSearch","getUserRights","userInfos","maySeeStats","setLoggedInByBasic","_maySeeStats","_maySeeAdmin","_username","getUserName","HeaderController","authConfigured","showSearch","showAdmin","adminRestricted","showStats","statsRestricted","showLoginout","loginlogoutText","oldUserName","searchRestricted","is","loginout","authType","old_username","$compileProvider","debugInfoEnabled","$animateProvider","$stateProvider","$urlRouterProvider","$locationProvider","blockUIConfig","$urlMatcherFactoryProvider","localStorageServiceProvider","loginRequired","autoBlock","resetOnException","autoInjectBodyBlock","strictMode","otherwise","abstract","views","header","container@","$title","stats@root.stats","DownloadHistoryController","downloads","results@root.search","html5Mode","setPrefix","setNotify","paginationTemplateProvider","setPath","cfpLoadingBarProvider","latencyThreshold","growlProvider","globalTimeToLive","globalPosition","directive","bind","$evalAsync","ngEnter","preventDefault","factory","run","toState","toParams","fromState","fromParams","Object","keys","dereferer","escape","$provide","decorator","$delegate","$injector","exception","cause","stack","line","trim","mixin","isNullOrEmpty","string","isNull","isString","$httpProvider","interceptors","_scope","_element","responseError","errorResponse","alreadyHandled","reject","eventFocus","eventFocusId","attrs","ngModel","$parsers","unshift","service","HEADER_NAME","specificallyHandleInProgress","ConfigBoxService","checkConnection","checkCaps","capsCheckRequest","CheckCapsModalInstanceCtrl","updateMessagesInterval","$close","indexerConfig","$dismiss","hasOwnProperty","checkType","specificallyHandledBlock","rejection","path","JSON","stringify","addHeaderToConfig","decorateRegularCall","decorateDataCall","newHttp","delete","head","jsonp","arguments","copyNotOverriddenAttributes","hashCode","s","reduce","b","charCodeAt","formlyConfig","formlyValidationMessages","addStringMessage","extras","errorExistsAndShouldBeVisibleExpression","formlyConfigProvider","updateIndexerModel","supportedSearchIds","supportedSearchTypes","categoryMapping","configComplete","allCapsChecked","removeChromeAutoComplete","explicitAsync","disableWarnings","onProd","setWrapper","setType","extends","wrapper","hidePassword","generate","chars","FileSelectionService","selection","uniqueId","form","capsChecked","defaultOptions","templateOptions","noRow","optionsAttr","ngOptions","classes","$setDirty","formOptions","formState","addNew","repeatsection","newsection","copy","defaultModel","remove","$index","copyFields","fields","repeatfields","field","mapObject","_showBox","parentModel","isInitial","fieldsFunction","returnedModel","showBox","presets","addEntry","entriesCollection","preset","checkAddingAllowed","isSubmitted","recheck","listOfResults","allowDelete","allowDeleteFunction","spinnerActive","needsConnectionTest","obSubmit","$valid","checkBeforeClose","$error","$setTouched","deleteEntry","resetFunction","filters","fullPath","goUp","getCategories","invalidate","categoriesResponse","statusesForFiltering","age","getStatusIcon","spans","reformatDateEpoch","debug","first","last","$cacheFactory","cache","newConfig","ignoreWarnings","invalidateSafe","errorresponse","maySeeAdminArea","configResponse","ConfigFields","getFields","rootModel","main","fieldGroup","required","placeholder","validators","ipAddress","expression","$modelValue","regexValidator","hideExpression","addonRight","applyRestrictions","marginTop","btnText","applyRestrictionsType","forbiddenRegex","forbiddenWords","newznabCategories","requiredRegex","requiredWords","subType","entryTemplateUrl","getDownloaderPresets","presetsOnly","addNewText","getDownloaderBoxFields","DownloaderCheckBeforeCloseService","check","resetModel","backend","downloadLimit","enabledCategories","enabledForSearchSource","generalMinSize","hitLimit","hitLimitResetTime","loadLimitOnRandom","score","timeout","userAgent","getIndexerPresets","existingIndexers","existingEntry","getIndexerBoxFields","IndexerCheckBeforeCloseService","auth","altLegendText","regex","prefixViewValue","configuredIndexers","fieldset","class","uniqueName","viewValue","noComma","hostField","watcher","listener","$parent","greaterThanZero","timeOfDay","cats","union","nzbAddingType","nzbAccessType","handleConnectionCheckFail","whatFailed","yesText","checkCapsWhenClosing","ConfigController","ConfigModel","updateAndAskForRestartIfNecessary","$setPristine","restartRequired","submit","handleConfigSetResponse","restartNeeded","errorMessages","showMessage","extendMessageWithList","item2","err","ignoreSaveNeeded","isSavingNeeded","$dirty","goToConfigState","tabName","html","cat","slice","bytes","filesize","showType","fileOrFolder","selectType","watch","duScrollDefaultEasing","pow","duScroll","exports","cancelAnimation","requestAnimation","duScrollEasing","duScrollDuration","duScrollOffset","duScrollCancelOnEvents","scrollAnimation","proto","isDocument","el","HTMLDocument","nodeType","DOCUMENT_NODE","isElement","HTMLElement","ELEMENT_NODE","unwrap","duScrollTo","easing","aliasFn","duScrollToElement","duScrollToAnimated","scrollTo","scrollLeft","startLeft","duScrollLeft","startTop","duScrollTop","deltaLeft","deltaTop","startTime","cancelScrollAnimation","unbind","animationStep","percent","ceil","getBoundingClientRect","scrollX","documentElement","scrollY","duScrollToElementAnimated","duScrollTopAnimated","duScrollLeftAnimated","unprefixed","vendors","fnName","fallback","suffix","toUpperCase","polyfill","lastTime","currTime","timeToCall","scrollContainerAPI","duScrollGreedy","duScrollSpyWait","duScrollSpyRefreshInterval","duScrollBottomSpy","duScrollActiveClass","contexts","createContext","queued","handler","$id","spies","bottomReached","containerEl","container","containerOffset","clientHeight","scrollHeight","documentScrollHeight","pageYOffset","innerHeight","currentlyActive","toBeActive","spy","pos","compareProperty","getTargetPosition","getTargetElement","destroyContext","intervalPromise","defaultContextId","getContextForScope","getContextForSpy","contextId","addSpy","isElementInDocument","getContainer","triggerHandler","removeSpy","containers","getContainerId","setContainer","removeContainer","$attr","duSmoothScroll","getElementsByName","stopPropagation","spyAPI","compile","tElement","tAttrs","pre","iElement","iAttrs","$observe","Spy","targetElementOrId","targetId","flushTargetCache","ngHref","duScrollspy","timeoutPromise","deregisterOnStateChange"],"mappings":"AACAA,QAAAC,OAAA,gBAEA,IAAAC,YAAAF,QAAAC,OAAA,eAAA,sBAAA,SAAA,eAAA,WAAA,gBAAA,iBAAA,UAAA,YAAA,UAAA,iBAAA,wCAAA,OAAA,SAAA,kBAAA,+BAAA,YAAA,aAAA,kBAAA,SAAA,aAAA,kBAAA,qBAAA,iBAAA,eAAA,YAAA,gBAAA,YAAA,SAAA,aCiBA,SAAAE,aAEA,OADAC,EAAAC,SAAA,SAAA,UAEAC,YAAA,oCACAF,WAAAA,GAGA,SAAAA,EAAAG,EAAAC,GAEAA,EAAAC,IAAA,qBAAAC,KAAA,SAAAC,GACAJ,EAAAK,MAAAD,EAAAA,OAGAJ,EAAAM,QAAA,SAAAC,GACAN,EAAAO,IAAA,qBAAAD,GAAAJ,KAAA,SAAAC,GACAJ,EAAAK,MAAAD,EAAAA,SC/BA,SAAAK,aACA,OACAV,YAAA,2CACAW,YACAC,UAAA,QACAC,UAAA,SAEAC,SAAA,IACAC,SAAA,EACAC,OACAC,QAAA,MCVA,SAAAC,yBAEA,OADApB,EAAAC,SAAA,SAAA,QAAA,QAAA,gBAAA,iBAEAC,YAAA,wDACAgB,OACAG,eAAA,KAEArB,WAAAA,GAGA,SAAAA,EAAAG,EAAAC,EAAAkB,EAAAC,EAAAC,GACArB,EAAAsB,aAAA,OAAAF,EAAAG,UAAAC,YAAAC,gBAAA,KAAAL,EAAAG,UAAAC,YAAAC,eACAzB,EAAA0B,SAAA,sBACA1B,EAAA2B,IAAA,WACA3B,EAAA0B,SAAA,eACAzB,EAAAO,IAAA,2BAAAR,EAAAkB,iBAAAf,KAAA,SAAAyB,GACAA,EAAAxB,KAAAyB,WACA7B,EAAA0B,SAAA,gBAEA1B,EAAA0B,SAAA,mBACAP,EAAAW,MAAAF,EAAAxB,KAAA2B,aAKAV,EAAAW,IAAA,cCzBA,SAAAC,kBAEA,OADApC,EAAAC,SAAA,WAEAC,YAAA,+CACAgB,OACAmB,SAAA,IACAC,WAAA,IACAC,gBAAA,IACAC,UAAA,IACAC,YAAA,IACAC,IAAA,KAEA1C,WAAAA,GAGA,SAAAA,EAAAG,GAEAP,QAAA+C,YAAAxC,EAAAuC,OACAvC,EAAAuC,IAAA,WAGA9C,QAAA+C,YAAAxC,EAAAoC,mBACApC,EAAAoC,gBAAA,WACApC,EAAAkC,SAAAO,EAAAC,WAAA1C,EAAAmC,WAAAnC,EAAAkC,YAIAzC,QAAA+C,YAAAxC,EAAAqC,aACArC,EAAAqC,UAAA,WACArC,EAAAkC,SAAAS,KAAAC,MAAA5C,EAAAkC,SAAAlC,EAAAmC,cAIA1C,QAAA+C,YAAAxC,EAAAsC,eACAtC,EAAAsC,YAAA,WACAtC,EAAAkC,SAAAW,OAAA,EAAA7C,EAAAkC,SAAAY,WClCA,SAAAC,eAEA,OADAlD,EAAAC,SAAA,SAAA,WAAA,QAAA,QAAA,SAAA,YAAA,UAAA,eAAA,sBAAA,qBAEAC,YAAA,4CACAiD,QAAA,UACAlC,SAAA,EACAC,OACAkC,OAAA,KAEApD,WAAAA,GAiLA,SAAAA,EAAAG,EAAAkD,EAAAjD,EAAAkB,EAAAgC,EAAAC,EAAAC,EAAAhC,EAAAiC,EAAAC,GA7DA,IAAAvD,EAAAC,EAAAkB,EAAAiC,EAAAG,EAmDAF,EAWArD,EAAAwD,OA9KA,SAAAxD,EAAAsD,GAMA,SAAAG,IACAzD,EAAA0D,iBAAA,IAAA1D,EAAAiD,OAAAU,iBAAA3D,EAAA4D,kBAAA5D,EAAA6D,oBAAA,IAAA7D,EAAAiD,OAAAa,qBALA9D,EAAAwD,IAAAO,oBAAA,OAAAT,EAAApD,IAAA,wBAAAoD,EAAApD,IAAA,uBACAF,EAAA6D,oBAAA,EACA7D,EAAA4D,gBAAA,EAMAH,IAEAzD,EAAAgE,qBAAA,WACAhE,EAAA4D,gBAAA5D,EAAA4D,eACA5D,EAAAiE,MAAA,yBAAAjE,EAAA4D,eAAA5D,EAAAiD,OAAAiB,sBAGAlE,EAAAmE,yBAAA,WACAnE,EAAA6D,oBAAA7D,EAAA6D,mBACA7D,EAAAiE,MAAA,6BAAAjE,EAAA6D,mBAAA7D,EAAAiD,OAAAmB,OAGApE,EAAAqE,IAAA,2BAAA,SAAAC,EAAAC,EAAAL,GACAlE,EAAAiD,OAAAiB,sBAAAA,IACAlE,EAAA4D,eAAAW,EACAd,OAIAzD,EAAAqE,IAAA,+BAAA,SAAAC,EAAAC,EAAAH,GACApE,EAAAiD,OAAAmB,OAAAA,IACApE,EAAA6D,mBAAAU,EACAd,OAIAzD,EAAAqE,IAAA,sBAAA,SAAAC,EAAAC,GACAvE,EAAAwD,IAAAO,oBAAAQ,EACAA,IAEAvE,EAAA6D,oBAAA,GAEAJ,MAGAzD,EAAAqE,IAAA,wBAAA,WACAZ,MAiIAe,CAAAxE,EAAAsD,GA7HA,SAAAtD,EAAAkD,GAGA,SAAAuB,IACAzE,EAAAiE,MAAA,cAAAjE,EAAAiD,OAAAjD,EAAAwD,IAAAtB,UAHAlC,EAAAwD,IAAAtB,UAAA,EAMAlC,EAAA0E,cAAA,WACAD,IACAzE,EAAAiE,MAAA,kBAAAU,MAAA3E,EAAA4E,SAAA5E,EAAAwD,IAAAtB,SAAAyC,MAAAE,gBAOA7E,EAAAqE,IAAA,aAAA,SAAAM,EAAAG,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IALAC,EAAAC,EAAAC,EAKAC,EAAAC,EAAAA,EAAAN,GAAAO,KAAA,eAAAA,KAAA,aACAC,EAAAF,EAAAA,EAAAL,GAAAM,KAAA,eAAAA,KAAA,aACAE,EAAAH,EAAArC,GAAAsC,KAAA,aACAxF,EAAA0D,kBARA2B,EAYAI,IAZAL,EAYAE,KAZAH,EAYAO,IAXAP,GAAAE,GAAAD,GAAAD,GAAAA,GAAAE,KAaArF,EAAAwD,IAAAtB,WADA8C,EAKAP,QAGAzE,EAAAqE,IAAA,kBAAA,WACArE,EAAA0D,kBAGA1D,EAAAwD,IAAAtB,UAAAlC,EAAAwD,IAAAtB,SACAuC,OAEAzE,EAAAqE,IAAA,cAAA,WACArE,EAAA0D,kBAGA1D,EAAAwD,IAAAtB,UAAA,EACAuC,OAEAzE,EAAAqE,IAAA,YAAA,WACArE,EAAA0D,kBAGA1D,EAAAwD,IAAAtB,UAAA,EACAuC,OAEAzE,EAAAqE,IAAA,kBAAA,SAAAC,EAAArB,EAAAsB,GACAvE,EAAA0D,iBAAAT,IAAAjD,EAAAiD,SAGAjD,EAAAwD,IAAAtB,SAAAqC,KAoEAoB,CAAA3F,EAAAkD,GAhEAjD,EAiEAA,EAjEAkB,EAiEAA,EAjEAiC,EAiEAA,EAjEAG,EAiEAA,GAjEAvD,EAiEAA,GAhEA4F,cAAArC,EAAAsC,eAAAC,gBAEA9F,EAAA+F,QAEA,SAAAC,GACA,GAAA,IAAAA,EAAAC,QAAA,CAGA,IAAAC,EAAA,IAAAC,IAAA,mBAAAH,EAAA9E,gBACA,OAAAjB,EAAAC,IAAAgG,EAAAE,YAAAjG,KAAA,SAAAyB,GACAA,EAAAxB,KAAAyB,WACAD,EAAAxB,KAAAiG,OACArG,EAAAsG,UAAA,KAAA1E,EAAAxB,KAAAmG,SAEApF,EAAAqF,KAAA,oBAGArF,EAAAW,MAAAF,EAAAxB,KAAAmG,aAKAvG,EAAAsG,UAEA,SAAAG,EAAAC,GACAtD,EAAAuD,MACAC,SAAA,0DACA/G,WAAAgH,qBACAJ,KAAAA,EACAK,SACAJ,IAAA,WACA,OAAAA,MAKAzD,OAAA9C,QAGAH,EAAA+G,cAAA,WACA,MAAA,QAAA/G,EAAAiD,OAAAoD,OACA,WACA,UAAArG,EAAAiD,OAAAoD,OACA,yCAEA,oBAKAhD,EAeAA,EAAArD,EAdAgH,YAEA,SAAAhB,GAEA3C,EAAA4D,SAAAC,KAAAlB,EAAAmB,MAYAnH,EAAAoH,KAAA,WACA,OAAA,SAAAC,GACA,OAAAA,EAAA,IACAC,KAAAC,MAAAF,EAAA,KAAA,IAEAA,IAGAhG,EAAAW,IAAA,kBAQA,SAAA6E,qBAAA7G,EAAAwH,EAAAd,GAEA1G,EAAA0G,IAAAA,EAEA1G,EAAAyH,GAAA,WACAD,EAAAE,MAAA1H,EAAAkC,SAAAyF,OAGA3H,EAAA4H,OAAA,WACAJ,EAAAK,WCvNA,SAAAC,eAAAC,GAWA,OACAZ,KAXA,SAAApG,EAAAiH,EAAAC,IAEA,IAAAlH,EAAAmH,OAIAnH,EAAAkD,MAAA,oBCPA,SAAAkE,+BACA,OACApH,OACAqH,cAAA,IACAC,QAAA,IACAC,SAAA,KACAC,OAAA,MAEA7H,YACA8H,eAAA,mBAEAzI,YAAA,mDACAF,YAAA,SAAA,WAAA,UAAA,YAAA,SAAAG,EAAAkD,EAAAuF,EAAAC,GACAC,QAAA3G,IAAAhC,EAAAqI,SACAM,QAAA3G,IAAAhC,EAAAoI,eACA,IAAAQ,EAAA1F,EAAA2F,WAAA,GAEAP,GACAQ,oBAAA,EACAC,eAAA,EACAC,iBAAA,EACAC,eAAA,MAEAV,GACAW,aAAAzJ,QAAA0J,MAEA1J,QAAA2J,OAAAb,EAAAvI,EAAAuI,YACA9I,QAAA2J,OAAAd,EAAAtI,EAAAsI,cACA7I,QAAA2J,OAAApJ,GAAAsI,SAAAA,EAAAC,OAAAA,IAEAvI,EAAAqJ,WAAA,GACAf,EAAAe,WACArJ,EAAAqJ,WAAAf,EAAAe,WAEArJ,EAAAsJ,OAAA,gBAAA,WACAhB,EAAAQ,mBACA,IAAA9I,EAAAoI,cAAAtF,OACA9C,EAAAsI,SAAAW,eACAjJ,EAAAqJ,WAAArJ,EAAAsI,SAAAW,eAEAjJ,EAAAqJ,WAAA,gBAEArJ,EAAAoI,cAAAtF,SAAA9C,EAAAqI,QAAAvF,OACA9C,EAAAqJ,WAAA,eAEArJ,EAAAqJ,WAAArJ,EAAAoI,cAAAmB,KAAA,MAGAvJ,EAAAsI,SAAAW,gBAAA,IAAAjJ,EAAAoI,cAAAtF,OACA9C,EAAAqJ,WAAArJ,EAAAsI,SAAAW,eAEAjJ,EAAAqJ,WAAArJ,EAAAoI,cAAAtF,OAAA,MAAA9C,EAAAqI,QAAAvF,OAAA,cAGA,GAEA9C,EAAA2G,MAAA,EAEA3G,EAAAwI,eAAA,WACAxI,EAAA2G,MAAA3G,EAAA2G,MAGA3G,EAAAwJ,WAAA,SAAAC,GACA,IAAAC,EAAA1J,EAAAoI,cAAAuB,QAAAF,EAAAG,IACAC,EAAAH,GAAA,EACAG,EACA7J,EAAAoI,cAAAvF,OAAA6G,EAAA,GAEA1J,EAAAoI,cAAAzF,KAAA8G,EAAAG,IAEA5J,EAAAuI,OAAAW,aAAAO,GAAAI,IAGA7J,EAAAqC,UAAA,WACArC,EAAAoI,cAAA3F,EAAAqH,MAAA9J,EAAAqI,QAAA,OAGArI,EAAAsC,YAAA,WACAtC,EAAAoI,cAAAvF,OAAA,EAAA7C,EAAAoI,cAAAtF,SAKA4F,EAAAqB,GAAA,QAAA,SAAAC,GACA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,GAAA,EAQA,OAPAF,EAAAG,KAAA,SAAAC,GACA,OAAAA,IAAAH,IACAC,GAAA,GACA,KAIAA,EAGA,GAAApK,EAAA2G,KAAA,CAIA,IAHA,IAAAwD,EAAAH,EAAAG,OAAAI,cACAC,GAAA,EAEA/K,QAAAgL,UAAAN,IAAA,OAAAA,IAAAK,GACAL,EAAAO,UAAAC,OAAAV,EAAAE,EAAAO,UAAAC,MAAA,KAAA,wBAAAH,GACAL,IAAAvB,IACA4B,GAAA,GAGAL,EAAAA,EAAAI,cAGAC,GACAxK,EAAA4K,OAAA,WACA5K,EAAA2G,MAAA,UCnGA,SAAAkE,yBAEA,OADAhL,EAAAC,SAAA,WAEAC,YAAA,uDACAgB,OACA+J,iBAAA,IACAC,kBAAA,IACAxI,IAAA,KAEA1C,WAAAA,GAGA,SAAAA,EAAAG,GA4BA,SAAAgL,EAAAC,GACAjL,EAAAsC,cACAtC,EAAA8K,iBAAAnI,KAAAC,MAAA5C,EAAA8K,iBACArI,EAAAqH,MACArH,EAAAyI,OAAAlL,EAAA+K,kBACAE,GACA,SAhCAjL,EAAAmL,6BAAA1I,EAAA2I,IAAApL,EAAA+K,kBACA,SAAAM,GACA,MAAA,YAAAA,EAAAC,mBAIAtL,EAAAoC,gBAAA,WACAK,EAAA8I,QAAAvL,EAAA+K,kBAAA,SAAAS,GACA,IAAA9B,EAAAjH,EAAAkH,QAAA3J,EAAA8K,iBAAAU,EAAAC,OACA,IAAA/B,EACA1J,EAAA8K,iBAAAnI,KAAA6I,EAAAC,MAEAzL,EAAA8K,iBAAAjI,OAAA6G,EAAA,MAKA1J,EAAAqC,UAAA,WACArC,EAAAsC,cACAtC,EAAA8K,iBAAAnI,KAAAC,MAAA5C,EAAA8K,iBAAArI,EAAAqH,MAAA9J,EAAA+K,kBAAA,UAGA/K,EAAAsC,YAAA,WACAtC,EAAA8K,iBAAAjI,OAAA,EAAA7C,EAAA8K,iBAAAhI,SAaA9C,EAAA0L,MAAA,WACAV,EAAA,SAAAK,GACA,OAAAA,EAAAM,aAIA3L,EAAA4L,gBAAA,WACAZ,EAAA,SAAAK,GACA,MAAA,YAAAA,EAAAC,oBAIAtL,EAAA6L,iBAAA,WACAb,EAAA,SAAAK,GACA,MAAA,YAAAA,EAAAC,qBChFA,SAAAQ,eAEA,OADAjM,EAAAC,SAAA,WAEAC,YAAA,4CACAgB,OACAsK,QAAA,IACAU,MAAA,IACAC,QAAA,KAEAlL,SAAA,EACAjB,WAAAA,GAGA,SAAAA,EAAAG,GACAA,EAAAiM,WAAA,EAEAjM,EAAAkM,QAAA,WACAlM,EAAAiM,WAAA,GAGAjM,EAAAmM,OAAA,WACAnM,EAAAiM,WAAA,ICrBA,SAAAG,eAEA,OADAvM,EAAAC,SAAA,SAAA,kBAEAC,YAAA,sCACAF,WAAAA,GAGA,SAAAA,EAAAG,EAAAqM,GAEArM,EAAAsM,eAAAD,EAAAE,WAAApM,KAAA,SAAAC,GACAJ,EAAAwM,eAAApM,EAAAA,KAAAoM,eACAxM,EAAAyM,WAAArM,EAAAA,KAAAsM,cACA1M,EAAA2M,gBAAAvM,EAAAA,KAAAuM,gBACA3M,EAAA4M,qBAAAxM,EAAAA,KAAAwM,qBACA5M,EAAA6M,UAAAzM,EAAAA,KAAAyM,YAGAR,EAAAS,oBAAA3M,KAAA,SAAAC,GACAJ,EAAA+M,eAAA3M,EAAAA,OAGAJ,EAAAgN,OAAA,WACAX,EAAAW,UAGAhN,EAAAiN,cAAA,WACAZ,EAAAa,YAAAlN,EAAA6M,YAGA7M,EAAAmN,YAAA,WACAd,EAAAW,WC9BA,SAAAI,YAEA,OADAvN,EAAAC,SAAA,SAAA,UAEAC,YAAA,mCACAF,WAAAA,GAGA,SAAAA,EAAAG,EAAAC,GAEA,OAAAA,EAAAC,IAAA,oBAAAmN,QAAA,SAAAjN,GACAJ,EAAAsN,KAAAlN,KCRA,SAAAmN,WAEA,OADA1N,EAAAC,SAAA,SAAA,QAAA,YAAA,YAAA,OAAA,sBAAA,UAEAC,YAAA,kCACAF,WAAAA,GAGA,SAAAA,EAAAG,EAAAC,EAAAuN,EAAApK,EAAAqK,EAAAnK,EAAAnC,GASA,SAAAuM,EAAAhE,GACA,OAAA,IAAA1J,EAAA2N,OACA1N,EAAAC,IAAA,mCAAA0N,QAAAC,OAAAnE,EAAAoE,MAAA,OAAAT,QAAA,SAAAjN,GACAJ,EAAA+N,aAAAtO,QAAAuO,SAAA5N,EAAA6N,OACAjO,EAAAkO,iBAAA9N,EAAA+N,UAEA,IAAAnO,EAAA2N,OACA1N,EAAAC,IAAA,yCAAAmN,QAAA,SAAAjN,GACAJ,EAAAgC,IAAAyL,EAAAW,YAAAhO,EAAAU,QAAA,KAAA,SACAA,QAAA,KAAA,QACAA,QAAA,KAAA,QACAA,QAAA,KAAA,UACAA,QAAA,KAAA,YACA,SAAAV,GACAe,EAAAW,MAAA1B,KAEA,IAAAJ,EAAA2N,OACA1N,EAAAC,IAAA,uCAAAmN,QAAA,SAAAjN,GACAJ,EAAAqO,aAAAjO,SAFA,EAuCA,SAAAkO,IACAtO,EAAAuO,aAAAf,EAAA,WACA,IAAAxN,EAAA2N,SACA3N,EAAAgN,SACAhN,EAAAwO,WAAA,IAAAxO,EAAA2N,QACA3N,EAAAyO,mBAGA,KAvEAzO,EAAAuO,aAAA,KACAvO,EAAA0O,YAAA,OAAApL,EAAApD,IAAA,gBAAAoD,EAAApD,IAAA,eACAF,EAAAwO,UAAA,OAAAlL,EAAApD,IAAA,cAAAoD,EAAApD,IAAA,aAEAF,EAAA2N,OAAA,EACA3N,EAAA2O,iBAAA,EACA3O,EAAAkO,kBAAA,EAyBAlO,EAAA4O,WAAAlB,IAEA1N,EAAA6O,OAAA,SAAAnF,GACA1J,EAAA2N,OAAAjE,EACA1J,EAAAgN,UAGAhN,EAAAyO,eAAA,WACAK,SAAAC,eAAA,WAAAC,UAAA,IACAF,SAAAC,eAAA,WAAAC,UAAA,UAGAhP,EAAAgN,OAAA,WACAU,EAAA1N,EAAA2O,kBACA,IAAA3O,EAAA2N,QACA3N,EAAAyO,kBAIAzO,EAAAiP,kBAAA,WACAvB,EAAA1N,EAAA2O,iBAAA,KAAAxO,KAAA,WACAH,EAAA2O,kBAAA,OAKA3O,EAAAkP,kBAAA,WACA,IAAAxF,EAAApC,KAAA6H,IAAAnP,EAAA2O,iBAAA,IAAA,GACAjB,EAAAhE,GACA1J,EAAA2O,iBAAAjF,GAcA1J,EAAAoP,aAAA,SAAAV,GACA1O,EAAA0O,YAAAA,EACA1O,EAAA0O,YACAJ,IACA,OAAAtO,EAAAuO,eACA5F,QAAA3G,IAAA,cACAwL,EAAA5F,OAAA5H,EAAAuO,cACAjL,EAAA+L,IAAA,aAAA,GACArP,EAAAwO,WAAA,GAEAlL,EAAA+L,IAAA,cAAArP,EAAA0O,cAGA1O,EAAAsP,cAAA,WACAhM,EAAA+L,IAAA,YAAArP,EAAAwO,YAGAxO,EAAAsG,UAAA,SAAAiJ,GACAnM,EAAAuD,MACA5G,YAAA,iBACAF,WAAA2P,qBACA/I,KAAA,KACAK,SACAyI,MAAA,WACA,OAAAA,MAKAtM,OAAA9C,QAGAH,EAAAqE,IAAA,WAAA,WACA,OAAArE,EAAAuO,cACAf,EAAA5F,OAAA5H,EAAAuO,gBAIAvO,EAAA0O,aACAJ,KAWA,SAAAkB,qBAAAxP,EAAAwH,EAAA+H,GAEAvP,EAAAuP,MAAAA,EAEAvP,EAAAyH,GAAA,WACAD,EAAAK,WAQA,SAAA4H,kBACA,OAAA,SAAAC,GACA,OAAAC,OAAAD,GAAAE,QAAAC,OAAA,qBAQA,SAAAC,WAAAC,GACA,OAAA,SAAAC,GACA,OAAAD,EAAAC,IAQA,SAAAC,kBACA,OAAA,SAAAC,GACA,OAAAA,EAAAC,OAAAD,EAAAE,YAAA,KAAA,IC1KA,SAAAC,UACA,OAEA,SAAAtP,EAAAuP,EAAArI,GACAlH,EAAAsD,IAAA,UAAA,SAAA2F,EAAAyB,GACAA,IAAAxD,EAAAoI,SACAC,EAAA,GAAAC,WCLA,SAAAC,uBAEA,OADA3Q,EAAAC,SAAA,SAAA,QAAA,QAAA,wBAEAC,YAAA,qDACAiD,SAAA,kBACAjC,OACA0P,cAAA,IACAC,YAAA,IACAC,SAAA,KAEA9Q,WAAAA,GAGA,SAAAA,EAAAG,EAAAmB,EAAAlB,EAAA2Q,GAEA5Q,EAAA6Q,SAAA,WACA,GAAApR,QAAA+C,YAAAxC,EAAAyQ,gBAAA,IAAAzQ,EAAAyQ,cAAA3N,OACA3B,EAAAqF,KAAA,gDACA,CACA,IAAAsK,EAAArO,EAAAsO,IAAA/Q,EAAAyQ,cAAA,SAAAlM,GACA,OAAAA,EAAArD,iBAEAiG,EAAA,qBAQA6J,EAAA,iBALAvR,QAAAgL,UAAAzK,EAAA0Q,aACA,QAAA1Q,EAAA0Q,YAAA5P,QAAA,iBAAA,KAEA,IAEA,OACAb,GAAAgR,OAAA,OAAAC,IAAA/J,EAAA/G,KAAA0Q,IAAAzD,QAAA,SAAAzL,GACAA,EAAAC,YAAA,OAAAD,EAAAuP,KAEAhK,EAAA,6BACAyJ,EAAAQ,aAAAjK,EAAA6J,EAAA,OAAApP,EAAAyP,aACA5R,QAAAgL,UAAAzK,EAAA2Q,WACA3Q,EAAA2Q,UAAA1N,OAAArB,EAAA0P,WAEA1P,EAAA2P,UAAAzO,OAAA,GACA3B,EAAAW,MAAA,iBAAAF,EAAA2P,UAAAzO,OAAA,WAAAgO,EAAAhO,OAAA,iBAGA3B,EAAAW,MAAAF,EAAAG,WAEAD,MAAA,SAAA1B,EAAAoR,EAAAC,EAAAC,GACAvQ,EAAAW,MAAA0P,QC9CA,SAAAG,qBAEA,OADA9R,EAAAC,SAAA,SAAA,QAAA,qBAAA,gBAAA,UAEAC,YAAA,mDACAiD,SAAA,kBACAjC,OACA0P,cAAA,IACAE,SAAA,KAEA9Q,WAAAA,GAGA,SAAAA,EAAAG,EAAAC,EAAA2R,EAAAxQ,EAAAD,GAEAnB,EAAA6R,YAAAD,EAAAE,wBACA9R,EAAA+R,iBAAA,OAAA3Q,EAAAG,UAAAC,YAAAC,eAEAzB,EAAA6Q,SAAA,SAAAmB,GACA,GAAAvS,QAAA+C,YAAAxC,EAAAyQ,gBAAA,IAAAzQ,EAAAyQ,cAAA3N,OACA3B,EAAAqF,KAAA,gDACA,CAEA,IAAAyL,GAAA,EACAC,GAAA,EACAzB,EAAAhO,EAAAyI,OAAAlL,EAAAyQ,cAAA,SAAAlM,GACA,MAAA,QAAAA,EAAA4N,cACAD,GAAA,GACA,IAEAvJ,QAAA3G,IAAA,4CACAiQ,GAAA,GACA,KAGA,GAAAA,IAAAC,EAKA,OAJA/Q,EAAAqF,KAAA,+DACA/G,QAAAgL,UAAAzK,EAAA2Q,WACA3Q,EAAA2Q,UAAA1N,aAGAgP,GAAAC,GACA/Q,EAAAqF,KAAA,oEAGA,IAAA4L,EAAA3P,EAAAsO,IAAAN,EAAA,SAAAlB,GACA,OAAArO,eAAAqO,EAAArO,eAAAmR,iBAAA9C,EAAA8C,oBAGAT,EAAAf,SAAAmB,EAAAI,GAAAjS,KAAA,SAAAyB,GACAnC,QAAAgL,UAAA7I,EAAAxB,QACA,cAAAwB,EACAA,EAAAxB,KAAAyB,WACAV,EAAAqF,KAAA,+BAEArF,EAAAW,MAAAF,EAAAxB,KAAA2B,SAGAZ,EAAAW,MAAA,2BAEArC,QAAAgL,UAAAzK,EAAA2Q,WACA3Q,EAAA2Q,UAAA1N,OAAArB,EAAAxB,KAAAkR,aAGA,WACAnQ,EAAAW,MAAA,+BAKA9B,EAAAsS,gBAAA,WACA,IAAAL,GAAA,EACAC,GAAA,EACAzB,EAAAhO,EAAAyI,OAAAlL,EAAAyQ,cAAA,SAAAlM,GACA,MAAA,YAAAA,EAAA4N,cACAD,GAAA,GACA,IAEAvJ,QAAA3G,IAAA,wCACAiQ,GAAA,GACA,KAGA,GAAAA,IAAAC,EAKA,OAJA/Q,EAAAqF,KAAA,mEACA/G,QAAAgL,UAAAzK,EAAA2Q,WACA3Q,EAAA2Q,UAAA1N,aAGAgP,GAAAC,GACA/Q,EAAAqF,KAAA,gEAEA,IAAA+L,EAAA9P,EAAAqH,MAAA2G,EAAA,kBACAxQ,EAAAO,IAAA,0BAAA+R,GAAApS,KAAA,SAAAyB,GACAA,EAAAxB,KAAAyB,WACAV,EAAAqF,KAAA,mCAEArF,EAAAW,MAAAF,EAAAxB,KAAA2B,SAEAtC,QAAAgL,UAAAzK,EAAA2Q,WACA3Q,EAAA2Q,UAAA1N,OAAArB,EAAAxB,KAAAkR,eClGA,SAAAkB,sBAEA,OADA3S,EAAAC,SAAA,SAAA,iBAEAe,SAAA,IACAd,YAAA,+CACAW,YAAA,EACA+R,aAAA,0BACA1R,OAAA,EACA2R,kBAAA,EACA7S,WAAAA,EACAsH,KAAA,SAAApG,EAAAiH,EAAAC,GACAlH,EAAAiH,QAAAA,IAKA,SAAAnI,EAAAG,EAAAqB,GACA,IAAAsR,EAAAC,KAEAD,EAAAhM,MAAA,EACAgM,EAAAE,UAAA,EAEAF,EAAAG,OAAA,WACAH,EAAAhM,MAAAgM,EAAAhM,KACAgM,EAAAhM,MACA3G,EAAA+S,WAAA,WAIAJ,EAAAK,MAAA,WACAL,EAAAhM,MACA3G,EAAA+S,WAAA,UAIA/S,EAAAqE,IAAA,SAAA,SAAAM,EAAAsO,EAAAC,EAAAL,GACAF,EAAAhM,MAAA,EACAgM,EAAAE,SAAAA,IAGAxR,EAAAW,IAAA,mBAUA,SAAAmR,eAAA9R,GAEA,OADAxB,EAAAC,SAAA,SAAA,UAEA8G,SAAA,0EACA5D,QAAA,uBACAyP,aAAA,kBACA1R,OACAkS,OAAA,KAEApT,WAAAA,GAGA,SAAAA,EAAAG,EAAAuQ,GACAvQ,EAAAI,QAEAJ,EAAAqE,IAAA,SAAA,WACAkM,EAAA,2BAGAvQ,EAAAoT,WAAA,SAAAC,GACA,KAAAA,EAAAC,OACAtT,EAAAiE,MAAA,SAAAjE,EAAAiT,QAAAM,YAAAvT,EAAAI,KAAA8K,OAAAsI,WAAA,YAAA/T,QAAAgL,UAAAzK,EAAAI,KAAA8K,SAAAlL,EAAAI,KAAA8K,OAAApI,OAAA,IAGAzB,EAAAW,IAAA,oBAOA,SAAAyR,mBAEA,OADA5T,EAAAC,SAAA,SAAA,iBAEA8G,SAAA,4EACA6L,aAAA,6BACA1R,OACAkS,OAAA,IACAS,QAAA,IACA/H,UAAA,IACAgI,WAAA,IACAC,UAAA,KAEA/T,WAAAA,GAGA,SAAAA,EAAAG,EAAAqB,GACArB,EAAAkC,UACAwR,YAEA1T,EAAA2N,QAAA,EAEA3N,EAAA2L,WACA3L,EAAAkC,SAAAwR,QAAA/Q,KAAAC,MAAA5C,EAAAkC,SAAAwR,QAAA1T,EAAA0T,SAGA1T,EAAA6T,OAAA,WACA7T,EAAAkC,SAAAwR,QAAAjR,EAAAC,WAAA1C,EAAA0T,QAAA1T,EAAAkC,SAAAwR,UAGA1T,EAAAqC,UAAA,WACArC,EAAAkC,SAAAwR,QAAA/Q,KAAAC,MAAA5C,EAAAkC,SAAAwR,QAAA1T,EAAA0T,UAGA1T,EAAAsC,YAAA,WACAtC,EAAAkC,SAAAwR,QAAA7Q,OAAA,EAAA7C,EAAAkC,SAAAwR,QAAA5Q,SAGA9C,EAAA4C,MAAA,WACA5C,EAAA2N,OAAA3N,EAAAkC,SAAAwR,QAAA5Q,OAAA9C,EAAA0T,QAAA5Q,OACA9C,EAAAiE,MAAA,SAAAjE,EAAAiT,QAAAM,YAAA9Q,EAAAqH,MAAA9J,EAAAkC,SAAAwR,QAAA,MAAAF,WAAA,aAAAI,UAAA5T,EAAA4T,WAAA5T,EAAA2N,SAEA3N,EAAAgT,MAAA,WAEAhT,EAAAqC,YACArC,EAAA2N,QAAA,EACA3N,EAAAiE,MAAA,SAAAjE,EAAAiT,QAAAM,iBAAAO,EAAAN,WAAA,aAAAI,UAAA5T,EAAA4T,WAAA5T,EAAA2N,SAEA3N,EAAAqE,IAAA,QAAArE,EAAAgT,OACA3R,EAAAW,IAAA,sBAOA,SAAA+R,cAAA1S,GAEA,OADAxB,EAAAC,SAAA,WAEA8G,SAAA,yEACA6L,aAAA,0BACA1R,OACAkS,OAAA,IACA5K,QAAA,IACAsD,UAAA,KAEA9L,WAAAA,GAIA,SAAAA,EAAAG,GACAA,EAAAkC,UAAAqC,MAAAvE,EAAAqI,QAAArI,EAAA2L,WAAApH,OACAvE,EAAA2N,QAAA,EAEA3N,EAAA4C,MAAA,WACA5C,EAAA2N,OAAA3N,EAAAkC,SAAAqC,QAAAvE,EAAAqI,QAAA,GAAA9D,MACAvE,EAAAiE,MAAA,SAAAjE,EAAAiT,QAAAM,YAAAvT,EAAAkC,SAAAqC,MAAAiP,WAAA,WAAAxT,EAAA2N,SAEA3N,EAAAgT,MAAA,WACAhT,EAAAkC,SAAAqC,OAAA,EACAvE,EAAA2N,QAAA,EACA3N,EAAAiE,MAAA,SAAAjE,EAAAiT,QAAAM,iBAAAO,EAAAN,WAAA,WAAAxT,EAAA2N,SAEA3N,EAAAqE,IAAA,QAAArE,EAAAgT,OACA3R,EAAAW,IAAA,mBAOA,SAAAgS,aAEA,OADAnU,EAAAC,SAAA,SAAA,iBAEA8G,SAAA,sEACA7F,OACAkS,OAAA,IACA/Q,SAAA,KAEArC,WAAAA,GAGA,SAAAA,EAAAG,EAAAqB,GAEArB,EAAAiU,aACAC,cAAA,EACAC,WAAA,KACAC,YAAA,GAGApU,EAAAqU,SAAA,eAAA,aAAA,aAAA,aACArU,EAAA6P,OAAA7P,EAAAqU,QAAA,GACArU,EAAAsU,iBAAA,cACAtU,EAAA2N,QAAA,EAEA3N,EAAAuU,UAAA,WACAvU,EAAAwU,MAAAC,QAAA,GAGAzU,EAAA0U,WAAA,WACA1U,EAAA2U,OAAAF,QAAA,GAGAzU,EAAAwU,OACAC,QAAA,GAGAzU,EAAA2U,QACAF,QAAA,GAGAzU,EAAA4C,MAAA,WACA5C,EAAA2N,OAAA3N,EAAAkC,SAAA0S,YAAA5U,EAAAkC,SAAA2S,UACA7U,EAAAiE,MAAA,SAAAjE,EAAAiT,QAAAM,aAAAiB,MAAAxU,EAAAkC,SAAA2S,UAAAF,OAAA3U,EAAAkC,SAAA0S,YAAApB,WAAA,QAAAxT,EAAA2N,SAEA3N,EAAAgT,MAAA,WACAhT,EAAAkC,SAAA0S,gBAAAd,EACA9T,EAAAkC,SAAA2S,eAAAf,EACA9T,EAAA2N,QAAA,EACA3N,EAAAiE,MAAA,SAAAjE,EAAAiT,QAAAM,iBAAAO,EAAAN,WAAA,QAAAxT,EAAA2N,SAEA3N,EAAAqE,IAAA,QAAArE,EAAAgT,OACA3R,EAAAW,IAAA,gBAOA,SAAA8S,oBAEA,OADAjV,EAAAC,SAAA,SAAA,iBAEA8G,SAAA,6EACA7F,OACAkS,OAAA,IACA8B,IAAA,IACA5F,IAAA,IACA6F,MAAA,KAEAnV,WAAAA,GAGA,SAAAA,EAAAG,EAAAqB,GAIA,SAAAuB,IACA5C,EAAA2N,OAAA3N,EAAAuT,YAAAwB,KAAA/U,EAAAuT,YAAApE,IACAnP,EAAAiE,MAAA,SAAAjE,EAAAiT,QAAAM,YAAAvT,EAAAuT,YAAAC,WAAA,eAAAxT,EAAA2N,QALA3N,EAAAuT,aAAAwB,SAAAjB,EAAA3E,SAAA2E,GACA9T,EAAA2N,QAAA,EAMA3N,EAAAgT,MAAA,WACAhT,EAAAuT,aAAAwB,SAAAjB,EAAA3E,SAAA2E,GACA9T,EAAA2N,QAAA,EACA3N,EAAAiE,MAAA,SAAAjE,EAAAiT,QAAAM,iBAAAO,EAAAN,WAAA,cAAAI,UAAA5T,EAAA4T,WAAA5T,EAAA2N,SAEA3N,EAAAqE,IAAA,QAAArE,EAAAgT,OAEAhT,EAAA4C,MAAA,WACAA,KAGA5C,EAAAoT,WAAA,SAAAC,GACA,KAAAA,EAAAC,OACA1Q,KAIAvB,EAAAW,IAAA,kBAQA,SAAAiT,iBAEA,OADApV,EAAAC,SAAA,WAEAe,SAAA,IACAd,YAAA,4CACAW,YAAA,EACAK,OACAmU,SAAA,IACAjC,OAAA,IACAkC,SAAA,IACAC,UAAA,KAEAvV,WAAAA,GAGA,SAAAA,EAAAG,GACAP,QAAA+C,YAAAxC,EAAAkV,YACAlV,EAAAkV,SAAA,GAGAzV,QAAA+C,YAAAxC,EAAAoV,aACApV,EAAAoV,UAAA,GAGApV,EAAAqV,WACAH,SAAAlV,EAAAkV,SACAjC,OAAAjT,EAAAiT,OACAkC,SAAAnV,EAAAmV,SACAC,UAAApV,EAAAoV,UACAzH,QAAA,GAGA3N,EAAAqE,IAAA,gBAAA,SAAAM,EAAAsO,EAAAiC,GACAlV,EAAAqV,UAAA1H,OAAAsF,IAAAjT,EAAAqV,UAAApC,OACAA,IAAAjT,EAAAqV,UAAApC,OACAjT,EAAAqV,UAAAH,SAAA,EAEAlV,EAAAqV,UAAAH,SAAAA,IAIAlV,EAAAsV,KAAA,WACA,IAAAtV,EAAAqV,UAAAH,UAAAzV,QAAA+C,YAAAxC,EAAAqV,UAAAH,UACAlV,EAAAqV,UAAAH,SAAAlV,EAAAqV,UAAAD,UACA,IAAApV,EAAAqV,UAAAH,SACAlV,EAAAqV,UAAAH,SAAA,EAEAlV,EAAAqV,UAAAH,SAAA,EAEAlV,EAAAiE,MAAA,OAAAjE,EAAAqV,UAAApC,OAAAjT,EAAAqV,UAAAH,SAAAlV,EAAAqV,UAAAF,YCrUA,SAAAI,iBAEA,OADA1V,EAAAC,SAAA,WAEAC,YAAA,8CACAiD,SAAA,QAAA,SACAjC,OACAyU,KAAA,IACA5L,GAAA,IACAxJ,KAAA,IACA4R,WAAA,KAEAnS,WAAAA,GAGA,SAAAA,EAAAG,GACAA,EAAA+B,QAAA,GAGA,IAAA0T,EAAA,0BACAC,EAAA,2BAQA,SAAAC,IACAlW,QAAAuI,QAAAyN,GAAAG,YAAA,eACAnW,QAAAuI,QAAAyN,GAAAG,YAAA,eACAnW,QAAAuI,QAAAyN,GAAAI,SAAA,cAGA7V,EAAA8V,eAAA,WACArW,QAAAuI,QAAAyN,GAAAI,SAAA,6BACA,IAEA3E,EACAtD,EAFA3N,EADAR,QAAAsW,UAAA,OACA7V,IAAA,SAGA,eAAAF,EAAAwV,MACAtE,EAAA,8BACAtD,GAAAnC,KAAAzL,EAAAgS,WAAAgE,SAAAhW,EAAAI,KAAA4V,SAAAC,SAAAjW,EAAAI,KAAA6V,UACA,YAAAjW,EAAAgS,YACApE,EAAAsI,OAAAlW,EAAAI,KAAA8V,OACAtI,EAAAsD,IAAAlR,EAAAI,KAAA8Q,MAEAtD,EAAAuI,KAAAnW,EAAAI,KAAA+V,KACAvI,EAAAwI,KAAApW,EAAAI,KAAAgW,KACAxI,EAAAyI,IAAArW,EAAAI,KAAAiW,MAEA,YAAArW,EAAAI,KAAAoV,OACAtE,EAAA,2BACAtD,GAAAuI,KAAAnW,EAAAI,KAAA+V,KAAAD,OAAAlW,EAAAI,KAAA8V,QACAzW,QAAAgL,UAAAzK,EAAAI,KAAA4V,YACApI,EAAA,SAAA5N,EAAAI,KAAA4V,SACApI,EAAA,SAAA5N,EAAAI,KAAA6V,WAGAhW,EAAAC,IAAAgR,GAAAtD,OAAAA,IAAAP,QAAA,SAAApK,GAEAA,EAAApB,YACApC,QAAAuI,QAAA0N,GAAA1F,KAAA,IAvCAvQ,QAAAuI,QAAAyN,GAAAG,YAAA,eACAnW,QAAAuI,QAAAyN,GAAAG,YAAA,cACAnW,QAAAuI,QAAAyN,GAAAI,SAAA,iBAwCApW,QAAAuI,QAAA0N,GAAA1F,KAAA/M,EAAAlB,SACA4T,OAGA7T,MAAA,WACArC,QAAAuI,QAAA0N,GAAA1F,KAAA/M,OAAAlB,SACA4T,MACAW,QAAA,WACA7W,QAAAuI,QAAAyN,GAAAG,YAAA,iCCzEA,SAAAW,QAAAC,EAAAC,GACA,MAAAD,EAAAA,EAAAE,aAAAF,IAAAC,IACA,QAAAD,EAcA,SAAAG,aAAAjO,EAAAkO,EAAA7O,GACA,OACAlH,SAAA,IACAsG,KAAA,SAAAnH,EAAAsQ,EAAArI,GAGAF,EAAA,WACA,IAAA8O,OAAA/C,IAAA7L,EAAA6O,aAAA7O,EAAA6O,aAAAnM,MAAA,YAGA,SAAAoM,EAAA/M,GACA,IAAAgN,EACAhP,EACAiP,EACArN,EACAsN,EACAC,EAGA,IAAA1X,QAAAuI,QAAAsI,GAAA8G,SAAA,aAKApN,GAAAA,EAAAG,UAIA1K,QAAAgL,UAAAxC,EAAAoP,gBAAArX,EAAAsX,MAAArP,EAAAoP,gBAGAd,QAAAvM,EAAAG,OAAAmG,EAAAiH,WACA,CAIA,IAAAvP,EAAAgC,EAAAG,OAAAnC,EAAAA,EAAAA,EAAA0O,WAAA,CAEA,GAAA1O,IAAAsI,EAAA,GACA,OAcA,GAVA1G,EAAA5B,EAAA4B,GACAsN,EAAAlP,EAAA0C,UACAyM,EAAAN,EAAA/T,OAGAoU,QAAApD,IAAAoD,EAAAM,UACAN,EAAAA,EAAAM,SAIAN,GAAAtN,EAGA,IAAAoN,EAAA,EAAAA,EAAAG,EAAAH,IAKA,GAHAC,EAAA,IAAAQ,OAAA,MAAAZ,EAAAG,GAAA,YAGAlD,IAAAlK,GAAAA,IAAAiN,EAAAG,IAAAE,GAAAD,EAAAS,KAAAR,GAEA,OAOAnP,EAAA,WACA6O,EAAA3O,EAAA,aACA0P,CAAA3X,GAAA2E,MAAAqF,OAyBA,SAAA4N,IAEA,MAAA,iBAAAC,QAAAC,UAAAC,eAtBAH,KACAlP,EAAAqB,GAAA,aAAAgN,GAIArO,EAAAqB,GAAA,QAAAgN,GAGA/W,EAAAqE,IAAA,WAAA,WACAuT,KACAlP,EAAAsP,IAAA,aAAAjB,GAGArO,EAAAsP,IAAA,QAAAjB,SCzGA,SAAAkB,eACA,OACAlY,YAAA,6CACAiD,SAAA,SAAA,QACAjC,OACAmX,MAAA,IACAC,IAAA,IACAC,KAAA,IACA5C,KAAA,KACAnN,QAAA,MAEAxI,YAAA,SAAA,WAAA,SAAA,SAAAG,EAAAkD,EAAAC,GACAnD,EAAAwV,KAAA/V,QAAAgL,UAAAzK,EAAAwV,MAAAxV,EAAAwV,KAAA,OACAxV,EAAAqI,QAAA5I,QAAAgL,UAAAzK,EAAAwV,MAAAxV,EAAAsX,MAAAnU,EAAAkF,eCbA,SAAAgQ,cAEA,OADAxY,EAAAC,SAAA,SAAA,gBAAA,SAAA,sBAAA,QAAA,uBAAA,QAAA,mBAEAC,YAAA,qCACAF,WAAAA,GAGA,SAAAA,EAAAG,EAAAsY,EAAAC,EAAA3H,EAAA3Q,EAAAuY,EAAArX,EAAAsX,GACAzY,EAAA0Y,kBAAA,WACAJ,EAAAK,iBAAAxY,KAAA,SAAAyY,GACA5Y,EAAA4Y,QAAAA,KAIA5Y,EAAA0Y,oBAEA1Y,EAAA6Y,cAAA,EAGA7Y,EAAA8Y,iBAAA,WACA7Y,EAAAC,IAAA,iCAAA0N,QAAAmL,cAAA,KAAA5Y,KAAA,WACAH,EAAA0Y,uBAGA1Y,EAAAgZ,4BAAA,WACApI,EAAAQ,aAAA,4BAAA,mBAAAzB,SAAAE,OAAA,oBAAA,OAAA,OAAA1P,KAAA,WACAH,EAAA0Y,uBAIA1Y,EAAAiZ,iBAAA,SAAAC,EAAAC,GACAX,EAAAY,oBAAA,WAEApZ,EAAAkZ,KAAAA,EACAlZ,EAAAqZ,QAAAF,GAAAA,EAAA,GACAD,IACAlZ,EAAA6Y,cAAA,EACAK,EAAAI,OAAAf,EAAAe,QACApI,IAAA,iCACAgI,KAAAA,IAGAA,EAAAI,OAAAnZ,KAAA,SAAAyB,GACA5B,EAAA6Y,cAAA,EACAK,EAAAjW,OAAArB,EAAAxB,KACAqY,EAAAc,QAAA,wBAEA,SAAA3X,GACA5B,EAAA6Y,cAAA,EACA1X,EAAAW,MAAAF,EAAAxB,OACA,SAAAoZ,GACAN,EAAAO,SAAAnS,KAAAyN,IAAA,IAAA2E,SAAA,IAAAF,EAAAG,OAAAH,EAAAI,QACAV,EAAAS,OAAArS,KAAAuS,MAAAL,EAAAG,OAAA,MACAT,EAAAU,MAAAtS,KAAAuS,MAAAL,EAAAI,MAAA,YAMA5Z,EAAA8Z,gBAAA,SAAA9I,GACAsH,EAAAwB,gBAAA9I,GAAA7Q,KAAA,WACAsY,EAAAc,QAAA,6EAEA,SAAA3X,GACAT,EAAAW,MAAAF,EAAAxB,UC/DA,SAAA2Z,YAAA1Y,GAEA,OADAxB,EAAAC,SAAA,SAAA,uBAEAC,YAAA,2CACAiD,WACAjC,OACAiZ,aAAA,IACAC,UAAA,KAEApa,WAAAA,GAGA,SAAAA,EAAAG,EAAA4R,GACA5R,EAAAia,UAAA,SAAAja,EAAAia,UACAtR,QAAA3G,IAAAhC,EAAAia,WACAja,EAAA6R,YAAApP,EAAAyI,OAAA0G,EAAAE,wBAAA,SAAAE,GACA,MAAA,QAAAhS,EAAAga,aAAA7H,cACAH,EAAAG,eAAAnS,EAAAga,aAAA7H,eAKA9Q,EAAAW,IAAA,iBCtBA,SAAAkY,WAAA7Y,GAEA,OADAxB,EAAAC,SAAA,SAAA,qBAAA,UAEAC,YAAA,0CACAgB,OACAiZ,aAAA,IACAhI,WAAA,IACAiI,UAAA,KAEApa,WAAAA,GAGA,SAAAA,EAAAG,EAAA4R,EAAAzQ,GACAnB,EAAAgS,WAAAmI,aACAna,EAAA0B,SAAA,SAAA1B,EAAAgS,WAAAmI,aAAArZ,QAAA,MAAA,IAAAA,QAAA,MAAA,IAEAd,EAAA0B,SAAA,YAAA1B,EAAAgS,WAAAoI,eAAA,UAAA,SAGApa,EAAA2B,IAAA,WACA,IAAA0Y,EAAAra,EAAA0B,SACA1B,EAAA0B,SAAA,eACAkQ,EAAAf,SAAA7Q,EAAAgS,aACA9Q,eAAAlB,EAAAga,aAAA9Y,eAAAlB,EAAAga,aAAA9Y,eAAAlB,EAAAga,aAAApQ,GACAyI,iBAAArS,EAAAga,aAAA3H,mBAAArS,EAAAia,WAAA9Z,KAAA,SAAAyB,GACA,cAAAA,EACAA,EAAAxB,KAAAyB,WACA7B,EAAA0B,SAAA,YAAA1B,EAAAgS,WAAAoI,eAAA,kBAAA,kBAEApa,EAAA0B,SAAA,YAAA1B,EAAAgS,WAAAoI,eAAA,gBAAA,eACAjZ,EAAAW,MAAA,oFAGA9B,EAAA0B,SAAA2Y,GAEA,WACAra,EAAA0B,SAAA,YAAA1B,EAAAgS,WAAAoI,eAAA,gBAAA,eACAjZ,EAAAW,MAAA,qFCpCA,SAAAuK,cAAApM,EAAAkB,EAAAmZ,EAAA7B,EAAAD,EAAApV,EAAA2E,GAUA,OACAiF,OA4DA,WACA,IAAAuN,EAAAnX,EAAAuD,MACA5G,YAAA,gCACAF,WAAA,0BACA4G,KAAA,KACA+T,SAAA,SACAC,UAAA,IAEAxa,EAAAO,IAAA,qCAAAL,KAAA,WAGA4H,EAAA,WAEA0Q,EAAAiC,eAAA,IACAH,EAAA7S,SACA,MAEA,WACAvG,EAAAqF,KAAA,4DACA+T,EAAA7S,WA9EAwF,YAkCA,WACA,OAAAjN,EAAAC,IAAA,oCAAAC,KAAA,SAAAyB,GACA,IAAAgM,GACAnH,KAAA,KACA1G,YAAA,mCACA+G,SACAiG,eAAA,WACA,OAAAnL,EAAAxB,OAGAP,WAAA,SAAAG,EAAAyN,EAAAjG,EAAAuF,GACA/M,EAAA+M,eAAAA,EAEA/M,EAAAyH,GAAA,WACAD,EAAAK,aAKA0S,EAAAnX,EAAAuD,KAAAiH,GACA2M,EAAAtX,OAAA9C,UArDAoM,SAKA,WACA,OAAAiM,EAAAY,oBAAA,WACA,OAAAnZ,EAAAC,IAAA,6BAAAC,KACA,SAAAC,GAKA,OAJAA,EAAAA,KAAAoM,eACApM,EAAAA,KAAAsM,cACAtM,EAAAA,KAAAuM,gBACAvM,EAAAA,KAAAwM,qBACAxM,OAZA0M,kBAyBA,WACA,OAAA7M,EAAAC,IAAA,sCAAAC,KAAA,SAAAC,GAEA,OADAA,EAAAA,KACAA,KA3BAua,OAkBA,SAAAC,GACA,OAAA3a,EAAAO,IAAA,sCAAAoa,GAAAza,KAAA,SAAAC,GACA,OAAAA,MAgEA,SAAAya,wBAAA7a,EAAAC,EAAAuN,EAAAgL,GACAxY,EAAA8a,YAEA,IAAAC,EAAAvN,EAAA,WACAgL,EAAAY,oBAAA,WACAnZ,EAAAC,IAAA,gCAAAC,KACA,SAAAC,GACAJ,EAAA8a,SAAA1a,EAAAA,UAKA,KAEAJ,EAAAqE,IAAA,WAAA,WACA,OAAA0W,GACAvN,EAAA5F,OAAAmT,KClHA,SAAAC,uBAAAhb,EAAAqM,EAAAmM,EAAAjV,EAAAtD,EAAAmD,EAAAhC,GAEApB,EAAA2M,iBAAA,EACA3M,EAAAib,SAAA,EAgBA,SAAAC,IACAlb,EAAAib,SAAA,EACA5O,EAAAE,WAAApM,KAAA,SAAAC,GACAJ,EAAAwM,eAAApM,EAAAA,KAAAoM,eACAxM,EAAA0M,cAAAtM,EAAAA,KAAAsM,cACA1M,EAAA2M,gBAAAvM,EAAAA,KAAAuM,gBACA3M,EAAA6M,UAAAzM,EAAAA,KAAAyM,YAiBA,SAAAsO,IACA3C,EAAAY,oBAAA,WACAhY,EAAAG,UAAA6Z,UACAnb,EAAAC,IAAA,sCAAAC,KAAA,SAAAC,GACAA,GAAAA,EAAA0C,OAAA,IACAM,EAAAuD,MACA5G,YAAA,8BACAF,WAAAwb,sBACA5U,KAAA,KACAK,SACAwG,KAAA,WACA,OAAAlN,MAIAH,EAAAO,IAAA,mCAnDAR,EAAAsb,UAAA/X,EAAAsC,eAAA0V,YAEAvb,EAAAqE,IAAA,gBAAA,WACAd,EAAAsC,eAAA0V,cAAAvb,EAAAib,SACAC,MAKAlb,EAAAsb,WACAJ,IAcAlb,EAAAgN,OAAA,WACAX,EAAAW,UAGAhN,EAAA2a,OAAA,WACAtO,EAAAsO,OAAA3a,EAAA0M,gBAGA1M,EAAAiN,cAAA,WACAZ,EAAAa,eA0BAsL,EAAAY,oBAAA,WACAnZ,EAAAC,IAAA,4BAAAmN,QAAA,SAAAmO,GACA,GAAAA,EAcA/Y,EAAAgZ,MAAAN,OAdA,CACAlb,EAAAO,IAAA,4BACA,IAAAkb,EAAAtY,EAAAuD,MACA5G,YAAA,iCACAF,WAAA8b,yBACAlV,KAAA,OAEAiV,EAAAjH,OAAAtU,KAAA,YACA,IAEAub,EAAAE,OAAAzb,KAAA,YACA,SAiBA,SAAAkb,sBAAArb,EAAAwH,EAAA8F,GACAtN,EAAAsN,KAAAA,EACAtN,EAAA0H,MAAA,WACAF,EAAAK,WAQA,SAAA8T,yBAAA3b,EAAAwH,EAAAqU,EAAAC,GACA9b,EAAA0H,MAAA,WACAF,EAAAK,WAGA7H,EAAA+b,eAAA,WACAvU,EAAAK,UACAiU,EAAAE,WAGAhc,EAAAic,WAAA,WACAzU,EAAAK,UACAgU,EAAAK,GAAA,qBCxHA,SAAAC,iBAAAnc,EAAA6b,EAAAO,EAAAnc,EAAAkB,EAAAsX,EAAAqD,EAAA1a,EAAAib,GAEArc,EAAAoc,UAAAA,EACApc,EAAAwD,KACA8Y,IAAA,GACAC,IAAA,IAGAvc,EAAAwc,SAAA,WACAH,EAAAG,WAAArc,KAAA,WACAgB,EAAAqF,KAAA,6BAEA,WACArF,EAAAqF,KAAA,uCAIAxG,EAAAuZ,QAAA,WACAd,EAAAc,WAGAvZ,EAAAyc,aAAA,WACArb,EAAAqb,eAAAtc,KAAA,WACAgB,EAAAqF,KAAA,kFACA,SAAApG,GACAe,EAAAW,MAAA1B,EAAA2B,YAKA/B,EAAAgc,QAAA,WACAF,EAAAE,WAIAhc,EAAA0c,UAEA/O,QAAA,EACAgP,MAAA,sBACAlR,KAAA,YAGAkC,QAAA,EACAgP,MAAA,sBACAlR,KAAA,YAGAkC,QAAA,EACAgP,MAAA,kBACAlR,KAAA,QAGAkC,QAAA,EACAgP,MAAA,oBACAlR,KAAA,UAGAkC,QAAA,EACAgP,MAAA,qBACAlR,KAAA,WAGAkC,QAAA,EACAgP,MAAA,wBACAlR,KAAA,sBAGAkC,QAAA,EACAgP,MAAA,mBACAlR,KAAA,SAGAkC,QAAA,EACAgP,MAAA,oBACAlR,KAAA,UAKAzL,EAAA4c,gBAAA,SAAAlT,GACAmS,EAAAK,GAAAlc,EAAA0c,QAAAhT,GAAAiT,OAAAP,UAAA1S,IAAAmT,SAAA,EAAAC,QAAA,EAAAC,QAAA,KAGA/c,EAAAgd,uBAAA,WACA/c,GAAAgR,OAAA,MAAAC,IAAA,sCAAA+L,aAAA,gBAAA5P,QAAA,SAAAjN,EAAAoR,EAAAC,EAAAC,GACA,IAAAwL,EAAApO,SAAAqO,cAAA,KACAC,EAAA,IAAAC,MAAAjd,IAAAoV,KAAA,6BACA0H,EAAAhW,KAAAoW,IAAAC,gBAAAH,GACAF,EAAArM,SAAA,uBAAAlB,SAAAE,OAAA,oBAAA,OAEAf,SAAA0O,KAAAC,YAAAP,GACAA,EAAAQ,QACA5O,SAAA0O,KAAAG,YAAAT,MAIAld,EAAA4d,gBAAA,WACA3d,EAAA4d,KAAA,yCAAA7d,EAAAwD,IAAA+Y,KAAAlP,QAAA,SAAAjN,GACAA,EAAAyB,WACA7B,EAAAwD,IAAA8Y,IAAAlc,EAAA2B,QAEAZ,EAAAW,MAAA1B,EAAA2B,YAKA/B,EAAA8d,iBAAA,WACA7d,EAAA4d,KAAA,0CAAA7d,EAAAwD,IAAA+Y,KAAAlP,QAAA,SAAAjN,GACAA,EAAAyB,WACA7B,EAAAwD,IAAA8Y,IAAAlc,EAAA2B,QAAA,iBAEAZ,EAAAW,MAAA1B,EAAA2B,YC/GA,SAAAgc,aAAA9d,GAEA,OACAC,IAIA,SAAAsU,EAAAG,EAAAqJ,EAAAC,GACA,IAAAC,GAAA1J,MAAAA,EAAAG,OAAAA,EAAAqJ,gBAAAA,GAEA,OADAE,EAAAzb,EAAA2G,OAAA8U,EAAAD,GACAhe,EAAA4d,KAAA,oBAAAK,GAAA7Q,QAAA,SAAAzL,GACA,OAAAA,EAAAxB,QAPA+d,mBAWA,SAAAC,EAAAtQ,EAAAoF,EAAAmC,GACA,IAAAzH,GAAAyQ,KAAAD,EAAAtQ,MAAAA,EAAAoF,YAAAA,GACAzT,QAAA+C,YAAA4b,KACAxQ,EAAAyQ,KAAA,GAEA5e,QAAA+C,YAAAsL,KACAF,EAAAE,MAAA,KAEArO,QAAA+C,YAAA0Q,KACAtF,EAAAsF,gBAEAzT,QAAA+C,YAAA6S,GAGAzH,EAAAyH,WACApC,OAAA,OACAiC,SAAA,GAJAtH,EAAAyH,UAAAA,EAOA,OAAApV,EAAA4d,KAAA,gCAAAjQ,GAAAP,QAAA,SAAAzL,GACA,OACA0c,aAAA1c,EAAA2E,QACAgY,eAAA3c,EAAA4c,mBCrCA,SAAAC,gBAAAze,EAAAyI,EAAAsV,EAAAzD,EAAAhX,EAAAyE,EAAA1E,EAAAjC,GAEApB,EAAAiU,aACAC,cAAA,EACAC,WAAA,KACAC,YAAA,GAEA,IAAAsK,GAAA,EACAC,GAAA,EACA3e,EAAA6U,UAAAlF,SAAAiP,SAAA,GAAA,QAAAC,SACA7e,EAAA4U,WAAAjF,SAAAhO,IAAA,EAAA,QAAAkd,SACA,IAAAC,EAAA,aAAA1d,EAAAG,UAAAwd,QAAAC,qBAAA,SAAA5d,EAAAG,UAAAwd,QAAAC,oBACAC,EAAA,OAAA7d,EAAAG,UAAAwd,QAAAC,qBAAA,SAAA5d,EAAAG,UAAAwd,QAAAC,oBA8DA,SAAAE,EAAAC,GACA7E,EAAA8E,MAAA,qBACA,IAAA5K,EAAA,OAAAxU,EAAA6U,UAAA7U,EAAA6U,UAAA,KACAF,EAAA,OAAA3U,EAAA4U,WAAA5U,EAAA4U,WAAA,KACAyK,KACA5f,QAAAgL,UAAA0U,GACAE,EAAAF,IAAA,EAEAE,EAAArf,EAAAwD,IAAA8b,gBAEAtf,EAAAuf,oBAAAxB,EAAA7d,IAAAsU,EAAAG,EAAA3U,EAAAwD,IAAAgc,+BAAAH,GAAAlf,KAAA,SAAAsf,GACAzf,EAAA0f,SAAAD,GAEA1X,EAAA,WACA1E,EAAAsc,cAAA,IAAAC,MAAA,YACA,OAGAtF,EAAA5O,QAyMA,SAAAmU,EAAAC,EAAAhP,EAAAiP,EAAAC,EAAAC,EAAAC,GACA,OACA7X,SACA8X,OACA3K,KAAAsK,EACAM,OAAA,IACAC,QACAC,IAAA,GACAC,MAAA,GACAC,OAAA,IACAC,KAAA,IAEAjV,EAAA,SAAAkV,GACA,OAAAA,EAAAX,IAEAY,EAAA,SAAAD,GACA,OAAAA,EAAAV,IAEAY,YAAA,EACAC,YAAA,SAAAH,GACA,OAAAA,GAEAI,MAAA,WACA,MAAA,OAEAC,cAAA,EACAC,YAAA,EACAC,SAAA,IACAC,OACAC,UAAAlB,EACAmB,WAAA,SAAAV,GACA,OAAAA,GAEAW,aAAA,GACAC,YAAA,EACAR,MAAA,WACA,MAAA,UAGAS,OACAJ,UAAAjB,EACAsB,mBAAA,GACAJ,WAAA,SAAAV,GACA,OAAAA,IAGAe,SACAC,SAAA,GAEAC,MACAD,SAAA,EACAE,aAAA,EAAA,IACAC,gBAAA,EACAC,cAAA,EACAC,eAAA,EACAC,aAAA,EACAC,gBAAA,mBAGA7hB,OACA8hB,IAAA,eACAC,KAAA,EACArR,OAAAA,KAtVA9Q,EAAAwD,KACAgc,+BAAA,OAAAlc,EAAApD,IAAA,mCAAAoD,EAAApD,IAAA,kCACAof,gBAAA,OAAAhc,EAAApD,IAAA,oBAAAoD,EAAApD,IAAA,qBAEAkiB,uBAAA,EACAC,+BAAA,EACAC,kBAAA,EACAC,uBAAA,EACAC,uBAAA,EACAC,uBAAA,EACAC,sBAAA,EACAC,sBAAA,EACAC,sBAAA,EACAC,+BAAA,EACAC,sBAAAhE,EACAiE,oBAAA9D,EACA+D,qBAAA,EACAC,mBAAA,EACAC,uBAAA,EACAC,yBAAA,IAGA7f,EAAA+L,IAAA,mBAAArP,EAAAwD,IAAA8b,iBACAtf,EAAAyf,SAEAP,IAGAlf,EAAAuU,UAAA,WACAvU,EAAAwU,MAAAC,QAAA,GAGAzU,EAAA0U,WAAA,WACA1U,EAAA2U,OAAAF,QAAA,GAGAzU,EAAAwU,OACAC,QAAA,GAGAzU,EAAA2U,QACAF,QAAA,GAGAzU,EAAAojB,8BAAA,WACA9f,EAAA+L,IAAA,iCAAArP,EAAAwD,IAAAgc,iCAGAxf,EAAAqjB,oBAAA,SAAAlE,GACA7b,EAAA+L,IAAA,mBAAArP,EAAAwD,IAAA8b,iBAEAtf,EAAAwD,IAAA8b,gBAAAH,IACAD,EAAAC,IAKAnf,EAAAsjB,QAAA,WACApE,KAwBAlf,EAAAsJ,OAAA,aAAA,WACAqV,IACAA,GAAA,KAOA3e,EAAAsJ,OAAA,YAAA,WACAoV,IACAA,GAAA,KAMA1e,EAAAoT,WAAA,SAAAC,GACAA,EAAAC,OAMAtT,EAAAqU,SAAA,eAAA,aAAA,aAAA,aACArU,EAAA6P,OAAA7P,EAAAqU,QAAA,GACArU,EAAAsU,iBAAA,cAEAtU,EAAA0f,SAAA,SAAAD,GAkBA,GAjBAA,EAAAA,EAAArf,KAGAqC,EAAA8I,QAAAkU,EAAA,SAAAlb,EAAA2d,GACA,OAAA3d,IACAvE,EAAAyf,MAAAyC,GAAA3d,KAKAvE,EAAAyf,MAAA6C,mBACAtiB,EAAAujB,sBAAA1D,EAAA,0BAAA7f,EAAAyf,MAAA6C,iBAAA,UAAA,kBAAA,GAAA,iBACAtiB,EAAAujB,sBAAAlb,QAAA8X,MAAAE,OAAAI,KAAA,IACAzgB,EAAAujB,sBAAAlb,QAAA8X,MAAAoB,MAAAF,cAAA,GACArhB,EAAAujB,sBAAAlb,QAAA8X,MAAAC,OAAA9Y,KAAA6H,IAAA,GAAAnP,EAAAyf,MAAA6C,iBAAAxf,OAAA,MAGA9C,EAAAyf,MAAA4C,8BAAA,CACAriB,EAAAwjB,oBA6NAnb,SACA8X,OACA3K,KAAA,gBACA4K,OAAA,IACAC,QACAC,IAAA,GACAC,MAAA,GACAC,OAAA,IACAC,KAAA,IAGAgD,UAAA,EACAxC,SAAA,IACAyC,SAAA,EACAC,cAAA,EACA/C,YAAA,EACAa,SACAC,SAAA,EACAkC,eAAA,SAAAlD,GACA,OAAAjY,EAAA,SAAAA,CAAAiY,EAAA,GAAA,MAGAK,cAAA,EACAG,OACAC,UAAA,GACAG,YAAA,EACAD,aAAA,GACAG,kBAAA,GACAJ,WAAA,SAAAV,GACA,OAAAA,IAGAa,OACAJ,UAAA,YACAK,mBAAA,GACAJ,WAAA,SAAAV,GACA,OAAAjY,EAAA,SAAAA,CAAAiY,EAAA,GAAA,QAMAtgB,OAEA8hB,IAAA,UACApR,OAAArO,EAAAsO,IAAA/Q,EAAAyf,MAAA4C,8BAAA,SAAA5C,GACA,OAAAoE,OAAA,EAAAlD,EAAAlB,EAAAqE,WAAAtY,EAAAiU,EAAAsE,iBAIA7B,IAAA,iBACApR,OAAArO,EAAAsO,IAAA/Q,EAAAyf,MAAA4C,8BAAA,SAAA5C,GACA,OAAAoE,OAAA,EAAAlD,EAAAlB,EAAAuE,YAAAxY,EAAAiU,EAAAsE,kBA/QA,IAAAE,EAAA,IACAjkB,EAAAwD,IAAAgc,+BAAAC,EAAAyE,2BAAAzE,EAAA0E,yBACA,KACAF,EAAA,IAEAjkB,EAAAwjB,mBAAAnb,QAAA8X,MAAAe,MAAAG,aAAA4C,EACAjkB,EAAAwjB,mBAAAnb,QAAA8X,MAAAC,OAAA,IAgFA,SAAAgE,EAAAhkB,EAAAggB,EAAAiE,EAAAC,GACA,OACAjc,SACA8X,OACA3K,KAAA,WACA4K,OAAAA,EACA5U,EAAA,SAAAkV,GACA,OAAAA,EAAA2D,IAEA1D,EAAA,SAAAD,GACA,OAAAA,EAAA4D,IAEAC,YAAA,EACAC,OAAA,EACAC,WAAA,IACAxD,SAAA,IACAyD,eAAA,IACAC,eAAA,EAEAC,oBAAA,EACAnD,SACAmC,eAAA,SAAAlD,EAAA1J,GACA,OAAAvO,EAAA,SAAAA,CAAAiY,EAAA,GAAA,MAGAmE,QACAxE,QACAC,IAAA,EACAC,MAAA,GACAC,OAAA,EACAC,KAAA,MAKArgB,KAAAA,GA/GAJ,EAAAyf,MAAAgD,wBACAziB,EAAA8kB,2BAAAjF,EAAA,mBAAA7f,EAAAyf,MAAAgD,sBAAA,OAAA,QAAA,cAAA,aACAziB,EAAA8kB,2BAAAzc,QAAA8X,MAAAe,MAAAG,aAAA,GAGArhB,EAAAyf,MAAA+C,wBACAxiB,EAAA+kB,2BAAAlF,EAAA,mBAAA7f,EAAAyf,MAAA+C,sBAAA,MAAA,QAAA,cAAA,aACAxiB,EAAA+kB,2BAAA1c,QAAA8X,MAAAe,MAAAG,aAAA,GAGArhB,EAAAyf,MAAAkD,uBACA3iB,EAAAglB,0BAAAnF,EAAA,mBAAA7f,EAAAyf,MAAAkD,qBAAA,OAAA,QAAA,cAAA,YACA3iB,EAAAglB,0BAAA3c,QAAA8X,MAAAe,MAAAG,aAAA,GAGArhB,EAAAyf,MAAAiD,uBACA1iB,EAAAilB,0BAAApF,EAAA,mBAAA7f,EAAAyf,MAAAiD,qBAAA,MAAA,QAAA,cAAA,YACA1iB,EAAAilB,0BAAA5c,QAAA8X,MAAAe,MAAAG,aAAA,GAGArhB,EAAAyf,MAAAmD,uBACA5iB,EAAAklB,qBAAArF,EAAA,mBAAA7f,EAAAyf,MAAAmD,qBAAAuC,gBAAA,MAAA,QAAA,oBAAA,aACAnlB,EAAAklB,qBAAA7c,QAAA8X,MAAAe,MAAAG,aAAA,GACArhB,EAAAklB,qBAAA7c,QAAA8X,MAAAS,YAAA,GAGA5gB,EAAAyf,MAAAoD,gCACA7iB,EAAAolB,mCAAAvF,EAAA,0BAAA7f,EAAAyf,MAAAoD,8BAAA,cAAA,oBAAA,UAAA,gBACA7iB,EAAAolB,mCAAA/c,QAAA8X,MAAAe,MAAAG,aAAA,GACArhB,EAAAolB,mCAAA/c,QAAA8X,MAAAoB,MAAAH,WAAA,SAAAV,GACA,OAAAjY,EAAA,SAAAA,CAAAiY,EAAA,IAEA1gB,EAAAolB,mCAAA/c,QAAA8X,MAAAU,YAAA,SAAAH,GACA,OAAAjY,EAAA,SAAAA,CAAAiY,EAAA,IAEA1gB,EAAAolB,mCAAA/c,QAAA8X,MAAAS,YAAA,GAGA5gB,EAAAyf,MAAA8C,wBACAviB,EAAAqlB,4BACAhd,SACA8X,OACA3K,KAAA,WACA4K,OAAA,IACA5U,EAAA,SAAAkV,GACA,OAAAA,EAAAqD,aAEApD,EAAA,SAAAD,GACA,OAAAA,EAAA4E,OAEAf,YAAA,EACAC,OAAA,EACAC,WAAA,IACAxD,SAAA,IACAyD,eAAA,IACAE,oBAAA,EACAnD,SACAmC,eAAA,SAAAlD,EAAA1J,GACA,OAAAvO,EAAA,SAAAA,CAAAiY,EAAA,GAAA,MAGAmE,QACAxE,QACAC,IAAA,EACAC,MAAA,GACAC,OAAA,EACAC,KAAA,MAKArgB,KAAAJ,EAAAyf,MAAA8C,uBAEAviB,EAAAqlB,2BAAAhd,QAAA8X,MAAAC,OAAA9Y,KAAAyN,IAAAzN,KAAA6H,IAAA,IAAAnP,EAAAwD,IAAAgc,+BAAAxf,EAAAyf,MAAAyE,2BAAAlkB,EAAAyf,MAAA0E,yBAAA,KAAA,MA0CA,OAAAnkB,EAAAyf,MAAAwD,oBACAjjB,EAAAulB,yBAAAnB,EAAApkB,EAAAyf,MAAAuD,oBAAA,IAAA,MAAA,eAEA,OAAAhjB,EAAAyf,MAAA+F,yBACAxlB,EAAAwlB,uBAAApB,EAAApkB,EAAAyf,MAAAwD,kBAAA,IAAA,MAAA,eAEA,OAAAjjB,EAAAyf,MAAAsD,sBACA/iB,EAAAylB,2BAAArB,EAAApkB,EAAAyf,MAAAqD,sBAAA,IAAA,MAAA,eAEA,OAAA9iB,EAAAyf,MAAAiG,2BACA1lB,EAAA0lB,yBAAAtB,EAAApkB,EAAAyf,MAAAsD,oBAAA,IAAA,MAAA,eAGA/iB,EAAAyf,MAAAyD,wBACAljB,EAAA2lB,2BAAAvB,EAAApkB,EAAAyf,MAAAyD,sBAAA,IAAA,YAAA,cACAljB,EAAA2lB,2BAAAtd,QAAA8X,MAAA0E,OAAAxE,OAAAG,OAAA,IAEAxgB,EAAAyf,MAAA0D,0BACAnjB,EAAA4lB,6BAAAxB,EAAApkB,EAAAyf,MAAA0D,wBAAA,IAAA,YAAA,cACAnjB,EAAA4lB,6BAAAvd,QAAA8X,MAAA0E,OAAAxE,OAAAG,OAAA,KC/RA,SAAAqF,cAAA5lB,GAGA,IAAA6lB,EACAC,EACAC,EACAzL,EAEA,OACA0L,OAgBA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAA3gB,EAAA,IAAAC,IAAA,sBACA2gB,KACAA,EAAAZ,gBAAAA,EACAY,EAAAV,MAAAA,EACAU,EAAAN,QAAAA,EACAM,EAAAL,QAAAA,EACAK,EAAAJ,OAAAA,EACAI,EAAAH,OAAAA,EACAG,EAAAX,SAAAA,EACA1mB,QAAA+C,YAAAokB,IAAA,OAAAA,IACAE,EAAAF,SAAAA,EAAAjc,MAAA,MAGA0b,IACAS,EAAA5O,MAAAmO,EAAAnO,MACAiO,EAAAxc,QAAA,WAAA,GAAA,IAAAwc,EAAAxc,QAAA,OAAA,UAAAkd,GACAC,EAAAC,OAAAV,EAAAU,OACAD,EAAAE,OAAAX,EAAAW,SACAb,EAAAxc,QAAA,OAAA,GAAA,IAAAwc,EAAAxc,QAAA,OAAA,aAAAkd,KACAC,EAAAG,OAAAZ,EAAAY,OACAH,EAAAI,SAAAb,EAAAc,IACAL,EAAAM,SAAAf,EAAAc,IACAL,EAAAR,OAAAA,EACAQ,EAAAP,QAAAA,IAMA,OAFAT,EAAA5f,EACA6f,EAAAe,EACA7mB,EAAA4d,KAAA3X,EAAAE,WAAA0gB,GAAA3mB,KAAAknB,IA9CAC,eAsFA,WACA,OAAAtB,GAtFAuB,SAgDA,SAAA1Z,EAAAC,EAAA0Z,GAKA,OAJAzB,EAAAlY,OAAAA,EACAkY,EAAAjY,MAAAA,EACAiY,EAAAyB,UAAA/nB,QAAAgL,UAAA+c,IAAAA,EAEAvnB,EAAA4d,KAAAiI,EAAA1f,WAAA2f,GAAA5lB,KAAAknB,IApDAI,eAuDA,SAAAvB,GACA,OAAAjmB,EAAAC,IAAA,4BAAA0N,QAAA8Z,gBAAAxB,MAvDAyB,iBAIA,WACA,OAAApN,GAJAqN,iBAOA,SAAAC,GACAtN,EAAAsN,IAiDA,SAAAR,EAAAzlB,GACA,IAAA6O,EAAA7O,EAAAxB,KAAAqQ,cACAqX,EAAAlmB,EAAAxB,KAAA0nB,uBACAC,EAAAnmB,EAAAxB,KAAA2nB,yBACAC,EAAApmB,EAAAxB,KAAA4nB,wBACAC,EAAArmB,EAAAxB,KAAA6nB,wBACAC,EAAAtmB,EAAAxB,KAAA8nB,yBACAC,EAAAvmB,EAAAxB,KAAA+nB,mBACAC,EAAAxmB,EAAAxB,KAAAgoB,4BAcA,OAZApC,GACAvV,cAAAA,EACAqX,uBAAAA,EACAC,yBAAAA,EACAE,wBAAAA,EACAD,wBAAAA,EACAE,yBAAAA,EACAC,mBAAAA,EACAC,4BAAAA,ICzFA,SAAAC,wBAAAC,EAAAtoB,EAAAuoB,EAAAxgB,EAAAW,EAAA4R,EAAAnZ,EAAAmC,EAAAuiB,EAAAzkB,EAAAonB,EAAAnnB,GAEAA,EAAAW,IAAA,UACAhC,EAAAyoB,QAAA,IACAzoB,EAAA6N,OAAA,EAGA7N,EAAA0oB,gBAAA7C,EAAAyB,iBAAAQ,uBACA9nB,EAAAooB,+BACA3lB,EAAA8I,QAAAsa,EAAAyB,iBAAAc,4BAAA,SAAAO,EAAAC,GACA5oB,EAAAooB,4BAAAzlB,MAAA0I,QAAAud,EAAAC,OAAAF,MAEA3oB,EAAA8oB,sBACA9oB,EAAA+oB,iBACA/oB,EAAAkC,YACAomB,EAAApQ,MACAlY,EAAA0Q,YAAA4X,EAAApQ,MACAoQ,EAAAlC,MACApmB,EAAA0Q,YAAA4X,EAAAlC,MAEApmB,EAAA0Q,iBAAAoD,EAGA9T,EAAAgpB,YAAAvmB,EAAAsO,IAAA/Q,EAAAkC,SAAA,SAAAqC,GACA,OAAAA,EAAArD,iBAIAlB,EAAAipB,oBAAA,KACAjpB,EAAAkpB,iBAAA,KAEA,IAAAC,KACA9T,KACArV,EAAAkT,eAEAlT,EAAAopB,oBAAAhoB,EAAAG,UAAA8nB,UAAAC,uBACAtpB,EAAAupB,yBAAAvpB,EAAAopB,qBAAAd,EAAAnC,SAAAqD,cAAA7f,QAAA,UAAA,EACA3J,EAAAypB,sBAAAzpB,EAAAopB,qBAAAd,EAAAnC,SAAAqD,cAAA7f,QAAA,OAAA,EACA3J,EAAA0pB,oBACAC,UACAC,YAEA5pB,EAAA6pB,uBACAC,IAAA,QACAC,OAAA,MAAA,MACAC,KAAA,SAAA,SAAA,SACAC,KAAA,OACAC,QAAA,SAAA,YAGA7U,EADA,OAAA/R,EAAApD,IAAA,WACAoD,EAAApD,IAAA,YAGA+S,OAAA,QACAiC,SAAA,EACAC,UAAA,GAGApN,EAAA,WACA/H,EAAA+S,WAAA,gBAAAsC,EAAApC,OAAAoC,EAAAH,SAAAG,EAAAF,WACA,IAGAnV,EAAAwD,KACA2mB,wBAAA,OAAA7mB,EAAApD,IAAA,4BAAAoD,EAAApD,IAAA,2BACA6D,oBAAA,OAAAT,EAAApD,IAAA,wBAAAoD,EAAApD,IAAA,uBACAkqB,8BAAA,OAAA9mB,EAAApD,IAAA,kCAAAoD,EAAApD,IAAA,iCACAmqB,SAAA,OAAA/mB,EAAApD,IAAA,aAAAoD,EAAApD,IAAA,YACAoqB,gBAAA,OAAAhnB,EAAApD,IAAA,oBAAAoD,EAAApD,IAAA,oBAEAF,EAAAuqB,iBAAA,EACAvqB,EAAAwqB,uBAAA,EACAxqB,EAAAyqB,uBACAzqB,EAAA0qB,iBACA9gB,GAAA,sBAAA+gB,MAAA,oCACA/gB,GAAA,gCAAA+gB,MAAA,qCACA/gB,GAAA,WAAA+gB,MAAA,iEACA/gB,GAAA,kBAAA+gB,MAAA,oCAEA3qB,EAAA4qB,wBACA,IAAA,IAAA1I,KAAAliB,EAAA0qB,eACA1qB,EAAAwD,IAAAxD,EAAA0qB,eAAAxI,GAAA,KACAliB,EAAA4qB,qBAAAjoB,KAAA3C,EAAA0qB,eAAAxI,GAAAtY,IAwFA,SAAAihB,IACAC,EAAA,0BAAA3qB,KAAA,WACAH,EAAA+qB,gBAAAC,EAAA7B,GAEA7lB,EAAA+L,IAAA,UAAAgG,KAKA,SAAAyV,EAAA/oB,GACA,IAAAkpB,EAAA1C,EAAA9M,QAKA,OAJAnB,EAAA8E,MAAArd,GACAgG,EAAA,WACAkjB,EAAAnkB,WACA,IACAmkB,EAAAvP,QAmCA,SAAAwP,EAAAljB,GACA,OAAAA,EAAAkQ,MAAAsR,cAAA1oB,QAAA,cAAA,IAGA,SAAAqqB,EAAAnjB,GACA,IAAAojB,EAAAF,EAAAljB,GAIA,OAHAhI,EAAAwD,IAAA4mB,gCACAgB,GAAApjB,EAAAmK,cAEAiZ,EAGA,SAAAJ,EAAAK,GAEA,IAAAjF,EACAkF,EACA,UAAAtrB,EAAAkT,cACAkT,EAAApmB,EAAAkT,YAAAgF,MAAA3E,YACA+X,EAAAlF,EAAAoD,cAAA7e,MAAA,aAwFA,IAAA4gB,EAAAlW,EAAApC,OACAuY,EAAAnW,EAAAF,SAEA,SAAAsW,EAAAC,GAiBA,MAfA,UAAAH,EACA,OAAAG,EAAA,QACAA,EAAA,QACA,OAAAA,EAAA,MACAA,EAAA,MAEA,EAEA,UAAAH,EACAL,EAAAQ,GACA,YAAAH,EACAG,EAAA,QAAAlC,cAEAkC,EAAAH,GAuDA,IAAAI,EAAAlpB,EAAAyI,OAAAmgB,EA9JA,SAAA1jB,GACA,GAAA,SAAA3H,EAAAkT,YAAA,CACA,IAAAK,EAAAvT,EAAAkT,YAAAzM,KAAA8M,YACA,GAAA9T,QAAAgL,UAAA8I,EAAAwB,MAAApN,EAAAlB,KAAA,KAAA,KAAA8M,EAAAwB,IACA,OAAA,EAEA,GAAAtV,QAAAgL,UAAA8I,EAAApE,MAAAxH,EAAAlB,KAAA,KAAA,KAAA8M,EAAApE,IACA,OAAA,EAIA,GAAA,UAAAnP,EAAAkT,YAAA,CACAK,EAAAvT,EAAAkT,YAAA0Y,MAAArY,YAAA,IACAsY,EAAAlc,OAAAmc,MAAAC,KAAApc,OAAAqc,KAAArkB,EAAAikB,OAAA,QACA,GAAAnsB,QAAAgL,UAAA8I,EAAAwB,MAAA8W,EAAAtY,EAAAwB,IACA,OAAA,EAEA,GAAAtV,QAAAgL,UAAA8I,EAAApE,MAAA0c,EAAAtY,EAAApE,IACA,OAAA,EAIA,GAAA,UAAAnP,EAAAkT,YAAA,CAEA,GADAK,EAAAvT,EAAAkT,YAAA+Y,MAAA1Y,YACA9T,QAAAgL,UAAA8I,EAAAwB,OACA,OAAApN,EAAAukB,SAAAvkB,EAAAukB,QAAA3Y,EAAAwB,KAAA,OAAApN,EAAAukB,SAAA,OAAAvkB,EAAAskB,OAAAtkB,EAAAskB,MAAA1Y,EAAAwB,KACA,OAAA,EAGA,GAAAtV,QAAAgL,UAAA8I,EAAApE,OACA,OAAAxH,EAAAukB,SAAAvkB,EAAAukB,QAAA3Y,EAAApE,KAAA,OAAAxH,EAAAukB,SAAA,OAAAvkB,EAAAskB,OAAAtkB,EAAAskB,MAAA1Y,EAAApE,KACA,OAAA,EAKA,GAAA,UAAAnP,EAAAkT,cACAzQ,EAAA0pB,MAAAb,EAAA,SAAAc,GACA,OAAAzkB,EAAAuQ,MAAAsR,cAAA7f,QAAAyiB,IAAA,IAEA,OAAA,EAEA,GAAA,YAAApsB,EAAAkT,cACA,IAAAzQ,EAAAkH,QAAA3J,EAAAkT,YAAA7H,QAAAkI,YAAA5L,EAAA0D,SACA,OAAA,EAGA,GAAA,aAAArL,EAAAkT,cACA,IAAAzQ,EAAAkH,QAAA3J,EAAAkT,YAAAiT,SAAA5S,YAAA5L,EAAAwe,UACA,OAAA,EAGA,GAAA,OAAAnmB,EAAA0pB,mBAAAC,OAAA,CACA,IAAA0C,KAMA,GALA5pB,EAAA6pB,KAAAtsB,EAAA0pB,mBAAAC,OAAA,SAAAplB,EAAA2d,GACA3d,GACAgoB,MAAAC,UAAA7pB,KAAAC,MAAAypB,EAAArsB,EAAA6pB,sBAAA3H,MAGAmK,EAAAvpB,OAAA,KACA2pB,EAAAhqB,EAAA2I,IAAAihB,EAAA,SAAAD,GACA,OAAAzkB,EAAAuQ,MAAAsR,cAAA7f,QAAAyiB,IAAA,KAGA,OAAA,EAIA,GAAA,OAAApsB,EAAA0pB,mBAAAE,UAAAnnB,EAAAiqB,QAAA1sB,EAAA0pB,mBAAAE,SAAA,CACA,IAAA6C,GAAA,EACAE,GAAA,EAOA,OANAlqB,EAAA6pB,KAAAtsB,EAAA0pB,mBAAAE,QAAA,SAAArlB,EAAA2d,GACAyK,EAAAA,GAAApoB,EACAA,GAAAoD,EAAAuQ,MAAAsR,cAAA7f,QAAAuY,EAAA0K,UAAA,KAAA,IACAH,GAAA,MAGAE,GAAAF,EAGA,OAAA,IA+EAI,EAAA7sB,EAAAkC,SACAO,EAAA8I,QAAAvL,EAAAkC,SAAA,SAAAsJ,IACA,IAAAmgB,EAAAhiB,QAAA6B,KACA7C,QAAA3G,IAAA,YAAAwJ,EAAA0M,MAAA,oDACAlY,EAAA+S,WAAA,kBAAAvH,GAAA,GACAqhB,EAAAhqB,OAAA7C,EAAAkC,SAAAyH,QAAA6B,GAAA,MAGAxL,EAAAkC,SAAA2qB,EAEA,IAAAC,EAAArqB,EAAAsqB,QAAApB,EAAAR,GACA6B,EAAAvqB,EAAAsO,IAAA+b,EA9DA,SAAAG,GAuBA,IAAAH,EAAArqB,EAAAsqB,QAAAE,EAAA,QACAD,EAAAvqB,EAAAsO,IAAA+b,EAvBA,SAAAI,GAEA,IAAAC,EAAA1qB,EAAA2qB,OAAAF,EAAA,SAAAvlB,GACA,IAAA0lB,EAAA5B,EAAA9jB,GACA,OAAA6jB,GAAA6B,EAAAA,IAMA,OAHAF,EAAA1qB,EAAA2qB,OAAAD,EAAA,SAAAxlB,GACA,OAAA,EAAAA,EAAA2lB,iBAgBAC,EAAA9qB,EAAA2qB,OAAAJ,EAXA,SAAAE,GACA,MAAA,UAAA3B,GAEA,EAAA2B,EAAA,GAAA,MAEAzB,EAAAyB,EAAA,MAWA,OAJA,IAAA7X,EAAAH,UAAA,UAAAqW,IACAgC,EAAAA,EAAAC,WAGAD,IAiCAA,EAAA9qB,EAAA2qB,OAAAJ,EA9BA,SAAAC,GACA,IAAAI,EACA,GAAA,UAAA9B,GAAAvrB,EAAAwD,IAAA6mB,SAAA,CACA,IAAAoD,EAAA,EACAhrB,EAAA6pB,KAAAW,EAAA,SAAAS,GACAjrB,EAAA6pB,KAAAoB,EAAA,SAAAC,GACAF,GAAAhC,EAAAkC,OAIAN,EAAAI,OAEAJ,EAAA5B,EAAAwB,EAAA,GAAA,IAEA,OAAAI,IAiBA,IAAAhY,EAAAH,WACAqY,EAAAA,EAAAC,WAGAxtB,EAAAipB,oBAAA,KAEA,IAAA8B,KAqBA,OApBAtoB,EAAA8I,QAAAgiB,EAAA,SAAAN,GACA,IAAAtpB,EAAA,EACAlB,EAAA8I,QAAA0hB,EAAA,SAAAW,GACA,IAAAC,EAAA,EACAprB,EAAA8I,QAAAqiB,EAAA,SAAA3qB,GACAA,EAAAiB,oBAAAinB,EAAAloB,GACAA,EAAAU,gBAAAA,EACAV,EAAAa,oBAAA+pB,EACA5qB,EAAA6qB,iBAAAF,EAAA9qB,OACAG,EAAA8qB,aAAAd,EAAAnqB,OACAioB,EAAApoB,KAAAM,GACA4qB,GAAA,IAEAlqB,GAAA,MAIA3D,EAAA+S,WAAA,yBAGAgY,EAUA,SAAAiD,IACA1T,EAAA5O,QAGA,SAAAuiB,EAAA7tB,EAAA8tB,GAGA/E,EAsCA,SAAA1Y,GAKA,IAJA,IAAA0d,KACAC,KACAC,EAAA5d,EAAA3N,OACAwrB,EAAA,EACAtX,EAAA,EAAAA,EAAAqX,EAAArX,IAAA,CACA,IAAArP,EAAA8I,EAAAuG,GACA,IAAAmX,EAAAxmB,EAAAzG,kBACAitB,EAAAxmB,EAAAzG,gBAAA,EACAktB,EAAAE,KAAA3mB,GAGA,OAAAymB,EAlDAG,CADApF,EAAA+E,EAAAM,OAAApuB,EAAAqQ,gBAEAzQ,EAAA+qB,gBAAAC,EAAA7B,GAEAnpB,EAAA+nB,yBAAA3nB,EAAA2nB,yBACA/nB,EAAAmoB,mBAAA/nB,EAAA+nB,mBACAnoB,EAAAyuB,oBAAAhsB,EAAAiqB,QAAAtsB,EAAA+nB,oBACAnoB,EAAA0uB,gCAAAjsB,EAAA2I,IAAAhL,EAAA0nB,uBAAA,SAAAtc,GACA,OAAAA,EAAAmjB,gBAEA3uB,EAAAioB,wBAAA7nB,EAAA6nB,wBACAjoB,EAAAgoB,wBAAA5nB,EAAA4nB,wBACAhoB,EAAAkoB,yBAAA9nB,EAAA8nB,yBACAloB,EAAA4uB,sBAAAzF,EAAArmB,OACA9C,EAAA0oB,gBAAAtoB,EAAA0nB,uBAEA9nB,EAAAuqB,gBAAAvqB,EAAA4uB,sBAAA5uB,EAAAgoB,wBAAAhoB,EAAA+nB,0BAAAtlB,EAAA2I,IAAAhL,EAAA0nB,uBAAA,SAAAtc,GACA,OAAAA,EAAAqjB,iBAEA7uB,EAAAwqB,sBAAA/nB,EAAA2I,IAAAhL,EAAA0nB,uBAAA,SAAAtc,GACA,OAAAA,EAAAsjB,qBAGA9uB,EAAAwD,IAAA2mB,yBAAA1nB,EAAA2I,IAAAhL,EAAA0nB,uBAAA,SAAAtc,GACA,OAAAA,EAAAmjB,iBAEAxtB,EAAAqF,KAAA,4DAGAxG,EAAA+uB,0BACA,IAAAC,EAAAvsB,EAAA8rB,KAAA9rB,EAAAqH,MAAAqf,EAAA,aACA1mB,EAAA8I,QAAAid,EAAAyG,gBAAA,SAAA9I,GACA6I,EAAArlB,QAAAwc,EAAA1a,OAAA,GACAzL,EAAA+uB,uBAAApsB,MAAAgoB,MAAAxE,EAAA1a,KAAA7B,GAAAuc,EAAA1a,SAnZAzL,EAAAkvB,sBACAnmB,eAAA,EACAC,iBAAA,EACAK,WAAA,mBAIArJ,EAAAmvB,eACAjmB,aAAA,SAAAvB,EAAA3C,GAgCA,IAAAT,EANAA,EANAA,EANAA,EAbAoE,QAAA3G,IAAA2F,EAAAiC,GAAA,KAAA5E,GACA,wBAAA2C,EAAAiC,IAYArF,EAXAS,EAYA1B,EAAA+L,IAAA,sBAAA9K,GACAvE,EAAA+S,WAAA,sBAAAxO,GACAvE,EAAAwD,IAAAO,oBAAAQ,GAbA,kCAAAoD,EAAAiC,IAgBArF,EAfAS,EAgBA1B,EAAA+L,IAAA,gCAAA9K,GACAvE,EAAAwD,IAAA4mB,8BAAA7lB,EACAsmB,KAjBA,aAAAljB,EAAAiC,IAoBArF,EAnBAS,EAoBA1B,EAAA+L,IAAA,WAAA9K,GACAvE,EAAAwD,IAAA6mB,SAAA9lB,EACAsmB,KArBA,oBAAAljB,EAAAiC,KAwBArF,EAvBAS,EAwBA1B,EAAA+L,IAAA,kBAAA9K,GACAvE,EAAAwD,IAAA8mB,gBAAA/lB,KAIAvE,EAAAovB,wBACA3sB,EAAA8I,QAAAvL,EAAA0oB,gBAAA,SAAArd,GACArL,EAAAovB,qBAAAzsB,MAAAgoB,MAAAtf,EAAA0Y,YAAAna,GAAAyB,EAAA0Y,gBAEA/jB,EAAA+uB,0BACAtsB,EAAA8I,QAAAid,EAAAyG,gBAAA,SAAA9I,GACAnmB,EAAA+uB,uBAAApsB,MAAAgoB,MAAAxE,EAAA1a,KAAA7B,GAAAuc,EAAA1a,SAEAhJ,EAAA8I,QAAAvL,EAAA0oB,gBAAA,SAAA2G,GACArvB,EAAA8oB,mBAAAuG,EAAAtL,YAAAyF,gBAAA8F,cAAAD,EAAAE,kBAGAtB,EAAApI,EAAAyB,qBACAtnB,EAAAiE,MAAA,sBACA4hB,EAAAyB,iBAAA7W,eAAA,IAAAoV,EAAAyB,iBAAA7W,cAAA3N,QAEA+iB,EAAA8B,mBAAAjgB,QAKA1H,EAAAwvB,qBAEA,SAAA7nB,GACA,OAAAA,EAAA,GAAA3H,EAAAyvB,gBAIAzvB,EAAA0vB,QAEA,SAAA/nB,GACA,OAAAA,EAAA,GAAA,GAAAzG,gBAGAlB,EAAA2vB,2BAAA,WACA9E,KAqBA7qB,EAAAqE,IAAA,OAAA,SAAAM,EAAAsO,EAAAiC,EAAAC,GAEAE,EADA,IAAAH,GAEAjC,OAAA,QACAiC,SAAA,EACAC,UAAA,IAIAlC,OAAAA,EACAiC,SAAAA,EACAC,SAAAA,GAGApN,EAAA,WACA/H,EAAA+S,WAAA,gBAAAsC,EAAApC,OAAAoC,EAAAH,SAAAG,EAAAF,WACA,IACA0V,MAGA7qB,EAAAqE,IAAA,SAAA,SAAAM,EAAAsO,EAAAC,EAAAL,GACAK,EAAAK,aAAAV,EACA7S,EAAAkT,YAAAD,GAAAC,SAEAlT,EAAAkT,YAAAD,GAEA4X,MAGA7qB,EAAA4vB,OAAA,aAkOA5vB,EAAA6vB,uBAAA,SAAA5C,GACAjtB,EAAA+oB,cAAAkE,EAAA,GAAA,GAAA/U,QAAAlY,EAAA+oB,cAAAkE,EAAA,GAAA,GAAA/U,OACAlY,EAAA+oB,cAAAkE,EAAA,GAAA,GAAA7oB,OAAApE,EAAA+oB,cAAAkE,EAAA,GAAA,GAAA7oB,OAGApE,EAAAguB,aAAAA,EA8DAhuB,EAAAunB,SAEA,SAAAC,GACAsD,EAAAtD,EAAA,yBAAA,2BAAArnB,KAAA,WACA,IAAA2N,EAAA0Z,EAAAxnB,EAAA+nB,yBAAA/nB,EAAAkoB,yBAAA,KACArC,EAAA0B,SAAAvnB,EAAA4uB,sBAAA9gB,EAAA0Z,GAAArnB,KAAA,SAAAC,GACA6tB,EAAA7tB,EAAA+oB,QAOAnpB,EAAA8vB,aAEA,WACA,OAAA3G,EAAArmB,QAGA9C,EAAAoC,gBAAA,WACApC,EAAA+S,WAAA,oBAGA/S,EAAAsC,YAAA,WACAtC,EAAA+S,WAAA,gBAGA/S,EAAAqC,UAAA,WACArC,EAAA+S,WAAA,cAGA/S,EAAA+vB,sBAAA,WACA/vB,EAAAwD,IAAA2mB,yBAAAnqB,EAAAwD,IAAA2mB,wBACA7mB,EAAA+L,IAAA,0BAAArP,EAAAwD,IAAA2mB,0BAGAnqB,EAAAgwB,0BAAA,WACA,GAAAvtB,EAAAiqB,QAAA1sB,EAAAmoB,oBACA,MAAA,sBAEA,IAAA1G,EAAA,qCAMA,OALAA,GAAA,2GACAhf,EAAA8I,QAAAvL,EAAAmoB,mBAAA,SAAA8H,EAAApH,GACApH,GAAA,WAAAwO,EAAA,YAAApH,EAAA,eAEApH,GAAA,YAKAzhB,EAAAqE,IAAA,kBAAA,SAAAM,EAAAurB,EAAAtrB,EAAAurB,EAAAC,GACAF,EAAAG,UAAA,OAAArwB,EAAAipB,qBACAjpB,EAAA+S,WAAA,aAAAud,OAAAtwB,EAAAipB,qBAAAqH,OAAA1rB,GAAA0rB,OAAAtwB,EAAAkpB,kBAAAlpB,EAAAuwB,mBAAAH,GAEApwB,EAAAipB,oBAAArkB,EACA5E,EAAAuwB,mBAAAH,EACApwB,EAAAkpB,iBAAAiH,IAGAnwB,EAAAqE,IAAA,yBAAA,SAAAC,EAAAC,EAAAL,GACAlE,EAAA+S,WAAA,2BAAAxO,EAAAL,KAGAlE,EAAAqE,IAAA,6BAAA,SAAAC,EAAAC,EAAAH,GACApE,EAAA+S,WAAA,+BAAAxO,EAAAH,KAGApE,EAAAqE,IAAA,cAAA,SAAAC,EAAArB,EAAAsB,GACA,IAAAmF,EAAA1J,EAAAkC,SAAAyH,QAAA1G,GACAsB,IAAA,IAAAmF,EACA1J,EAAAkC,SAAAS,KAAAM,IACAsB,GAAAmF,GAAA,GACA1J,EAAAkC,SAAAW,OAAA6G,EAAA,GAEA1J,EAAA+S,WAAA,gBAAA9P,EAAAsB,KAGAvE,EAAAwwB,qBAAA,SAAAlf,GACA,GAAA,OAAAA,GAAAA,EAAAxO,OAAA,EAAA,CACA3B,EAAAqF,KAAA,2CACA,IAAAiqB,EAAAhuB,EAAAyI,OAAAlL,EAAAkC,SAAA,SAAAsJ,GACA,OAAA8F,EAAA3H,QAAA2mB,OAAA9kB,EAAAtK,kBAAA,IAEA2rB,EAAA7sB,EAAAkC,SACAO,EAAA8I,QAAAklB,EAAA,SAAAjlB,GACAxL,EAAA+S,WAAA,kBAAAvH,GAAA,GACAqhB,EAAAhqB,OAAA7C,EAAAkC,SAAAyH,QAAA6B,GAAA,KAEAxL,EAAAkC,SAAA2qB,IAKA7sB,EAAA0wB,mBAAA,WACA,OAAA,SAAAnhB,GACA,OAAAA,EAAA,GAAA,IAIAvP,EAAAqE,IAAA,iBAAA,WAEArE,EAAA2wB,eAAA,EACA5oB,EAAA,WACA,GAAA/H,EAAAwD,IAAA8mB,gBAAA,CACA,IAAAsG,EAAAnxB,QAAAuI,QAAA8G,SAAAC,eAAA,oBACArG,EAAAmoB,gBAAAD,EAAA,EAAA,KAEA5C,IACAnI,EAAA8B,mBAAAjgB,SACA,KAGAK,EAAA,WACA1G,EAAAyvB,SACA,KAEA/oB,EAAA,aAyCA,KACAY,QAAA3G,IAAA,OC7pBA,SAAA+uB,qBAAAtoB,EAAAxI,GAEA,OACA+wB,iBAcA,SAAA5S,EAAAtQ,EAAAoF,EAAAmC,EAAA4b,EAAAC,GACA,IAAAtjB,GACAyQ,KAAAD,EACAtQ,MAAAA,EACAoF,YAAAA,EACA+d,SAAAA,EACAC,gBAAAA,GAEAzxB,QAAA+C,YAAA4b,KACAxQ,EAAAyQ,KAAA,GAEA5e,QAAA+C,YAAAsL,KACAF,EAAAE,MAAA,KAEArO,QAAA+C,YAAA0Q,KACAtF,EAAAsF,gBAEAzT,QAAA+C,YAAA6S,GAGAzH,EAAAyH,WACApC,OAAA,OACAiC,SAAA,GAJAtH,EAAAyH,UAAAA,EAOA,OAAApV,EAAA4d,KAAA,+BAAAjQ,GAAAP,QAAA,SAAAzL,GACA,OACAuvB,eAAAvvB,EAAA2E,QACA6qB,cAAAxvB,EAAA4c,kBAzCA6S,6BAKA,WACA,OAAApxB,EAAA4d,KAAA,6CAAAxQ,QAAA,SAAAzL,GACA,OACAuvB,eAAAvvB,MAPA0vB,cA6CA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAA1uB,KACAA,EAAAN,KAAA,gDAAA4uB,EAAAK,cACAH,GAAAF,EAAAnL,OACAnjB,EAAAN,KAAA,6CAAA4uB,EAAAnL,OAEA,GAAAmL,EAAArZ,OAAAyZ,EACA1uB,EAAAN,KAAA,6CAAA4uB,EAAArZ,YAEA,GAAAqZ,EAAAM,YAAA/uB,OAAA,EAAA,CACA,IAAAoE,EACAgb,EACA3d,EACAstB,EAAApvB,EAAAqvB,QAAAP,EAAAM,YAAA,iBACA,SAAAA,GACA3P,EAAA,UACA3d,EAAAstB,EAAAE,KAAAC,gBACA9qB,EAAA,gCAAA3C,GACA,SAAAstB,GACA3P,EAAA,UACA3d,EAAAstB,EAAAI,KAAAD,gBACA9qB,EAAA,sCAAA3C,GACA,WAAAstB,GACA3P,EAAA,YACA3d,EAAAstB,EAAAK,OAAAF,gBACA9qB,EAAA,gCAAA3C,GACA,SAAAstB,IACA3P,EAAA,UACA3d,EAAAstB,EAAAM,KAAAH,gBACA9qB,EAAA,oCAAA3C,GAEA2C,EAAAuB,EAAA,YAAAA,CAAAvB,GACAsqB,EACAvuB,EAAAN,KAAA,+BAAAuf,EAAA,qCAAAhb,EAAA,KAAA3C,EAAA,QAEAtB,EAAAN,KAAA,+BAAAuf,EAAA,YAAA3d,GAGAgtB,EAAAjL,QACArjB,EAAAN,KAAA,8CAAA4uB,EAAAjL,QAEAiL,EAAAhL,SACAtjB,EAAAN,KAAA,+CAAA4uB,EAAAhL,SAEAgL,EAAAa,QACAnvB,EAAAN,KAAA,8CAAA4uB,EAAAa,QAEA,IAAAnvB,EAAAH,QAAA4uB,IACAzuB,GAAA,oDAGA,OAAAA,EAAAsG,KAAA,OA/FA8oB,gCAmGA,SAAAd,GACA,IAAAe,GACAzL,KAAA,UACA0L,EAAA9vB,EAAAqH,MAAAynB,EAAAM,YAAA,iBACAU,EAAA5oB,QAAA,SAAA,GAAA4oB,EAAA5oB,QAAA,SAAA,EACA2oB,EAAAzL,KAAA,SACA0L,EAAA5oB,QAAA,WAAA,GAAA4oB,EAAA5oB,QAAA,WAAA,GAAA4oB,EAAA5oB,QAAA,SAAA,KACA2oB,EAAAzL,KAAA,YAEA0K,EAAAjL,SACAgM,EAAAhM,OAAAiL,EAAAjL,QAEAiL,EAAAhL,UACA+L,EAAA/L,QAAAgL,EAAAhL,SAGA9jB,EAAA6pB,KAAAiF,EAAAM,YAAA,SAAAtiB,GACA,OAAAA,EAAAijB,eACA,IAAA,OACAF,EAAAG,OAAAljB,EAAAyiB,gBACA,MACA,IAAA,OACAM,EAAAI,OAAAnjB,EAAAyiB,gBACA,MACA,IAAA,SACAM,EAAAlL,SAAA7X,EAAAyiB,gBACA,MACA,IAAA,SACAM,EAAApL,SAAA3X,EAAAyiB,gBACA,MACA,IAAA,OACAM,EAAAK,OAAApjB,EAAAyiB,mBAMA,KAAAT,EAAAnL,QACAkM,EAAAlM,MAAAmL,EAAAnL,OAGAmL,EAAArZ,QACAoa,EAAApa,MAAAqZ,EAAArZ,OAGAqZ,EAAAK,eACAU,EAAAnM,SAAAoL,EAAAK,cAGA,OAAAU,ICzJA,SAAAM,wBAAA5yB,EAAA6b,EAAAkV,EAAA3vB,EAAAyxB,EAAAplB,EAAAhF,EAAAV,EAAA9H,EAAAmD,GACApD,EAAA8N,MAAA,IACA9N,EAAA8yB,YACAC,QAAA,GAEA,IAAA1d,GACApC,OAAA,OACAiC,SAAA,GAEAnN,EAAA,WACA/H,EAAA+S,WAAA,gBAAAsC,EAAApC,OAAAoC,EAAAH,WACA,IACAlV,EAAAkT,eAGAlT,EAAA+uB,0BACAtsB,EAAA8I,QAAAnK,EAAAG,UAAAyxB,iBAAAC,WAAA,SAAA9M,GACAnmB,EAAA+uB,uBAAApsB,MAAAgoB,MAAAxE,EAAA1a,KAAA7B,GAAAuc,EAAA1a,SAEAzL,EAAAkzB,yBAAAte,WAAA,KAAAC,UAAA,MACA7U,EAAAmzB,4BAAAxI,MAAA,MAAApmB,MAAA,QAAAomB,MAAA,MAAApmB,MAAA,QAAAomB,MAAA,WAAApmB,MAAA,aAGAvE,EAAAmxB,eAAA0B,EAAAzyB,KAAAmG,QACAvG,EAAAoxB,cAAAyB,EAAAzyB,KAAAoe,cAEA,IAAA4U,GAAA,EACAC,GAAA,EACA,IAAA,IAAA9B,KAAAvxB,EAAAmxB,eAOA,GANAI,EAAAvb,WACAod,GAAA,GAEA7B,EAAA+B,KACAD,GAAA,GAEAA,GAAAD,EACA,MAGApzB,EAAAuzB,aACAC,KAAA,GACApN,MAAA,GACAD,SAAA,GACAsN,qBAAA,GACA9J,OAAA,EACA3T,SAAA,GACAsd,GAAA,IAEA,SAAAlyB,EAAAG,UAAAwd,QAAAC,sBAAAoU,IAAAC,GACArzB,EAAAuzB,YAAAvd,SAAA,EACAhW,EAAAuzB,YAAAD,GAAA,EACAtzB,EAAAuzB,YAAAnN,OAAA,GACApmB,EAAAuzB,YAAAE,sBAAA,IACA,OAAAryB,EAAAG,UAAAwd,QAAAC,qBACAhf,EAAAuzB,YAAAvd,SAAA,EACAhW,EAAAuzB,YAAAnN,OAAA,EACApmB,EAAAuzB,YAAAE,sBAAA,GACA,aAAAryB,EAAAG,UAAAwd,QAAAC,sBACAhf,EAAAuzB,YAAAD,GAAA,EACAtzB,EAAAuzB,YAAAnN,OAAA,EACApmB,EAAAuzB,YAAAE,sBAAA,GAGAzzB,EAAAgN,OAAA,WACA+jB,EAAAC,iBAAAhxB,EAAA8yB,WAAAC,QAAA/yB,EAAA8N,MAAA9N,EAAAkT,YAAAmC,GAAAlV,KAAA,SAAA0yB,GACA7yB,EAAAmxB,eAAA0B,EAAAzyB,KAAAmG,QACAvG,EAAAoxB,cAAAyB,EAAAzyB,KAAAoe,iBAIAxe,EAAAqE,IAAA,OAAA,SAAAM,EAAAsO,EAAAiC,GAEAG,EADA,IAAAH,GAEAjC,OAAA,OACAiC,SAAA,IAIAjC,OAAAA,EACAiC,SAAAA,GAGAlV,EAAA+S,WAAA,gBAAAsC,EAAApC,OAAAoC,EAAAH,UACAlV,EAAAgN,WAGAhN,EAAAqE,IAAA,SAAA,SAAAM,EAAAsO,EAAAC,EAAAL,GACAK,EAAAK,YACAvT,EAAAkT,YAAAD,GAAAC,SAEAlT,EAAAkT,YAAAD,GAEAjT,EAAAgN,WAIAhN,EAAA0zB,WAAA,SAAAnC,GACA1V,EAAAK,GAAA,cAAA6U,EAAAsB,gCAAAd,IAAA1U,SAAA,EAAAC,QAAA,EAAAC,QAAA,KAGA/c,EAAA2zB,YAAA,SAAApC,GACA,OAAAA,EAAArZ,MACAqZ,EAAArZ,MAGAqZ,EAAAnL,OAAA,IAAAmL,EAAAM,YAAA/uB,QAAAyuB,EAAAjL,QAAAiL,EAAAhL,QAGAgL,EAAAnL,MAFA,gBAKApmB,EAAA4zB,iBAAA,SAAArC,GACA,IAAAtuB,KACA,GAAAsuB,EAAAM,YAAA/uB,OAAA,EAAA,CACA,IAAAoE,EACAgb,EACA3d,EACAsvB,EAAApxB,EAAAqxB,KAAAvC,EAAAM,YAAA,SAAAgC,GACA,MAAA,SAAAA,EAAArB,gBAEA/yB,QAAAgL,UAAAopB,KACA3R,EAAA,UACAhb,EAAA,oCAAA2sB,EAAA7B,gBACA9qB,EAAAuB,EAAA,YAAAA,CAAAvB,GACA3C,EAAAsvB,EAAA7B,iBAGA6B,EAAApxB,EAAAqxB,KAAAvC,EAAAM,YAAA,SAAAgC,GACA,MAAA,SAAAA,EAAArB,gBAEA/yB,QAAAgL,UAAAopB,KACA3R,EAAA,UACAhb,EAAA,gCAAA2sB,EAAA7B,gBACA9qB,EAAAuB,EAAA,YAAAA,CAAAvB,GACA3C,EAAAsvB,EAAA7B,iBAGA6B,EAAApxB,EAAAqxB,KAAAvC,EAAAM,YAAA,SAAAgC,GACA,MAAA,SAAAA,EAAArB,gBAEA/yB,QAAAgL,UAAAopB,KACA3R,EAAA,UACAhb,EAAA,sCAAA2sB,EAAA7B,gBACA9qB,EAAAuB,EAAA,YAAAA,CAAAvB,GACA3C,EAAAsvB,EAAA7B,iBAGA6B,EAAApxB,EAAAqxB,KAAAvC,EAAAM,YAAA,SAAAgC,GACA,MAAA,WAAAA,EAAArB,gBAEA/yB,QAAAgL,UAAAopB,KACA3R,EAAA,YACAhb,EAAA,2BAAA2sB,EAAA7B,gBACAztB,EAAAsvB,EAAA7B,iBAGA/uB,EAAAN,KAAAuf,EAAA,8BAAAhb,EAAA,KAAA3C,EAAA,QAWA,OATAgtB,EAAAjL,QACArjB,EAAAN,KAAA,WAAA4uB,EAAAjL,QAEAiL,EAAAhL,SACAtjB,EAAAN,KAAA,YAAA4uB,EAAAhL,SAEAgL,EAAAa,QACAnvB,EAAAN,KAAA,WAAA4uB,EAAAa,QAEA3kB,EAAAW,YAAAnL,EAAAsG,KAAA,QAGAvJ,EAAA+zB,YAAA,SAAAC,GAGA,SAAAC,EAAAj0B,EAAAwH,EAAAvH,EAAA+zB,GACA/zB,EAAAC,IAAA,wCAAA8zB,GAAA7zB,KAAA,SAAAC,GACAJ,EAAAk0B,QAAA9zB,EAAAA,OAHA6zB,EAAAn0B,SAAA,SAAA,oBAAA,QAAA,YAOAsD,EAAAuD,MACA5G,YAAA,gDACAF,WAAAo0B,EACAxtB,KAAA,KACAK,SACAktB,SAAA,WACA,OAAAA,OCzLA,SAAAG,iBAAAn0B,EAAAC,EAAAqoB,EAAAzM,EAAAzY,EAAA2E,EAAA0F,EAAAtM,EAAA0kB,EAAAtV,EAAAnP,EAAAmC,EAAAilB,EAAAtlB,EAAA6tB,GAEA,SAAAqD,EAAA/sB,GACA,IAAA5E,EAAAD,YAAA6E,KAAA5E,EAAA4xB,MAAAhtB,IAAA,KAAAA,EAIA,OADAA,EAAAqS,SAAArS,GACA5E,EAAA6xB,SAAAjtB,GACAA,OAEA,EAIA,IAEAktB,EAFArO,EAAA,EACAsO,GAAA,EAIAx0B,EAAA6mB,KAAAyB,EAAAzB,KACA7mB,EAAAomB,MAAA,GACApmB,EAAAy0B,aAAA,KACAz0B,EAAAizB,WAAAxwB,EAAAyI,OAAAsd,EAAAkM,mBAAA,SAAAle,GACA,OAAAA,EAAAme,iBAAA,aAAAne,EAAAoe,mBAAA,SAAApe,EAAAoe,qBAEAn1B,QAAAgL,UAAA6d,EAAAnC,WAAAmC,EAAAnC,SACAnmB,EAAAmmB,SAAAqC,EAAAqM,UAAAvM,EAAAnC,UAEAnmB,EAAAmmB,SAAAqC,EAAAsM,aAEA90B,EAAAmmB,SAAA1jB,EAAAD,YAAA8lB,EAAAnC,WAAA,KAAAmC,EAAAnC,SAAAqC,EAAAsM,aAAAtM,EAAAqM,UAAAvM,EAAAnC,UACAnmB,EAAAsmB,OAAAgC,EAAAhC,OACAtmB,EAAAumB,QAAA+B,EAAA/B,QACAvmB,EAAAomB,MAAAkC,EAAAlC,MACApmB,EAAAwmB,QAAA4N,EAAA9L,EAAA9B,SACAxmB,EAAAymB,QAAA2N,EAAA9L,EAAA7B,SACAzmB,EAAA0mB,OAAA0N,EAAA9L,EAAA5B,QACA1mB,EAAA2mB,OAAAyN,EAAA9L,EAAA3B,QACAlnB,QAAAgL,UAAA6d,EAAA1B,YACA5mB,EAAA4mB,SAAAmO,mBAAAzM,EAAA1B,UAAAjc,MAAA,MAEAlL,QAAAgL,UAAA6d,EAAApQ,SAAAzY,QAAAgL,UAAA6d,EAAAmK,SAAAhzB,QAAAgL,UAAA6d,EAAAoK,SAAAjzB,QAAAgL,UAAA6d,EAAAlB,WAAA3nB,QAAAgL,UAAA6d,EAAAnB,MAAA1nB,QAAAgL,UAAA6d,EAAAqK,WACA3yB,EAAAy0B,cACA1N,OAAAuB,EAAAmK,OACAzL,OAAAsB,EAAAoK,OACAsC,SAAA1M,EAAAlB,SACAD,IAAAmB,EAAAnB,IACAF,OAAAqB,EAAAqK,OACAza,MAAAoQ,EAAApQ,QAIAlY,EAAAi1B,gBAEAj1B,EAAAk1B,iBAEA,IAAAC,EAAA/zB,EAAAG,UA+OA,SAAA6zB,IACA,IAAAC,EAAAr1B,EAAA8K,iBACAwqB,EAAA7yB,EAAAqH,MAAA9J,EAAA+K,kBAAA,QACA/K,EAAA8K,oBACA,IAAAyqB,EAAA9yB,EAAA+yB,MAAAL,EAAAvO,UAAA1b,OAAA,SAAAG,GACA,OAAAA,EAAAqW,SAAArW,EAAAoqB,eAAAh2B,QAAA+C,YAAA6I,EAAA4nB,aAAA,IAAA5nB,EAAA4nB,WAAAnwB,QAAA,QAAA9C,EAAAmmB,SAAA1a,KAAA+d,eAAAne,EAAA4nB,WAAAtpB,QAAA3J,EAAAmmB,SAAA1a,OAAA,KACA2hB,OAAA,SAAA/hB,GACA,OAAAA,EAAAI,KAAA+d,gBAEAzY,IAAA,SAAA1F,GACA,OAAAI,KAAAJ,EAAAI,KAAAiqB,WAlBArqB,EAkBAA,EAjBA5L,QAAA+C,YAAAxC,EAAA4mB,UACAvb,EAAAM,UAEAlJ,EAAAwH,SAAAjK,EAAA4mB,SAAAvb,EAAAI,OAcAE,UAAAN,EAAAM,UAAAsnB,WAAA5nB,EAAA4nB,WAAA3nB,iBAAAD,EAAAC,kBAlBA,IAAAD,IAmBA9G,QAQA,OAPA9B,EAAA8I,QAAAgqB,EAAA,SAAA/pB,GACA,IAAAmqB,EAAAlzB,EAAAkH,QAAA2rB,EAAA9pB,EAAAC,OAAA,IAAA,IAAAhJ,EAAAkH,QAAA0rB,EAAA7pB,EAAAC,MACAmqB,EAAAnzB,EAAAkH,QAAA2rB,EAAA9pB,EAAAC,OAAA,GAAAhJ,EAAAkH,QAAA0rB,EAAA7pB,EAAAC,OAAA,GACAD,EAAAkqB,YAAAC,GAAAC,IACA51B,EAAA8K,iBAAAnI,KAAA6I,EAAAC,QAGA8pB,EAUA,SAAAM,IACA9E,EAAAM,+BAAAhkB,QAAA,SAAAjN,GACAJ,EAAAk1B,cAAA90B,IA7QAJ,EAAA81B,qBAAAvyB,EAAAsC,eAAAiwB,qBAGA91B,EAAA+1B,cAAA,IAEA/1B,EAAAg2B,qBAAA,EACAh2B,EAAAi2B,UAAA,aAAAj2B,EAAAmmB,SAAA+P,YAAA,UAAAl2B,EAAAmmB,SAAA+P,WACAl2B,EAAAm2B,QAAA5xB,MAAA,OAAAvE,EAAAy0B,cAAAh1B,QAAA+C,YAAAxC,EAAA6mB,OAAA,OAAA7mB,EAAA6mB,MACA7mB,EAAA+K,qBACA/K,EAAA8K,oBACA9K,EAAAo2B,kBAAA,2BAEAp2B,EAAAq2B,eAAA,SAAAC,GACA,IAAAC,EAAAv2B,EAAAmmB,SACAnmB,EAAAmmB,SAAAmQ,EAGA,aAAAt2B,EAAAmmB,SAAA+P,YAAA,UAAAl2B,EAAAmmB,SAAA+P,YACAl2B,EAAAi2B,WAAA,EACAj2B,EAAAm2B,OAAA5xB,OAAA,IAEAvE,EAAAi2B,WAAA,EACAj2B,EAAAm2B,OAAA5xB,OAAA,GAGAgyB,EAAAL,aAAAI,EAAAJ,aACAl2B,EAAAy0B,aAAA,MAGAlkB,EAAA,eAGA,IAAAimB,EAAAtzB,EAAA4wB,KAAA,gBAAAj0B,WAAA,WAKA,GAJAJ,QAAAgL,UAAA+rB,EAAAC,aACAD,EAAAE,cAAAF,EAAAC,WAAA,KAGAtB,EAAAnC,iBAAA2D,oBAAA,CACA,IAAA5hB,EAAAuhB,EAAAM,cACAznB,EAAAmnB,EAAAO,cACAp0B,EAAA6xB,SAAAvf,GACA/U,EAAAwmB,QAAAzR,EAEA/U,EAAAwmB,QAAA,GAEA/jB,EAAA6xB,SAAAnlB,GACAnP,EAAAymB,QAAAtX,EAEAnP,EAAAymB,QAAA,GAIAzmB,EAAA+K,kBAAAqqB,KAKAp1B,EAAA82B,gBAAA,SAAAC,GASA,OARA/2B,EAAAg2B,qBAAA,GAQAh2B,EAAAm2B,OAAA5xB,OAAAvE,EAAAy0B,gBAIA,UAAAz0B,EAAAmmB,SAAA+P,WACAj2B,EAAAC,IAAA,kCAAA62B,GAAA52B,KAAA,SAAAyB,GAEA,OADA5B,EAAAg2B,qBAAA,EACAp0B,EAAAxB,OAEA,aAAAJ,EAAAmmB,SAAA+P,WACAj2B,EAAAC,IAAA,+BAAA62B,GAAA52B,KAAA,SAAAyB,GAEA,OADA5B,EAAAg2B,qBAAA,EACAp0B,EAAAxB,WAOAJ,EAAAg3B,iBAAA,WACAv3B,QAAAgL,UAAA8pB,IAGA,IAAA0C,MAAAC,UACA3C,EACA,IACAv0B,EAAAm3B,iBAGAn3B,EAAAm3B,kBAIAn3B,EAAAo3B,mBAAA,SAAAzyB,GACA,IAAAA,EAAA0yB,SACA,KAAAr3B,EAAAomB,OACApmB,EAAAs3B,qBAMAt3B,EAAAu3B,YAAA,WAGA/C,GAAA,EACAtO,EAAA5e,KAAAC,MAAA,OAAAD,KAAAkwB,UACA,IAAAjd,EAAAva,EAAAsG,UAAA4f,GAEAU,EAAAnnB,QAAA+C,YAAAxC,EAAA4mB,eAAA9S,EAAA9T,EAAA4mB,SAAArd,KAAA,KACAsc,EAAAI,OAAAC,EAAAlmB,EAAAmmB,SAAA1a,KAAAzL,EAAAomB,MAAApmB,EAAAy0B,aAAAz0B,EAAAsmB,OAAAtmB,EAAAumB,QAAAvmB,EAAAwmB,QAAAxmB,EAAAymB,QAAAzmB,EAAA0mB,OAAA1mB,EAAA2mB,OAAAC,EAAA5mB,EAAA6mB,MAAA1mB,KAAA,WAEA0lB,EAAA+B,iBAAArN,GACAia,GACA3Y,EAAAK,GAAA,uBACAsK,QAAAxmB,EAAAwmB,QACAC,QAAAzmB,EAAAymB,QACAC,OAAA1mB,EAAA0mB,OACAC,OAAA3mB,EAAA2mB,SAEA9J,SAAA,KAIA,WACAtC,EAAA7S,WAIA1H,EAAAsG,UAAA,SAAA4f,GACA,OAAA9iB,EAAAuD,MACA5G,YAAA,gCACAF,WAAA43B,8BACAhxB,KAAA,KACA+T,SAAA,SACAkd,cAAA,iBACA5wB,SACAof,gBAAA,WACA,OAAAA,GAEAyR,SAAA,WAKA,OAJA,WACAnD,GAAA,QASAx0B,EAAA43B,cAAA,WAEA,IAAAtF,KACAA,EAAAzL,KAAA7mB,EAAAmmB,SAAA+P,WAAA1M,cACA8I,EAAAI,OAAA,OAAA1yB,EAAAy0B,aAAA,KAAAz0B,EAAAy0B,aAAAzN,OACAsL,EAAAG,OAAA,OAAAzyB,EAAAy0B,aAAA,KAAAz0B,EAAAy0B,aAAA1N,OACAuL,EAAAK,OAAA,OAAA3yB,EAAAy0B,aAAA,KAAAz0B,EAAAy0B,aAAAxN,OACAqL,EAAApL,SAAA,OAAAlnB,EAAAy0B,aAAA,KAAAz0B,EAAAy0B,aAAAoD,SACAvF,EAAAlL,SAAA,OAAApnB,EAAAy0B,aAAA,KAAAz0B,EAAAy0B,aAAAO,SACA1C,EAAApa,MAAA,OAAAlY,EAAAy0B,aAAA,KAAAz0B,EAAAy0B,aAAAvc,MACAoa,EAAAhM,OAAAtmB,EAAAsmB,OACAgM,EAAA/L,QAAAvmB,EAAAumB,QACA+L,EAAAlM,MAAApmB,EAAAomB,MACAkM,EAAA9L,QAAAxmB,EAAAwmB,QACA8L,EAAA7L,QAAAzmB,EAAAymB,QACA6L,EAAA5L,OAAA1mB,EAAA0mB,OACA4L,EAAA3L,OAAA3mB,EAAA2mB,OACA2L,EAAAnM,SAAAnmB,EAAAmmB,SAAA1a,KACA6mB,EAAA1L,SAAAkR,mBAAA93B,EAAA8K,iBAAAvB,KAAA,MACAsS,EAAAK,GAAA,cAAAoW,GAAAzV,SAAA,EAAAC,QAAA,EAAAC,QAAA,KAGA/c,EAAA+3B,aAAA,SAAAxG,GACA,IAAAe,EAAAvB,EAAAsB,gCAAAd,GACAe,EAAA1L,SAAAkR,mBAAA93B,EAAA8K,iBAAAvB,KAAA,MACAsS,EAAAK,GAAA,cAAAoW,GAAAzV,SAAA,EAAAC,QAAA,EAAAC,QAAA,KAGA/c,EAAAg4B,iBAAA,mCACAh4B,EAAAi4B,aAAA,YAAA,gBAAA,WACAj4B,EAAAi2B,UAEA,OAAAj2B,EAAAy0B,aACAz0B,EAAAg4B,iBAAA,sCAEAh4B,EAAAg4B,iBAAA,mDAJAh4B,EAAAg4B,iBAAA,oCAQAh4B,EAAAs3B,kBAAA,WACAt3B,EAAAy0B,aAAA,KACAz0B,EAAAomB,MAAA,GACA7V,EAAA,gBAGAvQ,EAAAk4B,uBAAA,SAAAC,GACAn4B,EAAAy0B,aAAA0D,EACAn4B,EAAAomB,MAAA,GACAmO,GAAA,IAAA0C,MAAAC,WAGAl3B,EAAAm3B,eAAA,WACAn3B,EAAAy0B,aAEAz0B,EAAA43B,iBAOA53B,EAAAo4B,mBAAA,WACA,OAAAp4B,EAAAi2B,WAGAj2B,EAAAq4B,eAAA,WACA,MAAA,aAAAr4B,EAAAmmB,SAAA+P,YAGAl2B,EAAAs4B,cAAA,SAAAjtB,GACArL,EAAA+K,kBAAAM,EAAAI,MAAAiqB,WAAA11B,EAAA+K,kBAAAM,EAAAI,MAAAiqB,WAkCA11B,EAAAsxB,cAAA,SAAAC,GACA,OAAA9jB,EAAAW,YAAA2iB,EAAAO,cAAAC,GAAA,GAAA,GAAA,GAAA,KAGAvxB,EAAA+K,kBAAAqqB,IAQAp1B,EAAA6mB,KACA7mB,EAAAu3B,cAGA90B,EAAAgZ,MAAAoa,GAGA71B,EAAAqE,IAAA,qBAAA,WACA5B,EAAAgZ,MAAAoa,KASA,SAAA4B,8BAAAz3B,EAAAwN,EAAAqY,EAAAre,EAAA0e,EAAAyR,GAEA,IAAAY,OAAAzkB,EACA0kB,GAAA,EACAx4B,EAAA8a,YACA9a,EAAAy4B,0BAAA,EACAz4B,EAAA04B,iBAAA,EACA14B,EAAA24B,iBAAA,EAEAJ,EAAA/qB,EAAA,WACAqY,EAAA4B,eAAAvB,GAAA/lB,KAAA,SAAAC,GACAJ,EAAAy4B,yBAAAr4B,EAAAA,KAAAq4B,yBACAz4B,EAAA44B,eAAAx4B,EAAAA,KAAAw4B,eACA54B,EAAA04B,iBAAAt4B,EAAAA,KAAAs4B,iBACA14B,EAAA24B,iBAAAv4B,EAAAA,KAAAu4B,iBACA34B,EAAA64B,YAAAz4B,EAAAA,KAAAs4B,iBACA14B,EAAA64B,YAAAz4B,EAAAA,KAAAs4B,mBACA14B,EAAA64B,YAAA,KAAAz4B,EAAAA,KAAAs4B,kBAEAt4B,EAAAA,KAAA0a,WACA9a,EAAA8a,SAAA1a,EAAAA,KAAA0a,UAEA9a,EAAA44B,iBAAAJ,IACAx4B,EAAA8a,SAAAnY,KAAA,4CACA61B,GAAA,IAGA,WACAhrB,EAAA5F,OAAA2wB,MAGA,KAEAv4B,EAAA84B,aAAA,WACAr5B,QAAAgL,UAAA8tB,IACA/qB,EAAA5F,OAAA2wB,GAEAZ,IACAnwB,EAAAK,WAIA7H,EAAAqE,IAAA,WAAA,WACA5E,QAAAgL,UAAA8tB,IACA/qB,EAAA5F,OAAA2wB,KCvYA,SAAA9f,eAAAtX,EAAAkb,EAAAjZ,GAEA,OACAmW,QAKA,SAAAxX,GACAsa,EAAA9C,UAAApZ,KAAA,SAAAC,GACAsa,EAAA3Y,EAAA3B,EAAAA,KAAA2B,UACA,WACAZ,EAAAqF,KAAA,sCARAkU,eAAAA,GAYA,SAAAA,EAAA3Y,EAAAg3B,GACA31B,EAAAuD,MACA5G,YAAA,iCACAF,WAAAm5B,yBACAvyB,KAAA,KACA+T,SAAA,SACAC,UAAA,EACA3T,SACA/E,QAAA,WACA,OAAAA,GAEAg3B,QAAA,WACA,OAAAA,OAWA,SAAAC,yBAAAh5B,EAAA+H,EAAA9H,EAAAoD,EAAAmV,EAAAzW,EAAAg3B,GAEAh3B,EAAAtC,QAAAgL,UAAA1I,GAAAA,EAAA,GACA/B,EAAA+B,QAAAA,EAAA,yCACA/B,EAAA+4B,QAAAA,EACA/4B,EAAAi5B,QAAAx5B,QAAAgL,UAAAsuB,GAAAA,EAAA,4BAAA,2BAEA/4B,EAAAk5B,YAAA,SAAAn3B,EAAAo3B,GACA,KAAAA,EACAn5B,EAAA+B,QAAAA,EAAA,mGAEA/B,EAAA+B,QAAAA,EAAA,2CACAgG,EAAA,WACAyQ,EAAAY,oBAAA,WACAnZ,EAAAC,IAAAF,EAAAi5B,SAAAG,kBAAA,IAAAj5B,KACA,WACA4H,EAAA,WACA/H,EAAA+B,QAAA,oBACAtC,QAAAgL,UAAAzK,EAAA+4B,SACA11B,EAAA4D,SAAAC,KAAAlH,EAAA+4B,QAEA11B,EAAA4D,SAAA8V,UAEA,MACA,WACA/c,EAAAk5B,YAAAn3B,EAAAo3B,EAAA,QAGA,KACAn5B,EAAA+B,QAAAA,EAAA,6CAKAgG,EAAA,WACA/H,EAAAk5B,YAAAn3B,EAAA,IACA,KC5EA,SAAAsa,uBAAApc,GAEA,OACAsZ,QAIA,WACA,OAAAtZ,EAAAC,IAAA,gCAJAsc,SAOA,WACA,OAAAvc,EAAAC,IAAA,kCCZA,SAAA0R,mBAAA3R,EAAAmB,EAAAi4B,GAOA,OAJAxoB,SAWA,SAAAmB,EAAAvB,EAAAwJ,GACA,IAAAkM,EAAAnU,EAAAsnB,gBACA,OAAArf,IAAAxX,EAAAD,YAAA2jB,IAAA,KAAAA,GAAA,OAAAA,IAAA,gBAAAA,EACAkT,EAAAE,sBAAAvnB,GAAA7R,KAAA,SAAAgmB,GACA,OAAAqT,EAAAxnB,EAAAvB,EAAA0V,IACA,SAAAljB,GACA,OAAAA,IAGAu2B,EAAAxnB,EAAAvB,EAAA0V,IAnBArU,sBAuBA,WACA,OAAArP,EAAAyI,OAAA9J,EAAAG,UAAAC,YAAAqQ,YAAA,aAnBA,SAAA2nB,EAAAxnB,EAAAvB,EAAA0V,GACA,IAAAvY,GAAA6rB,eAAAznB,EAAAvG,KAAAgF,cAAAA,EAAA0V,SAAA,gBAAAA,EAAA,GAAAA,GACA,OAAAlmB,EAAAO,IAAA,iCAAAoN,ICVA,SAAA8rB,aAAAt2B,GAEA,OACAuD,KAGA,SAAAgzB,EAAA53B,EAAA6L,EAAAnH,EAAAmzB,GAqBAn6B,QAAA+C,YAAAo3B,KACAA,EAAA,UAEAx2B,EAAAuD,MACA5G,YAAA,yBACAF,WAAA,oBACA4G,KAAAhH,QAAAgL,UAAAhE,GAAAA,EAAA,KACAK,SACA6yB,SAAA,WACA,OAAAA,GAEA53B,QAAA,WACA,OAAAA,GAEA6L,OAAA,WACA,OAAAA,GAEAgsB,UAAA,WACA,OAAAA,MAKA32B,OAAA9C,KAAA,aAEA,gBAWA,SAAA8zB,kBAAAj0B,EAAAwH,EAAAmyB,EAAA53B,EAAA6L,EAAAgsB,GAEA55B,EAAA+B,QAAAA,EACA/B,EAAA25B,SAAAA,EACA35B,EAAA4N,OAAAA,EACA5N,EAAA65B,WAAAp6B,QAAAgL,UAAAmD,IAAAnO,QAAAgL,UAAAmD,EAAAhG,QACA5H,EAAA85B,OAAAr6B,QAAAgL,UAAAmD,IAAAnO,QAAAgL,UAAAmD,EAAAmsB,IACA/5B,EAAA45B,UAAAA,EAEAn6B,QAAA+C,YAAAoL,IAAAnO,QAAA+C,YAAAoL,EAAAosB,KACAh6B,EAAA4N,QACAosB,KACAhqB,KAAA,OAGAvQ,QAAA+C,YAAAoL,EAAAosB,IAAAhqB,QACApC,EAAAosB,IAAAhqB,KAAA,OAGAvQ,QAAAgL,UAAAmD,IAAAnO,QAAAgL,UAAAmD,EAAAmsB,KAAAt6B,QAAA+C,YAAAxC,EAAA4N,OAAAmsB,GAAA/pB,QACAhQ,EAAA4N,OAAAmsB,GAAA/pB,KAAA,MAGAvQ,QAAAgL,UAAAmD,IAAAnO,QAAAgL,UAAAmD,EAAAhG,SAAAnI,QAAA+C,YAAAxC,EAAA4N,OAAAhG,OAAAoI,QACAhQ,EAAA4N,OAAAhG,OAAAoI,KAAA,UAGAhQ,EAAAg6B,IAAA,WACAxyB,EAAAE,QACAjI,QAAAgL,UAAAmD,IAAAnO,QAAAgL,UAAAmD,EAAAosB,MAAAv6B,QAAAgL,UAAAzK,EAAA4N,OAAAosB,IAAAC,QACAj6B,EAAA4N,OAAAosB,IAAAC,SAIAj6B,EAAA+5B,GAAA,WACAvyB,EAAAE,QACAjI,QAAAgL,UAAAmD,IAAAnO,QAAAgL,UAAAmD,EAAAmsB,KAAAt6B,QAAAgL,UAAAzK,EAAA4N,OAAAmsB,GAAAG,OACAl6B,EAAA4N,OAAAmsB,GAAAG,KAAA1yB,IAIAxH,EAAA4H,OAAA,WACAJ,EAAAK,UACApI,QAAAgL,UAAAmD,EAAAhG,SAAAnI,QAAAgL,UAAAzK,EAAA4N,OAAAhG,OAAA+vB,WACA33B,EAAA4N,OAAAhG,OAAA+vB,YAIA33B,EAAAqE,IAAA,gBAAA,SAAA81B,EAAAtR,EAAArS,GACA,kBAAAqS,GACA7oB,EAAA4H,WCnHA,SAAAwyB,sBAGAxnB,KAAAjM,KAAA,SAAA0zB,EAAAzzB,EAAA7G,EAAA0G,EAAArG,GAGA,IACAgD,EADA3D,QAAAsW,UAAA,KAAA,iBACA7V,IAAA,aACA0N,KAEAnO,QAAA+C,YAAAiE,KACAmH,EAAA,KAAAnH,GAEAhH,QAAA+C,YAAAoE,GACAnH,QAAA+C,YAAAzC,GACA6N,EAAA,SAAA,yBAAAysB,EAAA,SAEAzsB,EAAA,YAAA7N,EAGA6N,EAAA,SAAAhH,EAEAgH,EAAA,SAEAxN,KAAA,WACA,OAAAA,IAIAgD,EAAAuD,KAAAiH,GAEA3K,OAAA9C,QC7BA,SAAA2b,iBAAA1Y,GAEA,OACA4Y,QAGA,WACA5Y,EAAAuD,MACA5G,YAAA,mCACAF,WAAA,6BACA4G,KAAA,KACA+T,SAAA,SACAC,UAAA,IAGAxX,OAAA9C,KAAA,WACAiB,cAAAqb,gBACA,gBASA,SAAA6d,2BAAAt6B,EAAAwH,EAAAgG,EAAAvN,EAAAqa,EAAAof,GAEA15B,EAAA+4B,QAAA,wBAEA/4B,EAAAwD,KAAA+2B,aAAA,EAAAxB,QAAA/4B,EAAA+4B,SACA/4B,EAAAw6B,mBAAA,EAEAx6B,EAAAg6B,IAAA,WACA,IAAApsB,EACAsD,EACAlR,EAAAwD,IAAAu1B,SAAA/4B,EAAAwD,IAAAi3B,kBACAz6B,EAAAwD,IAAAu1B,QAAA,MAGA/4B,EAAAwD,IAAAk3B,gBACAxpB,EAAA,4BACAtD,GAAA+sB,QAAA36B,EAAAwD,IAAAu1B,QAAAyB,kBAAAx6B,EAAAw6B,qBAEAtpB,EAAA,8BACAtD,GAAAgtB,gBAAA56B,EAAAwD,IAAAo3B,gBAAAC,OAAA76B,EAAAwD,IAAAs3B,eAAAN,kBAAAx6B,EAAAw6B,oBAGAx6B,EAAAwD,IAAA+2B,aAAA,EAEA,IAAAQ,EAAAvtB,EAAA,WACAvN,EAAAC,IAAA,kCAAAC,KAAA,SAAAC,GACAJ,EAAAwD,IAAAsX,SAAA1a,EAAAA,MAEA,WACAoN,EAAA5F,OAAAmzB,GACA/6B,EAAAwD,IAAA+2B,aAAA,KAGA,KAEAt6B,EAAAC,IAAAgR,GAAAtD,OAAAA,IAAAzN,KAAA,SAAAyB,GACA,IAAAG,EACAuY,EAAA0gB,OACA,IAAA56B,EAAAwB,EAAAxB,KACAA,EAAA66B,gBAQA76B,EAAA86B,eASA96B,EAAA+6B,kBAkBA3tB,EAAA5F,OAAAmzB,GACAvzB,EAAAK,UACA7H,EAAAwD,IAAA+2B,aAAA,EACAx4B,EAAA,4CACA3B,EAAAg7B,gBAAAt4B,OAAA,IACAf,GAAA,wHACAU,EAAA8I,QAAAnL,EAAAg7B,gBAAA,SAAAf,GACAt4B,GAAA,OAAAs4B,EAAA,UAEAt4B,GAAA,gBAEAA,GAAA,qEACA23B,EAAA/yB,KAAA,uBAAA5E,GACAi4B,KACAC,MAAA,WACAxhB,eAAAiC,kBAEA1K,KAAA,WAEApI,QACA+vB,SAAA,aAGA3nB,KAAA,eAxCAxC,EAAA5F,OAAAmzB,GACAvzB,EAAAK,UACA7H,EAAAwD,IAAA+2B,aAAA,EACAx4B,EAAA,sDAAA3B,EAAA0B,MAAA,qDACA1B,EAAA0a,SAAAhY,OAAA,IACAf,GAAA,wHACAU,EAAA8I,QAAAnL,EAAA0a,SAAA,SAAAuf,GACAt4B,GAAA,OAAAs4B,EAAA,UAEAt4B,GAAA,gBAEA23B,EAAA/yB,KAAA,4BAAA5E,GACAi4B,KACAhqB,KAAA,UAtBAxC,EAAA5F,OAAAmzB,GACAvzB,EAAAK,UACA7H,EAAAwD,IAAA+2B,aAAA,EACAb,EAAA/yB,KAAA,0BAAA,sEAAAvG,EAAA0B,OACAk4B,KACAhqB,KAAA,UAbAxC,EAAA5F,OAAAmzB,GACA/6B,EAAAwD,IAAA+2B,aAAA,EACAb,EAAA/yB,KAAA,uBAAA,uDAAAvG,EAAA0B,OACAk4B,KACAhqB,KAAA,UAyDA,SAAA5P,GACAoN,EAAA5F,OAAAmzB,GAEA/6B,EAAAwD,IAAAsX,UAAA1a,EAAAA,KAAA2B,WAIA/B,EAAAqE,IAAA,WAAA,WACA5E,QAAAgL,UAAAswB,IACAvtB,EAAA5F,OAAAmzB,MAMA/6B,EAAA4H,OAAA,WACAJ,EAAAK,WChJA,SAAAwzB,gBAAAr7B,EAAAwY,EAAAqD,EAAAtY,EAAApC,GACAnB,EAAAs7B,QACAt7B,EAAAu7B,MAAA,WACA/iB,EAAAY,oBAAA,WACA7V,EAAAg4B,MAAAv7B,EAAAs7B,KAAAtlB,SAAAhW,EAAAs7B,KAAArlB,UAAA9V,KAAA,WACAoD,EAAAi4B,oBACAr6B,EAAAqF,KAAA,qBACAqV,EAAAK,GAAA,gBACA,WACA/a,EAAAW,MAAA,sBCRA,SAAA25B,0BAAAz7B,EAAAC,EAAAy7B,GACA17B,EAAA07B,SAAAA,EAAAt7B,KAEAJ,EAAA27B,SAAA,SAAAC,GACA,OAAAA,EAAAjsB,SAAAqc,QAGAhsB,EAAA67B,OAAA,SAAA9X,GACA9jB,EAAA4d,KAAA,sCAAAie,UAAA/X,IAAA5jB,KAAA,SAAAyB,GACA5B,EAAA07B,SAAA95B,EAAAxB,QASA,SAAA27B,WAAAC,GACA,OAAA,SAAAC,EAAAC,GACA,GAAAD,EAAA,CACA,GAAA,IAAAA,GAAA,IAAAhF,MAAAC,WAAAgF,EACA,MAAA,GAGA,IAAAC,EAAA,IAAAF,EAEA,OADAE,EAAAH,EAAAG,EAAA,oBAGA,MAAA,IASA,SAAAC,eACA,OAAA,SAAA1sB,EAAAG,GAKA,OAJApQ,QAAA+C,YAAAqN,KACAA,EAAA,oBAGAF,OAAAqc,KAAAtc,GAAAE,QAAAC,OAAAA,IAOA,SAAAwsB,sBACA,OAAA,SAAA3sB,EAAAG,GACA,OAAAF,OAAAqc,KAAAtc,GAAAE,QAAAC,OAAA,wBASA,SAAAysB,eACA,OAAA,SAAA5sB,GACA,OAAAC,SAAA4sB,GAAA5sB,OAAAqc,KAAAtc,KCjEA,SAAA8sB,gBAAAx8B,EAAAC,EAAAqoB,EAAAzM,GAEAA,EAAAK,GAAA,eCFA,SAAA3Y,iBAAAglB,EAAAkU,EAAAx8B,EAAAy8B,EAAAC,EAAA9gB,GAEA6gB,EAAA1mB,SAGA,OACA4mB,WAeA,WACA,OAAAF,EAAA1mB,UAfAulB,MA0BA,SAAAvlB,EAAAC,GACA,IAAAgV,EAAA1C,EAAA9M,QAEA,OAAAxb,GACAiR,IAAA,QACAD,OAAA,OACAQ,SACAorB,eAAA,qCAEAz8B,KAAAu8B,GAAA3mB,SAAAA,EAAAC,SAAAA,MAEA9V,KAAA,WACAF,EAAAC,IAAA,yBAAAC,KAAA,SAAAC,GACAs8B,EAAAt8B,EAAAA,MACA,EACAq8B,EAAA1pB,WAAA,iBACAkY,EAAAnkB,eAzCAg2B,eA8CA,SAAAlvB,GACA,OAAA3N,EAAAC,IAAA,2BAAA0N,OAAAA,IAAAzN,KAAA,SAAAC,GAEA,OADAs8B,EAAAt8B,EAAAA,QA/CA28B,OAoDA,WACA,IAAA9R,EAAA1C,EAAA9M,QACA,OAAAxb,EAAA4d,KAAA,UAAA1d,KAAA,WACAF,EAAAC,IAAA,yBAAAC,KAAA,SAAAC,GACAs8B,EAAAt8B,EAAAA,KACAq8B,EAAA1pB,WAAA,mBACA,EACA2pB,EAAAM,aACAnhB,EAAAK,GAAA,eAEAL,EAAAK,GAAA,cAGA+O,EAAAnkB,eAhEA00B,kBAeA,WACAiB,EAAA1pB,WAAA,kBAfAkqB,cAoEA,WACA,IAAAC,EAAAr3B,IACA,OAAAs3B,YAAAD,EAAAC,YAAA5hB,YAAA2hB,EAAA3hB,YAAAyhB,aAAAE,EAAAF,eArEAI,mBAkBA,SAAAC,EAAAC,EAAAC,KAjBAC,YAuEA,WACA,OAAAd,EAAA1mB,UAvEAnQ,aAAAA,GAGA,SAAAA,IACA,OAAA62B,GClBA,SAAAe,iBAAAz9B,EAAA6b,EAAA1a,EAAAoC,EAAAsY,GAMA,SAAA7O,EAAArI,GAEA3E,EAAAk9B,UAAA35B,EAAAsC,eACA7F,EAAAk9B,UAAAQ,eAMA19B,EAAAk9B,UAAAlnB,UACAhW,EAAA29B,YAAA,EACA39B,EAAA49B,UAAA59B,EAAAk9B,UAAA3hB,cAAAvb,EAAAk9B,UAAAW,gBACA79B,EAAA89B,UAAA99B,EAAAk9B,UAAAC,cAAAn9B,EAAAk9B,UAAAa,gBACA/9B,EAAAg+B,cAAA,EACAh+B,EAAAgW,SAAAhW,EAAAk9B,UAAAlnB,SACAhW,EAAAi+B,gBAAA,UAAAj+B,EAAAgW,SACAhW,EAAAk+B,YAAAl+B,EAAAgW,WAEAhW,EAAA49B,WAAA59B,EAAAk9B,UAAAW,gBACA79B,EAAA89B,WAAA99B,EAAAk9B,UAAAa,gBACA/9B,EAAA29B,YAAA39B,EAAAk9B,UAAAiB,iBACAn+B,EAAAi+B,gBAAA,QACAj+B,EAAAg+B,cAAAh+B,EAAAk9B,UAAAW,iBAAA79B,EAAAk9B,UAAAa,iBAAA/9B,EAAAk9B,UAAAiB,mBAAA,cAAAx5B,IAAAkX,EAAAuiB,GAAA,cACAp+B,EAAAgW,SAAA,KAnBAhW,EAAA29B,YAAA,EACA39B,EAAA49B,WAAA,EACA59B,EAAA89B,WAAA,EACA99B,EAAAg+B,cAAA,GAVAh+B,EAAAg+B,cAAA,EACAh+B,EAAAk+B,YAAA,KA8BAlxB,IAGAhN,EAAAqE,IAAA,gBAAA,SAAAM,EAAAvE,GACA4M,EAAA,cAGAhN,EAAAqE,IAAA,iBAAA,SAAAM,EAAAvE,GACA4M,EAAA,eAGAhN,EAAAq+B,SAAA,WACA,GAAA96B,EAAAq5B,aACAr5B,EAAAw5B,SAAA58B,KAAA,WACA,UAAAH,EAAAk9B,UAAAoB,SACAn9B,EAAAqF,KAAA,kEAEA,SAAAxG,EAAAk9B,UAAAoB,UACAn9B,EAAAqF,KAAA,cAEAwG,WAKA,GAAA,UAAAhN,EAAAk9B,UAAAoB,SAAA,CACA,IAAA1wB,KACA5N,EAAAk+B,cACAtwB,GACA2wB,aAAAv+B,EAAAk+B,cAGA36B,EAAAu5B,eAAAlvB,GAAAzN,KAAA,WACAgB,EAAAqF,KAAA,qBACAxG,EAAAk+B,YAAA,KACAlxB,EAAA,YACA6O,EAAAK,GAAA,qBAEA,SAAAlc,EAAAk9B,UAAAoB,SACAziB,EAAAK,GAAA,cAEA/a,EAAAqF,KAAA,iD3C3EA7G,YAAA+R,QAAA,mBAAA,SAAA8sB,GACAA,EAAAC,kBAAA,MAGA9+B,YAAA+R,QAAA,mBAAA,SAAAgtB,OAIAj/B,QAAAC,OAAA,eAAAgS,QAAA,iBAAA,qBAAA,oBAAA,gBAAA,6BAAA,8BAAA,eAAA,SAAAitB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAtC,GAyiBA,SAAAuC,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAAiS,GACA,IAAAyV,EAAA1C,EAAA9M,QACAyhB,EAAA35B,EAAAsC,eAoBA,OAlBA,WAAA2P,GACA0nB,EAAAiB,kBAAAjB,EAAAF,aACA,UAAAxnB,GACA0nB,EAAAa,iBAAAb,EAAAC,YACA,UAAA3nB,KACA0nB,EAAAW,iBAAAX,EAAA3hB,eAIA,SAAA2hB,EAAAoB,SACArT,EAAAnkB,UAEAiB,EAAA,WAGA8T,EAAAK,GAAA,gBAGA+O,EAAAvP,QA9jBAojB,EAAAI,WAAA,EACAJ,EAAAK,kBAAA,EACAL,EAAAM,qBAAA,EACAL,EAAAM,YAAA,GAEAT,EAAAU,UAAA,KAEAX,EACAhiB,MAAA,QACAzL,IAAA,GACAquB,UAAA,EACAz4B,WAGA04B,OACAC,QACA1/B,YAAA,iCACAF,WAAA,uBAIA8c,MAAA,eACAzL,IAAA,UACAsuB,SACAD,UAAA,IAEA5iB,MAAA,oBACAzL,IAAA,QACAsuB,OACAE,cACA3/B,YAAA,iCACAF,WAAA,mBACA4S,aAAA,OACA3L,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEAmO,QAAA,gBAAA,gBAAA,SAAAutB,EAAA79B,GACA,OAAAA,EAAAlB,QAEAi1B,YAAA,gBAAA,gBAAA,SAAA8J,EAAA79B,GACA,OAAAA,EAAAG,YAEA6a,WAAA,WACA,OAAA,IAEAujB,QAAA,eAAA,SAAArX,GACA,MAAA,uBAMA3L,MAAA,oBACAzL,IAAA,QACAsuB,OACAE,cACA3/B,YAAA,iCACAF,WAAA,mBACAiH,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEAmO,QAAA,gBAAA,gBAAA,SAAAutB,EAAA79B,GACA,OAAAA,EAAAlB,QAEAi1B,YAAA,gBAAA,gBAAA,SAAA8J,EAAA79B,GACA,OAAAA,EAAAG,YAEA6a,WAAA,WACA,OAAA,IAEAujB,QAAA,eAAA,SAAArX,GACA,MAAA,uBAMA3L,MAAA,yBACAzL,IAAA,aACAsuB,OACAE,cACA3/B,YAAA,iCACAF,WAAA,mBACAiH,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEAmO,QAAA,gBAAA,gBAAA,SAAAutB,EAAA79B,GACA,OAAAA,EAAAlB,QAEAi1B,YAAA,gBAAA,gBAAA,SAAA8J,EAAA79B,GACA,OAAAA,EAAAG,YAEA6a,WAAA,WACA,OAAA,IAEAujB,QAAA,eAAA,SAAArX,GACA,MAAA,4BAMA3L,MAAA,0BACAzL,IAAA,cACAsuB,OACAE,cACA3/B,YAAA,iCACAF,WAAA,mBACAiH,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEAmO,QAAA,gBAAA,gBAAA,SAAAutB,EAAA79B,GACA,OAAAA,EAAAlB,QAEAi1B,YAAA,gBAAA,gBAAA,SAAA8J,EAAA79B,GACA,OAAAA,EAAAG,YAEA6a,WAAA,WACA,OAAA,IAEAujB,QAAA,eAAA,SAAArX,GACA,MAAA,6BAMA3L,MAAA,2BACAzL,IAAA,eACAsuB,OACAE,cACA3/B,YAAA,iCACAF,WAAA,mBACAiH,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEAmO,QAAA,gBAAA,gBAAA,SAAAutB,EAAA79B,GACA,OAAAA,EAAAlB,QAEAi1B,YAAA,gBAAA,gBAAA,SAAA8J,EAAA79B,GACA,OAAAA,EAAAG,YAEA6a,WAAA,WACA,OAAA,IAEAujB,QAAA,eAAA,SAAArX,GACA,MAAA,8BAMA3L,MAAA,wBACAzL,IAAA,YACAsuB,OACAE,cACA3/B,YAAA,iCACAF,WAAA,mBACAiH,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEAmO,QAAA,gBAAA,gBAAA,SAAAutB,EAAA79B,GACA,OAAAA,EAAAlB,QAEAi1B,YAAA,gBAAA,gBAAA,SAAA8J,EAAA79B,GACA,OAAAA,EAAAG,YAEA6a,WAAA,WACA,OAAA,IAEAujB,QAAA,eAAA,SAAArX,GACA,MAAA,2BAMA3L,MAAA,cACAzL,IAAA,SACAquB,UAAA,EACAC,OACAE,cACA3/B,YAAA,gCACAF,YAAA,SAAA,SAAA,SAAAG,EAAA6b,GACA7b,EAAA6b,OAAAA,IAEA/U,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEAo8B,QAAA,eAAA,SAAArX,GACA,MAAA,eAOA3L,MAAA,mBACAzL,IAAA,SACAsuB,OACAI,oBACA7/B,YAAA,qCACAF,WAAA,kBACAiH,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEAo8B,QAAA,eAAA,SAAArX,GACA,MAAA,eAMA3L,MAAA,uBACAzL,IAAA,YACAsuB,OACAI,oBACA7/B,YAAA,2CACAF,WAAA47B,0BACA30B,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEAm4B,UAAA,QAAA,SAAAz7B,GACA,OAAAA,EAAAC,IAAA,+BAAAmN,QAAA,SAAAzL,GACA,OAAAA,MAGA+9B,QAAA,eAAA,SAAArX,GACA,MAAA,0BAMA3L,MAAA,uBACAzL,IAAA,YACAsuB,OACAI,oBACA7/B,YAAA,yCACAF,WAAA+yB,wBACA9rB,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEAsvB,SAAA,gBAAA,uBAAA,SAAAoM,EAAAlO,GACA,OAAAA,EAAAC,qBAEA2O,QAAA,eAAA,SAAArX,GACA,MAAA,0BAMA3L,MAAA,wBACAzL,IAAA,aACAsuB,OACAI,oBACA7/B,YAAA,2CACAF,WAAAggC,0BACA/4B,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEAu8B,WAAA,eAAA,SAAA/hB,GACA,OAAAA,EAAAI,uBAEAwhB,QAAA,eAAA,SAAArX,GACA,MAAA,2BAMA3L,MAAA,eACAzL,IAAA,UACAsuB,SACAD,UAAA,IAEA5iB,MAAA,uBACAzL,IAAA,WACAsuB,OACAE,cACA3/B,YAAA,iCACAF,WAAA,mBACAiH,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEA4xB,YAAA,gBAAA,gBAAA,SAAA8J,EAAA79B,GACA,OAAAA,EAAAG,YAKA6a,WAAA,WACA,OAAA,IAEAujB,QAAA,eAAA,SAAArX,GACA,MAAA,gBAMA3L,MAAA,uBACAzL,IAAA,WACAsuB,OACAE,cACA3/B,YAAA,iCACAF,WAAA,mBACAiH,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEA4xB,YAAA,gBAAA,gBAAA,SAAA8J,EAAA79B,GACA,OAAAA,EAAAG,YAEA6a,WAAA,WACA,OAAA,IAEAujB,QAAA,eAAA,SAAArX,GACA,MAAA,0BAMA3L,MAAA,mBACAzL,IAAA,OACAsuB,OACAE,cACA3/B,YAAA,iCACAF,WAAA,mBACAiH,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEA4xB,YAAA,gBAAA,gBAAA,SAAA8J,EAAA79B,GACA,OAAAA,EAAAG,YAEA6a,WAAA,WACA,OAAA,IAEAujB,QAAA,eAAA,SAAArX,GACA,MAAA,sBAMA3L,MAAA,qBACAzL,IAAA,SACAsuB,OACAE,cACA3/B,YAAA,iCACAF,WAAA,mBACAiH,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEA4xB,YAAA,gBAAA,gBAAA,SAAA8J,EAAA79B,GACA,OAAAA,EAAAG,YAEA6a,WAAA,WACA,OAAA,IAEAujB,QAAA,eAAA,SAAArX,GACA,MAAA,wBAMA3L,MAAA,sBACAzL,IAAA,UACAsuB,OACAE,cACA3/B,YAAA,iCACAF,WAAA,mBACAiH,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEA4xB,YAAA,gBAAA,gBAAA,SAAA8J,EAAA79B,GACA,OAAAA,EAAAG,YAEA6a,WAAA,WACA,OAAA,IAEAujB,QAAA,eAAA,SAAArX,GACA,MAAA,yBAMA3L,MAAA,yBACAzL,IAAA,aACAsuB,OACAE,cACA3/B,YAAA,iCACAF,WAAA,mBACAiH,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEA4xB,YAAA,gBAAA,gBAAA,SAAA8J,EAAA79B,GACA,OAAAA,EAAAG,YAEA6a,WAAA,WACA,OAAA,IAEAujB,QAAA,eAAA,SAAArX,GACA,MAAA,6BAMA3L,MAAA,oBACAzL,IAAA,QACAsuB,OACAE,cACA3/B,YAAA,iCACAF,WAAA,mBACAiH,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEA4xB,YAAA,gBAAA,gBAAA,SAAA8J,EAAA79B,GACA,OAAAA,EAAAG,YAEA6a,WAAA,WACA,OAAA,IAEAujB,QAAA,eAAA,SAAArX,GACA,MAAA,uBAMA3L,MAAA,qBACAzL,IAAA,SACAsuB,OACAE,cACA3/B,YAAA,iCACAF,WAAA,mBACAiH,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,WAEA4xB,YAAA,gBAAA,gBAAA,SAAA8J,EAAA79B,GACA,OAAAA,EAAAG,YAEA6a,WAAA,WACA,OAAA,IAEAujB,QAAA,eAAA,SAAArX,GACA,MAAA,wBAOA3L,MAAA,eACAzL,IAAA,mIACAsuB,OACAE,cACA3/B,YAAA,iCACAF,WAAA,mBACAiH,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,YAEA4xB,YAAA,gBAAA,gBAAA,SAAA8J,EAAA79B,GACA,OAAAA,EAAAG,YAEAo+B,QAAA,eAAA,SAAArX,GACA,MAAA,gBAMA3L,MAAA,uBACA6iB,OACAO,uBACAhgC,YAAA,yCACAF,WAAA,0BACA4S,aAAA,eACApK,SACAwU,SAAA,GAEAjP,QACA2M,cAAA,MAEAzT,SACAm4B,eAAA,KAAA,WAAA,SAAA,mBAAA,SAAA1W,EAAAxgB,EAAA8T,EAAAtY,GACA,OAAA07B,EAAA1W,EAAAxgB,EAAA8T,EAAAtY,EAAA,YAEAo8B,QAAA,eAAA,SAAArX,GACA,IACA4L,EADAhc,EAAA,iBAUA,OARAoQ,EAAApQ,MACAgc,EAAA5L,EAAApQ,MACAoQ,EAAAlC,QACA8N,EAAA5L,EAAAlC,OAEA8N,IACAhc,GAAA,KAAAgc,EAAA,KAEAhc,SAMAyE,MAAA,cACAzL,IAAA,SACAsuB,OACAE,cACA3/B,YAAA,gCACAF,WAAA,kBACAiH,SACAm4B,cAAA,WACA,OAAA,MAEAU,QAAA,eAAA,SAAArX,GACA,MAAA,eASAuW,EAAAmB,WAAA,GA8EAhB,EACAiB,UAAA,YACAjB,EACAkB,WAAA,GAAA,MAIAvgC,YAAA+R,QAAA,6BAAA,SAAAyuB,GACAA,EAAAC,QAAA,yCAGAzgC,YAAA+R,QAAA,wBAAA,SAAA2uB,GACAA,EAAAC,iBAAA,OAGA3gC,YAAA+R,QAAA,gBAAA,SAAA6uB,GACAA,EAAAC,iBAAA,KACAD,EAAAE,eAAA,mBAGA9gC,YAAA+gC,UAAA,UAAA,WACA,OAAA,SAAA3/B,EAAAiH,EAAAC,GACAD,EAAA24B,KAAA,mBAAA,SAAAh8B,GACA,KAAAA,EAAA2O,QACAvS,EAAA6J,OAAA,WACA7J,EAAA6/B,WAAA34B,EAAA44B,WAGAl8B,EAAAm8B,uBAMAnhC,YAAAuL,OAAA,UAAA,WACA,OAAA,SAAAlF,GAEA,OADA,IAAAG,IAAA,2BAAAH,EAAA9E,gBACAkF,cAIAzG,YAAAohC,QAAA,SAAA,aAAA,WAAA,SAAAtE,EAAA10B,GACA,OAAA,SAAA0D,GACA1D,EAAA,WACA00B,EAAA1pB,WAAA,UAAAtH,SAKA9L,YAAAqhC,KAAA,aAAA,SAAAvE,GACAA,EAAAp4B,IAAA,sBACA,SAAAM,EAAAs8B,EAAAC,EAAAC,EAAAC,GACA,IACA3E,EAAAvkB,MAAA+oB,EAAAzB,MAAA6B,OAAAC,KAAAL,EAAAzB,OAAA,IAAA14B,QAAA64B,OAAA,GAAAuB,GACA,MAAAl3B,UAOArK,YAAAuL,OAAA,aAAA,gBAAA,SAAA9J,GACA,OAAA,SAAA8P,GACA,OAAA9P,EAAAG,UAAAggC,UACAngC,EAAAG,UAAAggC,UAAAzgC,QAAA,KAAA0gC,OAAAtwB,IAEAA,MAIAvR,YAAA+R,QAAA,WAAA,SAAA+vB,GACAA,EAAAC,UAAA,qBAAA,YAAA,YAAA,SAAAC,EAAAC,GACA,OAAA,SAAAC,EAAAC,GACAH,EAAAE,EAAAC,GACA,IAEA,GAAAriC,QAAAgL,UAAAo3B,EAAAE,OAAA,CACA,IAAAA,EAAAF,EAAAE,MAAAp3B,MAAA,MAAAoG,IAAA,SAAAixB,GACA,OAAAA,EAAAC,SAEAF,EAAAA,EAAAx4B,KAAA,OAGA,MAAAS,GACArB,QAAA7G,MAAA,uCAAAkI,WAMAvH,EAAAy/B,OACAC,cAAA,SAAAC,GACA,OAAA3/B,EAAAD,YAAA4/B,IAAA3/B,EAAA4/B,OAAAD,IAAA3/B,EAAA6/B,SAAAF,IAAA,IAAAA,EAAAt/B,UAIAnD,YAAAohC,QAAA,mBAAA,YAAA,SAAAa,GAUA,OARAhgC,SAAA,SAAAA,GAKA,OAJA,MAAAA,EAAA6P,QAAA,sBACAmwB,EAAA1hC,IAAA,oBAAAk9B,mBAAA,QAAAx7B,EAAA6P,QAAA,qBAAA,QAAA7P,EAAA6P,QAAA,qBAAA7P,EAAA6P,QAAA,mBAGA7P,OAMAjC,YAAA+R,QAAA,gBAAA,SAAA6wB,GACAA,EAAAC,aAAA7/B,KAAA,sBAGAhD,YAAA+gC,UAAA,aAAA,WAAA,SAAA34B,GACA,OACAlH,SAAA,KACAsG,KAAA,SAAAs7B,EAAAC,GACA36B,EAAA,WACA26B,EAAA,GAAAnyB,SACA,QAMA5Q,YAAAohC,QAAA,oBAAA,KAAA,UAAA,QAAA,SAAAxY,EAAAllB,EAAAlC,GACA,OACAwhC,cAAA,SAAAC,GACA,OAAAA,EAAApxB,QACA,KAAA,IACArQ,EAAAqF,KAAA,8CAMA,OAHA/G,QAAAgL,UAAAm4B,EAAAlxB,UACAkxB,EAAAlxB,OAAAmxB,gBAAA,GAEAta,EAAAua,OAAAF,QAKAjjC,YAAA+R,QAAA,gBAAA,SAAA6wB,GACAA,EAAAC,aAAA7/B,KAAA,uBAIAhD,YAAAohC,QAAA,SAAA,WAAA,UAAA,SAAAh5B,EAAA1E,GACA,OAAA,SAAAuG,GAKA7B,EAAA,WACA,IAAAC,EAAA3E,EAAAyL,SAAAC,eAAAnF,GACA5B,GACAA,EAAAuI,cAKA5Q,YAAA+gC,UAAA,cAAA,QAAA,SAAAnwB,GACA,OAAA,SAAAxP,EAAAuP,EAAArI,GACAqI,EAAAvG,GAAA9B,EAAA86B,WAAA,WACAxyB,EAAAtI,EAAA+6B,gBAKAjiC,EAAAsD,IAAA,WAAA,WACAiM,EAAA0H,IAAA/P,EAAA86B,kBC1xBAtjC,QACAC,OAAA,eACAghC,UAAA,aAAA9gC,YClBAH,QACAC,OAAA,eACAghC,UAAA,aAAAjgC,YCFAhB,QACAC,OAAA,eACAghC,UAAA,yBAAAz/B,wBCFAxB,QACAC,OAAA,eACAghC,UAAA,kBAAAz+B,iBCDA4E,qBAAA/G,SAAA,SAAA,oBAAA,OAAAL,QACAC,OAAA,eACAghC,UAAA,eAAA39B,cA+MAtD,QACAC,OAAA,eACAG,WAAA,uBAAAgH,sBAeApH,QACAC,OAAA,eACAwL,OAAA,OAAA,WACA,OAAA,SAAA7D,GACA,OAAAA,EAAA,IACAC,KAAAC,MAAAF,EAAA,KAAA,IAEAA,KCvOAS,eAAAhI,SAAA,YACAL,QACAC,OAAA,eACAghC,UAAA,iBAAA54B,gBCLArI,QACAC,OAAA,eACAghC,UAAA,sBAEAv4B,8BqCLA1I,QACAC,OAAA,eAAAghC,UAAA,aAAA,WAAA,SAAA34B,GAKA,OACAlH,SAAA,IACAmC,QAAA,UACAmE,KAAA,SAAAnH,EAAAkD,EAAA+/B,EAAAC,GAEAA,EAAAC,SAAAC,QAAA,SAAA7+B,GAIA,OAHAwD,EAAA,WACA7E,EAAA,GAAAqN,UAEAhM,SpCCA9E,QACAC,OAAA,eACAghC,UAAA,yBAAA71B,wBClBApL,QACAC,OAAA,eACAghC,UAAA,eAAA50B,cCFArM,QACAC,OAAA,eACAghC,UAAA,eAAAt0B,cCFA3M,QACAC,OAAA,eACAghC,UAAA,YAAAtzB,WCDAoC,qBAAA1P,SAAA,SAAA,oBAAA,SACAgQ,WAAAhQ,SAAA,aAAAL,QACAC,OAAA,eACAghC,UAAA,WAAAnzB,UAkIA9N,QACAC,OAAA,eACAG,WAAA,uBAAA2P,sBAWA/P,QACAC,OAAA,eACAwL,OAAA,kBAAAuE,iBAQAhQ,QACAC,OAAA,eACAwL,OAAA,aAAA4E,YAQArQ,QACAC,OAAA,eACAwL,OAAA,kBAAA+E,iBCzKAxQ,QACAC,OAAA,eAAAghC,UAAA,UAAArwB,SCDA5Q,QACAC,OAAA,eACAghC,UAAA,uBAAAlwB,sBCFA/Q,QACAC,OAAA,eACAghC,UAAA,qBAAA/uB,oBCDAwB,eAAArT,SAAA,gBACAiU,cAAAjU,SAAA,gBAAAL,QACAC,OAAA,eAAAghC,UAAA,sBAAAluB,qBAiDA/S,QACAC,OAAA,eAAAghC,UAAA,iBAAAvtB,gBA8BA1T,QACAC,OAAA,eAAAghC,UAAA,mBAAAjtB,kBAsDAhU,QACAC,OAAA,eAAAghC,UAAA,gBAAA3sB,eAkCAtU,QACAC,OAAA,eAAAghC,UAAA,aAAA1sB,YAyDAvU,QACAC,OAAA,eAAAghC,UAAA,oBAAA5rB,mBA6CArV,QACAC,OAAA,eAAAghC,UAAA,iBAAAzrB,gBCtRAxV,QACAC,OAAA,eACAghC,UAAA,iBAAAnrB,gBCAAoB,aAAA7W,SAAA,YAAA,SAAA,YAMAL,QACAC,OAAA,eAAAghC,UAAA,eAAA/pB,cCTAlX,QACAC,OAAA,eACAghC,UAAA,eAAAzoB,cCFAxY,QACAC,OAAA,eACAghC,UAAA,cAAAroB,aCDA0B,YAAAja,SAAA,gBAAAL,QACAC,OAAA,eACAghC,UAAA,cAAA3mB,aCFAG,WAAApa,SAAA,gBAAAL,QACAC,OAAA,eACAghC,UAAA,aAAAxmB,YCFA7N,cAAAvM,SAAA,QAAA,QAAA,UAAA,iBAAA,uBAAA,YAAA,YACA+a,wBAAA/a,SAAA,SAAA,QAAA,YAAA,wBAAAL,QACAC,OAAA,eACAqhC,QAAA,gBAAA10B,eAiGA5M,QACAC,OAAA,eACAG,WAAA,0BAAAgb,yBCtGAG,uBAAAlb,SAAA,SAAA,gBAAA,uBAAA,mBAAA,QAAA,YAAA,iBACAub,sBAAAvb,SAAA,SAAA,oBAAA,QACA6b,yBAAA7b,SAAA,SAAA,oBAAA,SAAA,oBAAAL,QACAC,OAAA,eACAG,WAAA,yBAAAmb,wBA6FAvb,QACAC,OAAA,eACAG,WAAA,wBAAAwb,uBASA5b,QACAC,OAAA,eACAG,WAAA,2BAAA8b,0BC9GAQ,iBAAArc,SAAA,SAAA,SAAA,YAAA,QAAA,QAAA,iBAAA,mBAAA,gBAAA,0BAAAL,QACAC,OAAA,eACAG,WAAA,mBAAAsc,kBCFA4B,aAAAje,SAAA,SAAAL,QACAC,OAAA,eACAqhC,QAAA,eAAAhjB,cCFAU,gBAAA3e,SAAA,SAAA,UAAA,eAAA,UAAA,sBAAA,WAAA,UAAA,iBAAAL,QACAC,OAAA,eACAG,WAAA,kBAAA4e,iBCFAoH,cAAA/lB,SAAA,SACAL,QACAC,OAAA,eACAqhC,QAAA,gBAAAlb,eCHAwC,wBAAAvoB,SAAA,eAAA,SAAA,KAAA,WAAA,YAAA,UAAA,QAAA,sBAAA,gBAAA,gBAAA,oBAAA,gBAAAL,QACAC,OAAA,eACAG,WAAA,0BAAAwoB,yBCFA0I,qBAAAjxB,SAAA,UAAA,SAAAL,QACAC,OAAA,eACAqhC,QAAA,uBAAAhQ,sBCFA6B,wBAAA9yB,SAAA,SAAA,SAAA,uBAAA,gBAAA,UAAA,OAAA,UAAA,WAAA,QAAA,aAAAL,QACAC,OAAA,eACAG,WAAA,0BAAA+yB,yBCFAuB,iBAAAr0B,SAAA,SAAA,QAAA,eAAA,SAAA,YAAA,WAAA,OAAA,QAAA,gBAAA,QAAA,gBAAA,mBAAA,oBAAA,WAAA,wBACA23B,8BAAA33B,SAAA,SAAA,YAAA,gBAAA,oBAAA,kBAAA,YAAAL,QACAC,OAAA,eACAG,WAAA,mBAAAs0B,kBAyVA10B,QACAC,OAAA,eACAG,WAAA,gCAAA43B,+BC9VAhf,eAAA3Y,SAAA,QAAA,yBAAA,aACAk5B,yBAAAl5B,SAAA,SAAA,WAAA,QAAA,UAAA,uBAAA,UAAA,WAAAL,QACAC,OAAA,eACAqhC,QAAA,iBAAAtoB,gBAqCAhZ,QACAC,OAAA,eACAG,WAAA,2BAAAm5B,0BC1CA3c,uBAAAvc,SAAA,SAAAL,QACAC,OAAA,eACAqhC,QAAA,yBAAA1kB,wBCFAzK,mBAAA9R,SAAA,QAAA,gBAAA,+BAAAL,QACAC,OAAA,eACAqhC,QAAA,qBAAAnvB,oBCFA8nB,aAAA55B,SAAA,aACAm0B,kBAAAn0B,SAAA,SAAA,oBAAA,WAAA,UAAA,SAAA,aAAAL,QACAC,OAAA,eACAqhC,QAAA,eAAArH,cA6DAj6B,QACAC,OAAA,eACAG,WAAA,oBAAAo0B,mBCnEAx0B,QACAC,OAAA,eACA2jC,QAAA,sBAAAjJ,qBCDAte,iBAAAhc,SAAA,aACAw6B,2BAAAx6B,SAAA,SAAA,oBAAA,YAAA,QAAA,UAAA,gBAAAL,QACAC,OAAA,eACAqhC,QAAA,mBAAAjlB,kBAwBArc,QACAC,OAAA,eACAG,WAAA,6BAAAy6B,4BC7BAe,gBAAAv7B,SAAA,SAAA,uBAAA,SAAA,mBAAA,SAAAL,QACAC,OAAA,eACAG,WAAA,kBAAAw7B,iBCFAI,0BAAA37B,SAAA,SAAA,QAAA,YACAi8B,WAAAj8B,SAAA,cAAAL,QACAC,OAAA,eACAG,WAAA,4BAAA47B,2BAgBAh8B,QACAC,OAAA,eACAwL,OAAA,aAAA6wB,YAkBAt8B,QACAC,OAAA,eACAwL,OAAA,eAAAkxB,cAWA38B,QACAC,OAAA,eACAwL,OAAA,sBAAAmxB,qBASA58B,QACAC,OAAA,eACAwL,OAAA,eAAAoxB,cCjEAE,gBAAA18B,SAAA,SAAA,QAAA,eAAA,UAAAL,QACAC,OAAA,eACAG,WAAA,kBAAA28B,iBCFAj5B,iBAAAzD,SAAA,KAAA,aAAA,QAAA,eAAA,6BAAA,UAAAL,QACAC,OAAA,eACAqhC,QAAA,mBAAAx9B,kBCFAk6B,iBAAA39B,SAAA,SAAA,SAAA,QAAA,mBAAA,UAAAL,QACAC,OAAA,eACAG,WAAA,mBAAA49B,kBEHA,IAAA6F,YAAA,sCACAC,8BAAA,ECqgBA,SAAAC,iBAAAvjC,EAAAsoB,EAAAnlB,GAEA,OACAqgC,gBAIA,SAAAvyB,EAAA5I,GACA,IAAA2iB,EAAA1C,EAAA9M,QAaA,OAXAxb,EAAA4d,KAAA3M,EAAA5I,GAAA+E,QAAA,SAAApK,GAEAA,EAAApB,WACAopB,EAAAnkB,SAAAmU,SAAA,EAAAlZ,QAAA,KAAAgK,MAAA9I,IAEAgoB,EAAA6X,QAAA7nB,SAAA,EAAAlZ,QAAAkB,EAAAlB,YAEAD,MAAA,SAAAmB,GACAgoB,EAAA6X,QAAA7nB,SAAA,EAAAlZ,QAAAkB,EAAAlB,YAGAkpB,EAAAvP,SAjBAgoB,UAoBA,SAAAC,GACA,IAAA1Y,EAAA1C,EAAA9M,QAqBA,OAnBArY,EAAAuD,MACA5G,YAAA,iCACAF,WAAA+jC,2BACAn9B,KAAA,KACA+T,SAAA,SACAkd,cAAA,iBACA5wB,SACA68B,iBAAA,WACA,OAAAA,MAKA1gC,OAAA9C,KAAA,SAAAC,GACA6qB,EAAAnkB,QAAA1G,EAAA,GAAAA,EAAA,KACA,SAAA2B,GACAkpB,EAAA6X,OAAA/gC,KAGAkpB,EAAAvP,UASA,SAAAkoB,2BAAA5jC,EAAAwN,EAAAvN,EAAA8H,EAAA5G,EAAAwiC,GAEA,IAAAE,EAEA7jC,EAAA8a,cAAAhH,EACA7T,EAAA4d,KAAA,gCAAA8lB,GAAAt2B,QAAA,SAAAjN,GACAJ,EAAA8jC,QAAA1jC,EAAAujC,EAAAI,gBACA,IAAA3jC,EAAA0C,QACA3B,EAAAqF,KAAA,8BAEA1E,MAAA,WACA9B,EAAAgkC,SAAA,mBAGAj8B,EACA87B,EAAAr2B,EAAA,WACAvN,EAAAC,IAAA,yCAAAC,KAAA,SAAAC,GACA,IAAA2Q,EAAA3Q,EAAAA,KACA0a,KACA,IAAA,IAAArP,KAAAsF,EACA,GAAAA,EAAAkzB,eAAAx4B,GACA,IAAA,IAAAuL,EAAA,EAAAA,EAAAjG,EAAAtF,GAAA3I,OAAAkU,IAAA,CACA,IAAAjV,EAAA,GACA,WAAA4hC,EAAAO,YACAniC,GAAA0J,EAAA,MAEA1J,GAAAgP,EAAAtF,GAAAuL,GACA8D,EAAAnY,KAAAZ,GAIA/B,EAAA8a,SAAAA,KAGA,KACA,KAGA9a,EAAAqE,IAAA,WAAA,WACA5E,QAAAgL,UAAAo5B,IACAr2B,EAAA5F,OAAAi8B,KDlmBAlkC,YAAAohC,QAAA,wBAAA,KAAA,QAAA,UAAA,sBAAA,SAAAxY,EAAApnB,EAAAmZ,EAAA8f,GACA,OAEAhhB,oBAAA,SAAA+qB,GACAZ,8BAAA,EACA,IACA,OAAAY,IACA,QACAZ,8BAAA,IAKAZ,cAAA,SAAAyB,GAGA,GAFA9pB,EAAA5O,QACA04B,GAAAA,EAAA1yB,QAAA,MAAA0yB,EAAA5yB,QAAA4yB,EAAA1yB,OAAAD,SAAA2yB,EAAA1yB,OAAAD,QAAA6xB,eAAAc,EAAA1yB,OAAAR,IAAAjH,SAAA,cAAAm6B,EAAA1yB,OAAAR,IAAAjH,SAAA,WAAAm6B,EAAA1yB,OAAAmxB,eACA,CACA,GAAAuB,EAAAhkC,KAAA,CAEA,IAAA2B,EAAA,yBAAAqiC,EAAAhkC,KAAAoR,OAAA,KAAA4yB,EAAAhkC,KAAA0B,MACAsiC,EAAAhkC,KAAAikC,OACAtiC,GAAA,iBAAAqiC,EAAAhkC,KAAAikC,MAGAtiC,GADA,yBAAAA,EACA,oBAAAqiC,EAAAhkC,KAAA2B,QAEA,sBAAAqiC,EAAAhkC,KAAAyhC,eAGA9/B,EAAA,uEAAAuiC,KAAAC,UAAAH,GAEAhK,EAAAzzB,KAAA5E,QAEAqiC,GAAAA,EAAA1yB,QAAA0yB,EAAA1yB,OAAAD,SAAA2yB,EAAA1yB,OAAAD,QAAA6xB,cAAAc,EAAA1yB,OAAAR,IAAAjH,SAAA,aACAtB,QAAA3G,IAAA,mEAGA,OAAAumB,EAAAua,OAAAsB,QAKAzkC,YAAA+R,QAAA,WAAA,gBAAA,SAAA+vB,EAAAc,GAKA,SAAAiC,EAAA9yB,GASA,OARAA,EAAAA,OACAD,QAAAC,EAAAD,YAGA8xB,+BACA7xB,EAAAD,QAAA6xB,cAAA,GAGA5xB,EAbA6wB,EAAAC,aAAA7/B,KAAA,wBAiBA8+B,EAAAC,UAAA,SAAA,YAAA,SAAAC,GACA,SAAA8C,EAAAxzB,GACA,OAAA,SAAAC,EAAAQ,GACA,OAAAiwB,EAAA1wB,GAAAC,EAAAszB,EAAA9yB,KAIA,SAAAgzB,EAAAzzB,GACA,OAAA,SAAAC,EAAA9Q,EAAAsR,GACA,OAAAiwB,EAAA1wB,GAAAC,EAAA9Q,EAAAokC,EAAA9yB,KAkBA,IAAAizB,EAAA,SAAAjzB,GACA,OAAAiwB,EAAA6C,EAAA9yB,KAYA,OATAizB,EAAAzkC,IAAAukC,EAAA,OACAE,EAAAC,OAAAH,EAAA,UACAE,EAAAE,KAAAJ,EAAA,QACAE,EAAAG,MAAAL,EAAA,SACAE,EAAA9mB,KAAA6mB,EAAA,QACAC,EAAAnkC,IAAAkkC,EAAA,OAvBA,SAAAC,GACA,IAAA,IAAA18B,KAAA05B,EACAgD,EAAAV,eAAAh8B,KACA,mBAAA05B,EAAA15B,GACA08B,EAAA18B,GAAA,WACA,OAAA05B,EAAA/+B,MAAA++B,EAAAoD,YAGAJ,EAAA18B,GAAA05B,EAAA15B,IAiBA+8B,CAAAL,GAEAA,QCtGAnB,iBAAA1jC,SAAA,QAAA,KAAA,aACA8jC,2BAAA9jC,SAAA,SAAA,YAAA,QAAA,WAAA,QAAA,oBAAAmlC,SAAA,SAAAC,GACA,OAAAA,EAAAv6B,MAAA,IAAAw6B,OAAA,SAAAjoB,EAAAkoB,GAEA,OADAloB,GAAAA,GAAA,GAAAA,EAAAkoB,EAAAC,WAAA,IACAnoB,GACA,IAGAzd,QACAC,OAAA,eAAAshC,KAAA,eAAA,2BAAA,SAAAsE,EAAAC,GACAA,EAAAC,iBAAA,WAAA,0BACAF,EAAAG,OAAAC,wCAAA,oCAIAjmC,QACAC,OAAA,eACAgS,QAAA,uBAAA,SAAAi0B,GA8IA,SAAAC,EAAA75B,EAAAg4B,GACAh4B,EAAA85B,mBAAA9B,EAAA8B,mBACA95B,EAAA+5B,qBAAA/B,EAAA+B,qBACA/5B,EAAAg6B,gBAAAhC,EAAAgC,gBACAh6B,EAAAi6B,eAAAjC,EAAAiC,eACAj6B,EAAAk6B,eAAAlC,EAAAkC,eACAl6B,EAAA2V,QAAAqiB,EAAAriB,QAnJAikB,EAAAF,OAAAS,0BAAA,EACAP,EAAAF,OAAAU,eAAA,EACAR,EAAAS,gBAAAvuB,OAAAwuB,OAGAV,EAAAW,YACA76B,KAAA,iBACA1L,YAAA,yBAIA4lC,EAAAW,YACA76B,KAAA,WACA7E,UACA,aACA,iGACA,0CACA,eACA2C,KAAA,OAGAo8B,EAAAY,SACA96B,KAAA,OACA7E,UAEA,yJACA,6DACA,mFACA,SACA,UACA2C,KAAA,OAIAo8B,EAAAW,YACA76B,KAAA,eACA7E,UACA,2CACA2C,KAAA,OAGAo8B,EAAAY,SACA96B,KAAA,kBACA+6B,QAAA,QACAC,SAAA,iBAAA,uBAGAd,EAAAY,SACA96B,KAAA,YACA+6B,QAAA,kBACA3mC,YAAA,SAAA,SAAAG,GACAA,EAAA+L,MAAA/L,EAAAqI,QAAA6Z,KAAAvS,OAAAmc,IAAA9rB,EAAA+L,MAAA/L,EAAAqI,QAAA6Z,MAAArD,aAIA8mB,EAAAY,SACA96B,KAAA,iBACA+6B,QAAA,kBACA5/B,UACA,4BACA,0HACA,kDACA,4OACA,UACA2C,KAAA,KACA1J,WAAA,SAAAG,GACAA,EAAA0mC,cAAA,KAIAf,EAAAY,SACA96B,KAAA,kBACA+6B,QAAA,kBACA5/B,SAAA,0YAWA++B,EAAAY,SACA96B,KAAA,eACA7E,UACA,+JACA2C,KAAA,OAGAo8B,EAAAY,SACA96B,KAAA,cACA7E,UACA,4BACA,0EACA,kDACA,iIACA,UACA2C,KAAA,KACA1J,WAAA,SAAAG,GACAA,EAAA2mC,SAAA,WAIA,IAHA,IAAA1jC,EAAA,GAEA2jC,EAAA,uCACA5vB,EAFA,GAEAA,EAAA,IAAAA,EAAA/T,GAAA2jC,EAAAt/B,KAAAuS,MAAAvS,KAAAkwB,SAAAoP,EAAA9jC,SACA9C,EAAA+L,MAAA/L,EAAAqI,QAAA6Z,KAAAjf,MAKA0iC,EAAAY,SACA96B,KAAA,YACA+6B,QAAA,kBACA5/B,UACA,4BACA,0EACA,kDACA,+EACA,UACA2C,KAAA,KACA1J,WAAA,SAAAG,EAAA6mC,GACA7mC,EAAA2G,KAAA,WACAkgC,EAAAlgC,KAAA3G,EAAA+L,MAAA/L,EAAAqI,QAAA6Z,KAAAliB,EAAAu8B,GAAA/mB,MAAArV,KAAA,SAAA2mC,GACA9mC,EAAA+L,MAAA/L,EAAAqI,QAAA6Z,KAAA4kB,QAMAnB,EAAAY,SACA96B,KAAA,iBACA1L,YAAA,gCAGA4lC,EAAAY,SACA96B,KAAA,2BACA+6B,QAAA,iBACAC,SAAA,iBAAA,uBAYAd,EAAAY,SAEA96B,KAAA,YACA1L,YAAA,yBACAF,WAAA,SAAAG,EAAAwjC,EAAA9J,EAAAv4B,GACAnB,EAAA+B,QAAA,GACA/B,EAAA+mC,SAAA9B,SAAAjlC,EAAA+L,MAAAN,MAAAw5B,SAAAjlC,EAAA+L,MAAAoK,MAEA,IAAAV,EAAA,sBAAAzV,EAAA+mC,SACArxB,EAAA,uBAAA1V,EAAA+mC,SASA,SAAApxB,IACAlW,QAAAuI,QAAAyN,GAAAG,YAAA,eACAnW,QAAAuI,QAAAyN,GAAAG,YAAA,eACAnW,QAAAuI,QAAAyN,GAAAG,YAAA,eACAnW,QAAAuI,QAAAyN,GAAAI,SAAA,cAYA7V,EAAA0jC,UAAA,WACAjkC,QAAAuI,QAAAyN,GAAAI,SAAA,6BACA2tB,EAAAE,WAAAK,cAAA/jC,EAAA+L,MAAAm4B,UAAA,WAAA/jC,KAAA,SAAAC,GAIA,GAHAA,EAAAA,EAAA,GAEAwlC,EAAA5lC,EAAA+L,MAAA3L,EAAA2jC,eACA3jC,EAAA2jC,cAAA8B,mBAAA/iC,OAAA,EAAA,CACA,IAAAf,EAAA,YAAA3B,EAAA2jC,cAAA8B,mBACApmC,QAAAuI,QAAA0N,GAAA1F,KAAAjO,GAEA3B,EAAA2jC,cAAAkC,gBAAA7lC,EAAA2jC,cAAAiC,gBAhCAvmC,QAAAuI,QAAAyN,GAAAG,YAAA,eACAnW,QAAAuI,QAAAyN,GAAAG,YAAA,cACAnW,QAAAuI,QAAAyN,GAAAG,YAAA,eACAnW,QAAAuI,QAAAyN,GAAAI,SAAA,eA+BA1U,EAAAqF,KAAA,8CACAxG,EAAAgnC,KAAAC,aAAA,IACA7mC,EAAA2jC,cAAAkC,gBAAA7lC,EAAA2jC,cAAAiC,gBAtBAvmC,QAAAuI,QAAAyN,GAAAG,YAAA,eACAnW,QAAAuI,QAAAyN,GAAAG,YAAA,cACAnW,QAAAuI,QAAAyN,GAAAG,YAAA,eACAnW,QAAAuI,QAAAyN,GAAAI,SAAA,eAqBA6jB,EAAA/yB,KAAA,wBAAA,yMAAA,KAAA,QACA3G,EAAAgnC,KAAAC,aAAA,GACA7mC,EAAA4lC,iBACArwB,IACA+jB,EAAA/yB,KAAA,6BAAA,2KAAA,KAAA,UAEA,SAAA5E,GACAtC,QAAAuI,QAAA0N,GAAA1F,KAAAjO,GACA4T,IACA+jB,EAAA/yB,KAAA,6BAAA,2KAAA,KAAA,UACA2P,QAAA,WACA7W,QAAAuI,QAAAyN,GAAAG,YAAA,mCAMA+vB,EAAAY,SACA96B,KAAA,sBACA+6B,QAAA,YACAC,SAAA,iBAAA,uBAIAd,EAAAY,SACA96B,KAAA,wBACA+6B,QAAA,cACAC,SAAA,iBAAA,uBAGAd,EAAAY,SACA96B,KAAA,yBACA+6B,QAAA,eACAC,SAAA,iBAAA,uBAIAd,EAAAY,SACA96B,KAAA,SACA7E,SAAA,wGAIA++B,EAAAY,SACA96B,KAAA,aACA+6B,QAAA,QACAU,gBACAx8B,UAAA,WACAy8B,iBACA3xB,KAAA,SACA4xB,OAAA,EACAzc,MAAA,OAKAgb,EAAAY,SACA96B,KAAA,mBACA+6B,QAAA,SACAC,SAAA,iBAAA,uBAGAd,EAAAY,SACA96B,KAAA,mBACA+6B,QAAA,SACAC,SAAA,iBAAA,uBAIAd,EAAAY,SACA96B,KAAA,wBACAy7B,gBACAC,iBACAE,YAAA,aACAC,UAAA,0EAGA1gC,SAAA,kIACA/G,WAAA,SAAAG,GACA,IAAAsI,EAAAtI,EAAAu8B,GAAAj0B,aACAA,EAAAi/B,QAAAj/B,EAAAi/B,YACA9nC,QAAA2J,OAAAd,EAAAi/B,SAAA,iBACAvnC,EAAAsI,SAAAA,EACAtI,EAAAuI,QACAW,aAAA,SAAAvB,EAAA3C,GACAhF,EAAAgnC,KAAAQ,WAAA,MAIAf,SAAA,iBAAA,uBAGAd,EAAAY,SACA96B,KAAA,QACA7E,SAAA,sDAGA++B,EAAAY,SACA96B,KAAA,WACA+6B,QAAA,QACAU,gBACAx8B,UAAA,WACAy8B,iBACAxc,MAAA,QAKAgb,EAAAY,SACA96B,KAAA,gBACA1L,YAAA,qBACAF,WAAA,SAAAG,GACAA,EAAAynC,aAAAC,UAAA1nC,EAAA0nC,WACA1nC,EAAA2nC,OAoBA,WACA3nC,EAAAgnC,KAAAQ,WAAA,GACAxnC,EAAA+L,MAAA/L,EAAAqI,QAAA6Z,KAAAliB,EAAA+L,MAAA/L,EAAAqI,QAAA6Z,SACA,IAAA0lB,EAAA5nC,EAAA+L,MAAA/L,EAAAqI,QAAA6Z,KACA2lB,EAAApoC,QAAAqoC,KAAA9nC,EAAAqI,QAAA8+B,gBAAAY,cACAH,EAAAjlC,KAAAklC,IAxBA7nC,EAAAgoC,OA2BA,SAAAC,GACAjoC,EAAA+L,MAAA/L,EAAAqI,QAAA6Z,KAAArf,OAAAolC,EAAA,GACAjoC,EAAAgnC,KAAAQ,WAAA,IA5BAxnC,EAAAkoC,WAEA,SAAAC,GAGA,OAFAA,EAAA1oC,QAAAqoC,KAAAK,GACAnoC,EAAAooC,aAAAD,EACAA,GAGAnoC,EAAAgT,MAAA,SAAAq1B,GACA,OAAA5lC,EAAA6lC,UAAAD,EAAA,SAAAnmB,EAAA6U,GACA,GAAA,iBAAAA,EACA,OAAA/2B,EAAAgT,MAAA+jB,SAsBA4O,EAAAY,SACA96B,KAAA,cACA1L,YAAA,mBACAF,WAAA,SAAAG,EAAAoD,EAAAjC,EAAAqnB,GACAxoB,EAAAynC,aAAAC,UAAA1nC,EAAA0nC,WACA1nC,EAAAuoC,SAKA,SAAAx8B,EAAAy8B,EAAAC,EAAA93B,GACAvN,EAAAuD,MACA5G,YAAA,iBACAF,WAAA,8BACA4G,KAAA,KACAK,SACAiF,MAAA,WACA,OAAAA,GAEAo8B,OAAA,WACA,OAAAnoC,EAAAqI,QAAAjI,KAAAsoC,eAAA38B,EAAAy8B,EAAAC,EAAAhpC,QAAAsW,WAAAyS,IAEAigB,UAAA,WACA,OAAAA,GAEAD,YAAA,WACA,OAAAA,GAEApoC,KAAA,WACA,OAAAJ,EAAAqI,QAAAjI,SAMA6C,OAAA9C,KAAA,SAAAwoC,GACA3oC,EAAAgnC,KAAAQ,WAAA,GACA/nC,QAAAgL,UAAAkG,IACAA,GAAA,EAAAg4B,IAEA,WACAlpC,QAAAgL,UAAAkG,IACAA,GAAA,MApCA3Q,EAAA4oC,QAyCA,SAAA78B,EAAAy8B,GACAxoC,EAAAuoC,SAAAx8B,EAAAy8B,GAAA,IAzCAxoC,EAAAyoC,WAAA,EACAzoC,EAAA6oC,QAAA7oC,EAAAqI,QAAAjI,KAAAyoC,QAAA7oC,EAAA+L,OA2CA/L,EAAA8oC,SAAA,SAAAC,EAAAC,GACA,GAAAhpC,EAAAqI,QAAAjI,KAAA6oC,mBAAAF,EAAAC,GAAA,CACA,IAAAj9B,EAAAtM,QAAAqoC,KAAA9nC,EAAAqI,QAAAjI,KAAA2nC,cACAtoC,QAAAgL,UAAAu+B,IACAvmC,EAAA2G,OAAA2C,EAAAi9B,GAGAhpC,EAAAyoC,WAAA,EAEAzoC,EAAAuoC,SAAAx8B,EAAAg9B,GAAA,EAAA,SAAAG,EAAAP,GACAO,GAEAH,EAAApmC,KAAAlD,QAAAgL,UAAAk+B,GAAAA,EAAA58B,UAIA5K,EAAAW,MAAA,sDAMA6jC,EAAAY,SACA96B,KAAA,iBACA1L,YAAA,sBACAF,WAAA,SAAAG,EAAAoD,EAAAjC,EAAAqiC,GACAxjC,EAAAmpC,QAAA,SAAAjF,GACAV,EAAAE,WAAAQ,UAAAA,IAAA/jC,KAAA,SAAAipC,GAEA,IAAA,IAAApyB,EAAA,EAAAA,EAAAhX,EAAA+L,MAAAjJ,OAAAkU,IACA,IAAA,IAAAsX,EAAA,EAAAA,EAAA8a,EAAAtmC,OAAAwrB,IACAtuB,EAAA+L,MAAAiL,GAAAvL,OAAA29B,EAAA9a,GAAAyV,cAAAt4B,OACAm6B,EAAA5lC,EAAA+L,MAAAiL,GAAAoyB,EAAA9a,GAAAyV,eACA/jC,EAAAgnC,KAAAQ,WAAA,aAcA/nC,QAAAC,OAAA,eAAAG,WAAA,+BAAA,SAAA,KAAA,oBAAA,QAAA,QAAA,SAAA,YAAA,cAAA,OAAA,QAAA,SAAAG,EAAAuoB,EAAA/gB,EAAAvH,EAAA8L,EAAAo8B,EAAAM,EAAAD,EAAApoC,EAAAe,GAEAnB,EAAA+L,MAAAA,EACA/L,EAAAmoC,OAAAA,EACAnoC,EAAAyoC,UAAAA,EACAzoC,EAAAqpC,YAAAjpC,EAAAkpC,oBAAAv9B,GACA/L,EAAAupC,eAAA,EACAvpC,EAAAwpC,qBAAA,EAEAxpC,EAAAypC,SAAA,WACA,GAAAzpC,EAAAgnC,KAAA0C,OACAtpC,EAAAupC,iBAAA3pC,EAAA+L,GAAA5L,KAAA,SAAAC,GACAX,QAAAgL,UAAArK,KACAJ,EAAA+L,MAAA3L,GAEAoH,EAAAE,MAAAtH,UAGAe,EAAAW,MAAA,+CACArC,QAAA8L,QAAAvL,EAAAgnC,KAAA4C,OAAA,SAAA9nC,GACArC,QAAA8L,QAAAzJ,EAAA,SAAAumC,GACAA,EAAAwB,mBAMA7pC,EAAA4H,OAAA,WACAJ,EAAAK,WAGA7H,EAAA8pC,YAAA,WACAtB,EAAA3lC,OAAA2lC,EAAA7+B,QAAAoC,GAAA,GACAvE,EAAAE,MAAA1H,IAGAA,EAAA0L,MAAA,WACAjM,QAAAgL,UAAArK,EAAA2pC,gBACA3pC,EAAA2pC,cAAA/pC,IAIAA,EAAAqE,IAAA,gBAAA,SAAA81B,EAAAtR,GACA,mBAAAA,GACA7oB,EAAA0L,MAAA1L,QAKAP,QACAC,OAAA,eACAqhC,QAAA,mBAAAyC,kBAqDA/jC,QACAC,OAAA,eACAG,WAAA,6BAAA+jC,4BC3jBA,IAAAoG,QAAAvqC,QAAAC,OAAA,cCKA,SAAAmnC,qBAAA5mC,EAAAsoB,EAAAnlB,GAKA,IAIA6nB,EAEA,OALAtkB,KAQA,SAAAsjC,EAAAz0B,GAsBA,OArBApS,EAAAuD,MACA5G,YAAA,kCACAF,WAAA,+BACA4G,KAAA,KACAK,SACA1G,KAAA,WACA,OAAAH,EAAA4d,KAAA,oCAAAosB,SAAAxqC,QAAAgL,UAAAw/B,GAAAA,EAAA,KAAAC,MAAA,EAAA10B,KAAAA,KAEAA,KAAA,WACA,OAAAA,MAKAvS,OAAA9C,KAAA,SAAA2mC,GACA7b,EAAAnkB,QAAAggC,IACA,WACA7b,EAAA6X,OAAA,gBAGA7X,EAAA1C,EAAA9M,SACAC,UCpCA,SAAA9K,oBAAA3Q,EAAAkB,GAMA,OAHAiQ,aAKA,SAAAjK,EAAA6J,EAAAC,EAAA7Q,GACA,OAAAH,GAAAgR,OAAAA,EAAAC,IAAA/J,EAAA/G,KAAAA,EAAA6c,aAAA,gBAAA5P,QAAA,SAAAjN,EAAAoR,EAAAC,EAAAC,GACA,IAAAwL,EAAApO,SAAAqO,cAAA,KACAC,EAAA,IAAAC,MAAAjd,IAAAoV,KAAA,6BACA0H,EAAAhW,KAAAoW,IAAAC,gBAAAH,GACAF,EAAArM,SAAAG,EAEAlC,SAAA0O,KAAAC,YAAAP,GACAA,EAAAQ,QACA5O,SAAA0O,KAAAG,YAAAT,KACApb,MAAA,SAAA1B,EAAAoR,EAAAC,EAAAC,GACAvQ,EAAAW,MAAA0P,OCnBA,SAAA6nB,4BAAAp5B,EAAAsoB,EAAAnlB,GAEA,IAUA6nB,EAVAgI,KAYA,OARA/yB,IAAAiqC,EACAC,WA8DA,WACAnX,MA9DApkB,OAuDA,SAAAsX,GACAA,EAEA8E,EAAAnkB,QAAAqf,IAzDAoT,sBAkCA,SAAAvnB,GAiBA,OAhBA5O,EAAAuD,MACA5G,YAAA,gDACAF,WAAA,wCACA4G,KAAA,KACAK,SACAmsB,WAAA,WACA,OAAAkX,EAAAn4B,OAKA/O,OAAA9C,KAAA,aAAA,WACA8qB,EAAA6X,OAAA,gBAGA7X,EAAA1C,EAAA9M,SACAC,UA3CA,SAAAyuB,EAAAn4B,GAkBA,OAjBA,WACA,GAAAA,EAAAvG,QAAAwnB,EAAA,CACA,IAAAhI,EAAA1C,EAAA9M,QAEA,OADAwP,EAAAnkB,QAAAmsB,EAAAjhB,EAAAvG,OACAwf,EAAAvP,QAGA,OAAAzb,EAAAC,IAAA47B,UAAA,0BAAA9pB,EAAAvG,KAAA,gBACAtL,KAAA,SAAAkqC,GAEA,OADApX,EAAAjhB,EAAAvG,MAAA4+B,EAAAjqC,KACAiqC,EAAAjqC,MAEA,SAAA0B,GACA,MAAAA,IAIA0lB,GAAArnB,KAAA,SAAA8yB,GACA,OAAAA,GACA,SAAAnxB,GACA,MAAAA,KCrCA,SAAA+9B,0BAAA7/B,EAAA+d,EAAA+hB,EAAA1+B,EAAA2G,EAAA0F,GACAzN,EAAA8N,MAAA,IACA9N,EAAA8yB,YACAC,QAAA,GAEA,IAAA1d,GACApC,OAAA,OACAiC,SAAA,GAEAnN,EAAA,WACA/H,EAAA+S,WAAA,gBAAAsC,EAAApC,OAAAoC,EAAAH,WACA,IACAlV,EAAAkT,eAGAlT,EAAAovB,wBACA3sB,EAAA8I,QAAAnK,EAAAG,UAAAqlB,SAAA,SAAAvb,GACArL,EAAAovB,qBAAAzsB,MAAAgoB,MAAAtf,EAAAI,KAAA7B,GAAAyB,EAAAI,SAEAzL,EAAAkzB,yBAAAte,WAAA,KAAAC,UAAA,MACA7U,EAAAsqC,uBACA3f,MAAA,OAAA/gB,GAAA,SACA+gB,MAAA,YAAA/gB,GAAA,cACA+gB,MAAA,iBAAA/gB,GAAA,mBACA+gB,MAAA,4BAAA/gB,GAAA,4BACA+gB,MAAA,qBAAA/gB,GAAA,uBACA+gB,MAAA,YAAA/gB,GAAA,cACA+gB,MAAA,gBAAA/gB,GAAA,kBACA+gB,MAAA,gBAAA/gB,GAAA,kBACA+gB,MAAA,mBAAA/gB,GAAA,qBACA+gB,MAAA,8BAAA/gB,GAAA,gCACA+gB,MAAA,2BAAA/gB,GAAA,6BACA+gB,MAAA,yBAAA/gB,GAAA,2BAEA5J,EAAAmzB,4BAAAxI,MAAA,MAAApmB,MAAA,QAAAomB,MAAA,MAAApmB,MAAA,QAAAomB,MAAA,WAAApmB,MAAA,aAIAvE,EAAAse,aAAAwhB,EAAA1/B,KAAAmG,QACAvG,EAAAue,eAAAuhB,EAAA1/B,KAAAoe,cAEAxe,EAAAuzB,aACAC,KAAA,GACAnoB,QAAA,GACA6M,MAAA,GACAjV,OAAA,EACA0mB,OAAA,EACA4gB,IAAA,EACAv0B,SAAA,GACAsd,GAAA,IAEA,IAAAF,GAAA,EACAC,GAAA,EACA,IAAA,IAAAxiB,KAAA7Q,EAAAse,aAOA,GANAzN,EAAAmF,WACAod,GAAA,GAEAviB,EAAAyiB,KACAD,GAAA,GAEAA,GAAAD,EACA,MAIA,SAAAhyB,EAAAG,UAAAwd,QAAAC,sBAAAoU,IAAAC,GACArzB,EAAAuzB,YAAAvd,SAAA,EACAhW,EAAAuzB,YAAAD,GAAA,EACAtzB,EAAAuzB,YAAArb,OAAA,IACA,OAAA9W,EAAAG,UAAAwd,QAAAC,qBACAhf,EAAAuzB,YAAAvd,SAAA,EACAhW,EAAAuzB,YAAArb,OAAA,IACA,aAAA9W,EAAAG,UAAAwd,QAAAC,sBACAhf,EAAAuzB,YAAAD,GAAA,EACAtzB,EAAAuzB,YAAArb,OAAA,IAIAlY,EAAAgN,OAAA,WACA+Q,EAAAI,mBAAAne,EAAA8yB,WAAAC,QAAA/yB,EAAA8N,MAAA9N,EAAAkT,YAAAmC,GAAAlV,KAAA,SAAA2/B,GACA9/B,EAAAse,aAAAwhB,EAAA1/B,KAAAmG,QACAvG,EAAAue,eAAAuhB,EAAA1/B,KAAAoe,iBAKAxe,EAAAqE,IAAA,OAAA,SAAAM,EAAAsO,EAAAiC,GACA,IAAAA,IACAjC,EAAA,OACAiC,EAAA,GAEAG,GACApC,OAAAA,EACAiC,SAAAA,GAEAlV,EAAA+S,WAAA,gBAAAsC,EAAApC,OAAAoC,EAAAH,UACAlV,EAAAgN,WAGAhN,EAAAwqC,cAAA,SAAAvnC,GACA,IAAAwnC,EA4BA,MA3BA,SAAAxnC,GAAA,cAAAA,IACAwnC,EAAA,2DAEA,mBAAAxnC,IACAwnC,EAAA,oDAEA,mBAAAxnC,IACAwnC,EAAA,oDAEA,4BAAAxnC,IACAwnC,EAAA,gDAEA,uBAAAxnC,IACAwnC,EAAA,oDAEA,cAAAxnC,IACAwnC,EAAA,iIAEA,kBAAAxnC,GAAA,kBAAAA,GAAA,qBAAAA,IACAwnC,EAAA,0HAEA,gCAAAxnC,IACAwnC,EAAA,2JAEA,2BAAAxnC,GAAA,6BAAAA,IACAwnC,EAAA,+JAEAh9B,EAAAW,YAAA,mDAAAnL,EAAA,KAAAwnC,EAAA,YAKAzqC,EAAAqE,IAAA,SAAA,SAAAM,EAAAsO,EAAAC,EAAAL,GACAK,EAAAK,YACAvT,EAAAkT,YAAAD,GAAAC,SAEAlT,EAAAkT,YAAAD,GAEAjT,EAAAgN,WASA,SAAA09B,oBACA,OAAA,SAAAh7B,GACA,OAAAC,OAAAqc,KAAAtc,GAAAE,QAAAC,OAAA,qBCvIA,SAAAxO,aAAAoH,GAEA,IAAAkiC,KAEA,OACA3oC,IAIA,SAAAyJ,GACAA,KAAAk/B,EAGAA,EAAAl/B,GAAA,MAAA,IAAAwrB,MAAAC,UAFAyT,EAAAl/B,IAAAm/B,OAAA,IAAA3T,MAAAC,UAAA2T,MAAA,IAAA5T,MAAAC,YALApG,MAWA,WACA,SClCA,SAAA1vB,cAAAnB,EAAAsoB,EAAAuiB,EAAApO,GAEA,IAAAqO,EAAAD,EAAA,YACA3V,EAAAuH,EAAAvH,WAEA,OACA9lB,IAQA,SAAA27B,EAAAC,GACA,IAAAhgB,EAAA1C,EAAA9M,QAcA,OAbAxb,EAAAO,IAAA,qBAAAwqC,GACA7qC,KAAA,SAAAyB,GACAA,EAAAxB,KAAAqH,KAAAwjC,GAAA,IAAArpC,EAAAxB,KAAAg7B,gBAAAt4B,UACAioC,EAAAvqC,IAAA,SAAAwqC,GACAE,KAEAjgB,EAAAnkB,QAAAlF,IAEA,SAAAupC,GACAxiC,QAAA3G,IAAA,0BACA2G,QAAA3G,IAAAmpC,GACAlgB,EAAA6X,OAAAqI,KAEAlgB,EAAAvP,SAtBAxb,IA+BA,WACA,IAAAwR,EAAAq5B,EAAA7qC,IAAA,UACAT,QAAA+C,YAAAkP,KACAA,EAAAzR,EAAAC,IAAA,sBAAAC,KAAA,SAAAC,GACA,OAAAA,EAAAA,OAEA2qC,EAAAvqC,IAAA,SAAAkR,IAGA,OAAAA,GAvCAnQ,QA0CA,WACA,OAAA4zB,GA1CA+V,eAAAA,EACAE,gBAkDA,WAiBA,OAhBA,WACA,IAAAA,EAAAL,EAAA7qC,IAAA,mBACA,IAAAT,QAAA+C,YAAA4oC,GAAA,CACA,IAAAngB,EAAA1C,EAAA9M,QAEA,OADAwP,EAAAnkB,QAAAskC,GACAngB,EAAAvP,QAGA,OAAAzb,EAAAC,IAAA,+BACAC,KAAA,SAAAkrC,GACA,IAAA35B,EAAA25B,EAAAjrC,KAEA,OADA2qC,EAAAvqC,IAAA,kBAAAkR,GACA25B,EAAAjrC,OAIAonB,GAAArnB,KAAA,SAAAirC,GACA,OAAAA,KAnEA3uB,aAqBA,WACA,OAAAxc,EAAAC,IAAA,6BAAAC,KAAA,SAAAC,GACA,OAAAA,EAAAA,SAoBA,SAAA8qC,IACAjrC,EAAAC,IAAA,2BAAAC,KAAA,SAAAC,GACA+0B,EAAA/0B,EAAAA,QCtDA,SAAAkrC,aAAA1J,GAEA,OACA2J,UA+BA,SAAAC,GACA,OACAC,OAEAhF,QAAA,WACAU,iBAAAxc,MAAA,WACA+gB,aAEAxpB,IAAA,OACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,OACAghB,UAAA,EACAC,YAAA,0BACAxzB,KAAA,sOAEAyzB,YACAC,WA3CAC,WAAA,SAAAtV,EAAAuV,GACA,IAAAznC,EAAAynC,GAAAvV,EACA,OAAAlyB,IACA,wpBAAAmT,KAAAnT,IACA,kCAAAmT,KAAAnT,KAIAxC,QAAA,gDAuCAmgB,IAAA,OACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,OACAghB,UAAA,EACAC,YAAA,OACAxzB,KAAA,oBAEAyzB,YACAz1B,KAAA61B,EAAA,YAAA,oBAAA,MAIA/pB,IAAA,UACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,WACAihB,YAAA,YACAxzB,KAAA,iOAIA8J,IAAA,MACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,UACAvS,KAAA,uBAIA8J,IAAA,cACAgqB,eAAA,aACA12B,KAAA,YACA2xB,iBACAxc,MAAA,oBACAghB,UAAA,EACAn2B,KAAA,OACA4C,KAAA,8GAIA8J,IAAA,sBACAgqB,eAAA,aACA12B,KAAA,kBACA2xB,iBACA3xB,KAAA,WACAmV,MAAA,wBACAghB,UAAA,EACAvzB,KAAA,uBAKAquB,QAAA,WACAU,iBACAxc,MAAA,SAGA+gB,aAEAxpB,IAAA,YACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,YACAtiB,UACAoD,KAAA,OAAAlH,MAAA,SACAkH,KAAA,QAAAlH,MAAA,UACAkH,KAAA,UAAAlH,MAAA,YAKA2d,IAAA,YACA1M,KAAA,kBACA02B,eAAA,2BACA/E,iBACA3xB,KAAA,OACAmV,MAAA,mBACAihB,YAAA,2BACAxzB,KAAA,eAIA8J,IAAA,YACA1M,KAAA,kBACA02B,eAAA,2BACA/E,iBACA3xB,KAAA,SACAmV,MAAA,aACAihB,YAAA,UAIA1pB,IAAA,gBACA1M,KAAA,kBACA02B,eAAA,2BACA/E,iBACA3xB,KAAA,OACAmV,MAAA,oBAIAzI,IAAA,gBACA1M,KAAA,iBACA02B,eAAA,2BACA/E,iBACA3xB,KAAA,OACAmV,MAAA,oBAIAzI,IAAA,mBACA1M,KAAA,mBACA02B,eAAA,2BACA/E,iBACA3xB,KAAA,SACAmV,MAAA,4BAIAzI,IAAA,qBACA1M,KAAA,kBACA02B,eAAA,2BACA/E,iBACA3xB,KAAA,OACA4C,KAAA,iEACAuS,MAAA,wBAQA8b,QAAA,WACAU,iBAAAxc,MAAA,MACA+gB,aAGAxpB,IAAA,QACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,QACAvS,KAAA,4BACA/P,UACAoD,KAAA,OAAAlH,MAAA,SACAkH,KAAA,SAAAlH,MAAA,WACAkH,KAAA,OAAAlH,MAAA,cAOAkiC,QAAA,WACAU,iBAAAxc,MAAA,YACA+gB,aAGAxpB,IAAA,SACA1M,KAAA,wBACA2xB,iBACAxc,MAAA,UACAvS,KAAA,oBACAuzB,UAAA,GAEAE,YACA31B,OAAA+1B,EAAA,iBAAA,gDAAA,MAIA/pB,IAAA,YACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,YACAvS,KAAA,8EAIA8J,IAAA,YACA1M,KAAA,mBACA2xB,iBACAxc,MAAA,0BACAvS,KAAA,gOAIA8J,IAAA,iBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,cACAvS,KAAA,iMAIA8J,IAAA,UACA1M,KAAA,mBACA2xB,iBACAxc,MAAA,sBACAvS,KAAA,kHAOAquB,QAAA,WACAvkB,IAAA,UACAilB,iBAAAxc,MAAA,WACA+gB,aAEAxpB,IAAA,eACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,gBACAtiB,UACAoD,KAAA,QAAAlH,MAAA,UACAkH,KAAA,UAAAlH,MAAA,SACAkH,KAAA,OAAAlH,MAAA,SACAkH,KAAA,QAAAlH,MAAA,aAKA2d,IAAA,gBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,kBACAvS,KAAA,2CAIA8J,IAAA,eACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,oBACAtiB,UACAoD,KAAA,QAAAlH,MAAA,UACAkH,KAAA,UAAAlH,MAAA,SACAkH,KAAA,OAAAlH,MAAA,SACAkH,KAAA,QAAAlH,MAAA,aAKA2d,IAAA,iBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,sBAIAzI,IAAA,cACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,oBAIAzI,IAAA,sBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,oBACAtiB,UACAoD,KAAA,kBAAAlH,MAAA,SACAkH,KAAA,aAAAlH,MAAA,OACAkH,KAAA,WAAAlH,MAAA,aACAkH,KAAA,OAAAlH,MAAA,SAEA6T,KAAA,uEAIA8J,IAAA,eACA1M,KAAA,wBACA2xB,iBACAxc,MAAA,cACAvS,KAAA,yDACA/P,UACAsiB,MAAA,yBAAA/gB,GAAA,aACA+gB,MAAA,mBAAA/gB,GAAA,oBACA+gB,MAAA,cAAA/gB,GAAA,gBACA+gB,MAAA,sBAAA/gB,GAAA,eACA+gB,MAAA,oBAAA/gB,GAAA,cACA+gB,MAAA,qBAAA/gB,GAAA,eACA+gB,MAAA,2BAAA/gB,GAAA,2BACA+gB,MAAA,kBAAA/gB,GAAA,oBAEAsiC,eAAA,mEACA7iC,WAAA,YAMAo9B,QAAA,WACAU,iBAAAxc,MAAA,SACA+gB,aAEAxpB,IAAA,iBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,6BAIAzI,IAAA,oBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,yBAIAzI,IAAA,qBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,0BAIAzI,IAAA,WACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,YACAvS,KAAA,mGAIA8J,IAAA,MACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,aACAwhB,YACAn8B,KAAA,MAEAoI,KAAA,0LAQAiR,YAEAod,QAAA,WACAU,iBACAxc,MAAA,kBAEA+gB,aAEAxpB,IAAA,UACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,kCACAvS,KAAA,gEACA+zB,YACAn8B,KAAA,cAKAkS,IAAA,4BACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,8BACAvS,KAAA,gFAIA8J,IAAA,kBACA1M,KAAA,mBACA2xB,iBACAxc,MAAA,mBACAtiB,UACAoD,KAAA,oBAAAlH,MAAA,aACAkH,KAAA,eAAAlH,MAAA,QACAkH,KAAA,eAAAlH,MAAA,SACAkH,KAAA,QAAAlH,MAAA,SAEA6T,KAAA,0EAIA8J,IAAA,8BACA1M,KAAA,mBACA2xB,iBACAxc,MAAA,gCACAtiB,UACAoD,KAAA,oBAAAlH,MAAA,aACAkH,KAAA,eAAAlH,MAAA,QACAkH,KAAA,eAAAlH,MAAA,SACAkH,KAAA,QAAAlH,MAAA,SAEA6T,KAAA,uGAIA8J,IAAA,WACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,WACAghB,UAAA,EACAvzB,KAAA,yDACA/P,UAAAoD,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,OAAAlH,MAAA,OAAAkH,KAAA,YAAAlH,MAAA,OAAAkH,KAAA,OAAAlH,MAAA,OACAkH,KAAA,WACAlH,MAAA,OACAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,YAAAlH,MAAA,OAAAkH,KAAA,WAAAlH,MAAA,OACAkH,KAAA,WACAlH,MAAA,OACAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,cAAAlH,MAAA,OACAkH,KAAA,UACAlH,MAAA,OACAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,aAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OACAkH,KAAA,SACAlH,MAAA,OACAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,YAAAlH,MAAA,OACAkH,KAAA,UACAlH,MAAA,OACAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,WAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,WAAAlH,MAAA,OACAkH,KAAA,UACAlH,MAAA,OACAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,WAAAlH,MAAA,OAAAkH,KAAA,OAAAlH,MAAA,OACAkH,KAAA,WACAlH,MAAA,OACAkH,KAAA,QAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,QAAAlH,MAAA,OACAkH,KAAA,WACAlH,MAAA,OACAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,YAAAlH,MAAA,OAAAkH,KAAA,WAAAlH,MAAA,OAAAkH,KAAA,MAAAlH,MAAA,OACAkH,KAAA,UACAlH,MAAA,OACAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,OAAAlH,MAAA,OACAkH,KAAA,WACAlH,MAAA,OACAkH,KAAA,WAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,QAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OACAkH,KAAA,WACAlH,MAAA,OACAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,QAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OACAkH,KAAA,QACAlH,MAAA,OACAkH,KAAA,YAAAlH,MAAA,OAAAkH,KAAA,YAAAlH,MAAA,OAAAkH,KAAA,cAAAlH,MAAA,OACAkH,KAAA,aACAlH,MAAA,OACAkH,KAAA,cAAAlH,MAAA,OAAAkH,KAAA,QAAAlH,MAAA,OAAAkH,KAAA,OAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OACAkH,KAAA,MACAlH,MAAA,OACAkH,KAAA,YAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,YAAAlH,MAAA,OAAAkH,KAAA,WAAAlH,MAAA,OACAkH,KAAA,WACAlH,MAAA,OACAkH,KAAA,cAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,WAAAlH,MAAA,OACAkH,KAAA,SACAlH,MAAA,OACAkH,KAAA,QAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,cAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OACAkH,KAAA,OACAlH,MAAA,OACAkH,KAAA,QAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,WAAAlH,MAAA,OACAkH,KAAA,QACAlH,MAAA,OACAkH,KAAA,gBAAAlH,MAAA,OAAAkH,KAAA,QAAAlH,MAAA,OAAAkH,KAAA,aAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OACAkH,KAAA,MACAlH,MAAA,OACAkH,KAAA,aAAAlH,MAAA,OAAAkH,KAAA,eAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,OAAAlH,MAAA,OACAkH,KAAA,aACAlH,MAAA,OACAkH,KAAA,WAAAlH,MAAA,OAAAkH,KAAA,QAAAlH,MAAA,OAAAkH,KAAA,YAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OACAkH,KAAA,QACAlH,MAAA,OACAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,cAAAlH,MAAA,OAAAkH,KAAA,YAAAlH,MAAA,OAAAkH,KAAA,QAAAlH,MAAA,OACAkH,KAAA,SACAlH,MAAA,OACAkH,KAAA,mBAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OACAkH,KAAA,mBACAlH,MAAA,OACAkH,KAAA,oBAAAlH,MAAA,OAAAkH,KAAA,YAAAlH,MAAA,OAAAkH,KAAA,QAAAlH,MAAA,OACAkH,KAAA,mBACAlH,MAAA,OACAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,sBAAAlH,MAAA,OAAAkH,KAAA,QAAAlH,MAAA,OACAkH,KAAA,QACAlH,MAAA,OACAkH,KAAA,WAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,OAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OACAkH,KAAA,SACAlH,MAAA,OACAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,aAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OACAkH,KAAA,UACAlH,MAAA,OACAkH,KAAA,WAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,WAAAlH,MAAA,OAAAkH,KAAA,YAAAlH,MAAA,OACAkH,KAAA,SACAlH,MAAA,OACAkH,KAAA,gBAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,QAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OACAkH,KAAA,SACAlH,MAAA,OACAkH,KAAA,QAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OACAkH,KAAA,SACAlH,MAAA,OACAkH,KAAA,iBAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,YAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OACAkH,KAAA,QACAlH,MAAA,OACAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,QAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,QAAAlH,MAAA,OACAkH,KAAA,OACAlH,MAAA,OACAkH,KAAA,WAAAlH,MAAA,OAAAkH,KAAA,mBAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OACAkH,KAAA,SACAlH,MAAA,OACAkH,KAAA,QAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,QAAAlH,MAAA,OACAkH,KAAA,MACAlH,MAAA,OACAkH,KAAA,WAAAlH,MAAA,OAAAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,YAAAlH,MAAA,OAAAkH,KAAA,OAAAlH,MAAA,OACAkH,KAAA,QACAlH,MAAA,OACAkH,KAAA,QAAAlH,MAAA,OAAAkH,KAAA,aAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OACAkH,KAAA,QACAlH,MAAA,OACAkH,KAAA,QAAAlH,MAAA,OAAAkH,KAAA,kBAAAlH,MAAA,OAAAkH,KAAA,QAAAlH,MAAA,OAAAkH,KAAA,UAAAlH,MAAA,OACAkH,KAAA,SACAlH,MAAA,OACAkH,KAAA,SAAAlH,MAAA,OAAAkH,KAAA,OAAAlH,MAAA,UAIA2d,IAAA,YACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,aACAvS,KAAA,+BACAuzB,UAAA,KAIAzpB,IAAA,aACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,kBACAvS,KAAA,6GAMAquB,QAAA,WACAU,iBACAxc,MAAA,kBAEA+gB,aAEAxpB,IAAA,oBACA1M,KAAA,mBACA2xB,iBACAxc,MAAA,qBACAtiB,UACAoD,KAAA,eAAAlH,MAAA,SACAkH,KAAA,oBAAAlH,MAAA,aACAkH,KAAA,eAAAlH,MAAA,QACAkH,KAAA,QAAAlH,MAAA,SAEA6T,KAAA,iEAIA8J,IAAA,iBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,kBACAvS,KAAA,sIAEA8zB,eAAA,WACA,MAAA,SAAAV,EAAAniB,UAAA+iB,qBAIAlqB,IAAA,iBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,kBACAvS,KAAA,oDAEA8zB,eAAA,WACA,MAAA,SAAAV,EAAAniB,UAAA+iB,qBAIAlqB,IAAA,gBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,iBACAvS,KAAA,wIAEA8zB,eAAA,WACA,MAAA,SAAAV,EAAAniB,UAAA+iB,qBAIAlqB,IAAA,gBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,iBACAvS,KAAA,gDAEA8zB,eAAA,WACA,MAAA,SAAAV,EAAAniB,UAAA+iB,qBAKAlqB,IAAA,kBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,mBACAvS,KAAA,qGAEA8zB,eAAA,WACA,MAAA,SAAAV,EAAAniB,UAAA+iB,qBAIAlqB,IAAA,mBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,oBACAvS,KAAA,wGAIA8J,IAAA,SACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,sBACAvS,KAAA,mGACA+zB,YACAn8B,KAAA,WAKAkS,IAAA,mBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,6BACAvS,KAAA,iDAMAquB,QAAA,WACAU,iBACAxc,MAAA,qBAEA+gB,aAEAxpB,IAAA,gBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,wCACAvS,KAAA,uGAIA8J,IAAA,kCACA1M,KAAA,yBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,2BACAghB,UAAA,EACAQ,YACAn8B,KAAA,QAMAkS,IAAA,wBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,0BACAghB,UAAA,EACAQ,YACAn8B,KAAA,YAKAkS,IAAA,iBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,qBACAvS,KAAA,+IAIA8J,IAAA,wBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,0BACAvS,KAAA,qEAIA8J,IAAA,gBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,kBACAtiB,UACAoD,KAAA,0BAAAlH,MAAA,UACAkH,KAAA,0BAAAlH,MAAA,aAEA6T,KAAA,0HAIA8J,IAAA,0BACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,0BACAvS,KAAA,8FAIAquB,QAAA,WACAU,iBACAxc,MAAA,SAEA+gB,aAEAxpB,IAAA,2BACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,wBACAwhB,YACAn8B,KAAA,QAEA27B,UAAA,EACAvzB,KAAA,qHAIA8J,IAAA,yBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,oBACAvS,KAAA,4DASA4a,mBAEA9Q,IAAA,sBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,iBACAvS,KAAA,iEAIA5C,KAAA,OACA2xB,iBACA3xB,KAAA,OACAvH,OACA,uIACA,uHAEAo+B,UAAA,UAIA72B,KAAA,gBACA0M,IAAA,aACAnW,MAAAy/B,EAAAxY,iBACAmU,iBACAmF,QAAA,mBACAnE,SAEAjmB,IAAA,OACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,OACAvS,KAAA,oFACAuzB,UAAA,KAIAzpB,IAAA,aACA1M,KAAA,mBACA2xB,iBACAxc,MAAA,cACAtiB,UACAoD,KAAA,UAAAlH,MAAA,WACAkH,KAAA,QAAAlH,MAAA,UACAkH,KAAA,QAAAlH,MAAA,SACAkH,KAAA,QAAAlH,MAAA,UACAkH,KAAA,KAAAlH,MAAA,aAEA6T,KAAA,4FAIA8J,IAAA,UACA1M,KAAA,mBACA2xB,iBACAxc,MAAA,WACAtiB,UACAoD,KAAA,QAAAlH,MAAA,UACAkH,KAAA,YAAAlH,MAAA,cACAkH,KAAA,QAAAlH,MAAA,UACAkH,KAAA,QAAAlH,MAAA,UACAkH,KAAA,OAAAlH,MAAA,SAEA6T,KAAA,gGAIA8J,IAAA,wBACA1M,KAAA,mBACA2xB,iBACAxc,MAAA,qBACAtiB,UACAoD,KAAA,eAAAlH,MAAA,SACAkH,KAAA,oBAAAlH,MAAA,aACAkH,KAAA,eAAAlH,MAAA,QACAkH,KAAA,QAAAlH,MAAA,SAEA6T,KAAA,gEAIA8J,IAAA,gBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,iBACAvS,KAAA,2GAIA8J,IAAA,gBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,iBACAvS,KAAA,kDAIA8J,IAAA,iBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,kBACAvS,KAAA,yGAIA8J,IAAA,iBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,kBACAvS,KAAA,sDAIAquB,QAAA,iBACAU,iBACAxc,MAAA,cACAvS,KAAA,4CAEAszB,aAEAxpB,IAAA,gBACA1M,KAAA,aACA2xB,iBACAgF,YACAn8B,KAAA,SAMAwF,KAAA,aAGA0M,IAAA,gBACA1M,KAAA,aAAA2xB,iBAAAgF,YAAAn8B,KAAA,WAKAkS,IAAA,uBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,yBACAvS,KAAA,uEAIA8J,IAAA,oBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,qBACAvS,KAAA,8HAIA8J,IAAA,oBACA1M,KAAA,mBACA2xB,iBACAxc,MAAA,iBACAtiB,UACAoD,KAAA,mBAAAlH,MAAA,SACAkH,KAAA,wBAAAlH,MAAA,aACAkH,KAAA,mBAAAlH,MAAA,QACAkH,KAAA,QAAAlH,MAAA,SAEA6T,KAAA,uCAKA2vB,cACAt8B,KAAA,KACA8gC,sBAAA,OACAC,eAAA,KACAC,eAAA,KACA7X,kBAAA,OACAD,eAAA,EACAkC,cAAA,KACAD,cAAA,KACA8V,qBACA/gC,WAAA,EACAghC,cAAA,KACAC,cAAA,KACA1W,WAAA,SACA2W,QAAA,WAMArrC,cAEAilC,QAAA,WACAU,iBAAAxc,MAAA,WACA+gB,aAEAxpB,IAAA,iBACA1M,KAAA,YACA2xB,iBACAxc,MAAA,qBACAvS,KAAA,gHACA5C,KAAA,cAOAixB,QAAA,WACAvkB,IAAA,cACAilB,iBAAAxc,MAAA,eACA+gB,aAEAl2B,KAAA,cACApV,MACA2nC,cACArmB,SAAA,GAEAorB,iBAAA,uBACAjE,QAAA,WACA,OAAAkE,wBAEA9D,mBAAA,WACA,OAAA,GAEA+D,aAAA,EACAC,WAAA,qBACAvE,eAAAwE,uBACA5D,oBAAA,WACA,OAAA,GAEAK,iBAAA,SAAA5oC,EAAAgL,GACA,IAAAohC,EAAAvL,EAAA1hC,IAAA,qCACA,OAAAitC,EAAAC,MAAArsC,EAAAgL,IAEAg+B,cAAA,SAAAhpC,GACAA,EAAAsH,QAAAglC,aACAtsC,EAAAsH,QAAAglC,mBASAzmB,WAEApR,KAAA,cACApV,MACA2nC,cACA9B,gBAAA,EACA/vB,OAAA,KACAo3B,QAAA,UACAtH,gBAAA,EACAD,gBAAA,KACAwH,cAAA,KACA7rB,SAAA,EACA8rB,qBACAC,uBAAA,OACAC,eAAA,KACAC,SAAA,KACAC,kBAAA,EACAz3B,KAAA,KACA03B,kBAAA,KACApiC,KAAA,KACAwK,SAAA,KACAtK,WAAA,EACAmiC,MAAA,EACAxiC,iBAAA,UACAmqB,cAAA,EACAoQ,wBAAA/xB,EACAgyB,0BAAAhyB,EACAi6B,QAAA,KACA/3B,SAAA,KACAg4B,UAAA,MAEAf,WAAA,kBACAH,iBAAA,oBACAjE,QAAA,SAAA98B,GACA,OAAAkiC,kBAAAliC,IAGAk9B,mBAAA,SAAAiF,EAAAlF,GACA,OAAAA,GAAA,UAAAA,EAAA19B,kBAAA,cAAA09B,EAAA19B,kBAAA,aAAA09B,EAAA19B,kBAAA,YAAA09B,EAAA19B,mBAGA7I,EAAA2I,IAAA8iC,EAAA,SAAAC,GACA,OAAAA,EAAA1iC,OAAAu9B,EAAAv9B,QAGAi9B,eAAA0F,oBACA9E,oBAAA,SAAAv9B,GACA,OAAA,GAEA49B,iBAAA,SAAA5oC,EAAAgL,GACA,IAAAsiC,EAAAzM,EAAA1hC,IAAA,kCACA,OAAAmuC,EAAAjB,MAAArsC,EAAAgL,IAEAg+B,cAAA,SAAAhpC,GAEAA,EAAAsH,QAAAglC,aACAtsC,EAAAsH,QAAAglC,iBAIA73B,KAAA,mBAGA84B,OAEApsB,IAAA,WACA1M,KAAA,mBACA2xB,iBACAxc,MAAA,YACAtiB,UACAoD,KAAA,OAAAlH,MAAA,SACAkH,KAAA,kBAAAlH,MAAA,UACAkH,KAAA,aAAAlH,MAAA,YAKA2d,IAAA,iBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,qBACAvS,KAAA,gCAEA8zB,eAAA,WACA,MAAA,SAAAV,EAAA8C,KAAAhQ,YAIApc,IAAA,gBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,iBACAvS,KAAA,4BAEA8zB,eAAA,WACA,MAAA,SAAAV,EAAA8C,KAAAhQ,YAIApc,IAAA,gBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,iBACAvS,KAAA,sCAEA8zB,eAAA,WACA,MAAA,SAAAV,EAAA8C,KAAAhQ,YAIApc,IAAA,oBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,4BACAvS,KAAA,qDAEA8zB,eAAA,WACA,MAAA,SAAAV,EAAA8C,KAAAhQ,YAIApc,IAAA,2BACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,iCACAvS,KAAA,4EAEA8zB,eAAA,WACA,MAAA,SAAAV,EAAA8C,KAAAhQ,YAIApc,IAAA,gBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,iBACAvS,KAAA,0CAEA8zB,eAAA,WACA,MAAA,SAAAV,EAAA8C,KAAAhQ,YAIApc,IAAA,yBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,gBACAvS,KAAA,gCACA+zB,YACAn8B,KAAA,WAKAwF,KAAA,gBACA0M,IAAA,QACAnW,MAAAy/B,EAAA8C,KACApC,eAAA,WACA,MAAA,SAAAV,EAAA8C,KAAAhQ,UAEA6I,iBAEAmF,QAAA,eACAiC,cAAA,WACApG,SAEAjmB,IAAA,WACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,WACAghB,UAAA,KAKAzpB,IAAA,WACA1M,KAAA,iBACA2xB,iBACA3xB,KAAA,WACAmV,MAAA,WACAghB,UAAA,KAIAzpB,IAAA,cACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,wBAIAzI,IAAA,cACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,iBAEAuhB,eAAA,sBAGAhqB,IAAA,kBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,kCAEAuhB,eAAA,sBAGAhqB,IAAA,uBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,iCAEAuhB,eAAA,sBAGAnE,cACA/xB,SAAA,KACAC,SAAA,KACAknB,aAAA,EACA5hB,aAAA,EACAzV,iBAAA,EACAgwB,sBAAA,SA7xCA,SAAAmW,EAAAuC,EAAAzsC,EAAA0sC,GACA,OACA1C,WAAA,SAAAtV,EAAAuV,GACA,IAAAznC,EAAAynC,GAAAvV,EACA,OAAAlyB,GACAiqC,EAAA92B,KAAAnT,IAIAxC,SAAA0sC,EAAA,kBAAA,MAAA1sC,EAAA,MA8xCA,SAAAksC,kBAAAS,GA8MA,SA1MAjjC,KAAA,OACA0K,KAAA,oBAGA1K,KAAA,eACA0K,KAAA,4BAGA1K,KAAA,SACA0K,KAAA,6BAEA1K,KAAA,UACA0K,KAAA,yBAGA1K,KAAA,SACA0K,KAAA,0BAGA1K,KAAA,eACA0K,KAAA,gCAGA1K,KAAA,UACA0K,KAAA,wBAGA1K,KAAA,UACA0K,KAAA,wBAGA1K,KAAA,UACA0K,KAAA,4BAGA1K,KAAA,mBACA0K,KAAA,iCAGA1K,KAAA,WACA0K,KAAA,2BAGA1K,KAAA,aACA0K,KAAA,yBAGA1K,KAAA,SACA0K,KAAA,oBAGA1K,KAAA,SACA0K,KAAA,mBAGA1K,KAAA,SACA0K,KAAA,mBAGA1K,KAAA,SACA0K,KAAA,uBAGA1K,KAAA,OACA0K,KAAA,yBAGA1K,KAAA,UACA0K,KAAA,6BAGA1K,KAAA,SACA0K,KAAA,2BAGA1K,KAAA,UACA0K,KAAA,4BAGA1K,KAAA,YACA0K,KAAA,0BAGA1K,KAAA,WACA0K,KAAA,qBAGA1K,KAAA,UACA0K,KAAA,wBAGA1K,KAAA,QACA0K,KAAA,0BAGA1K,KAAA,QACA0K,KAAA,0BAGA1K,KAAA,aACA0K,KAAA,8BAGA1K,KAAA,WACA0K,KAAA,6BAGA1K,KAAA,aACA0K,KAAA,2BAGA1K,KAAA,cACA0K,KAAA,+BAGA1K,KAAA,iBACA0K,KAAA,qCAKA8vB,gBAAA,EACAD,gBAAA,EACAv6B,KAAA,oBACA0K,KAAA,uEACA0vB,wBAAA/xB,EACAgyB,0BAAAhyB,EACAxI,iBAAA,UACAmiC,uBAAA,WAKAxH,gBAAA,EACAwH,uBAAA,OACAxa,YAAA,SACA+S,gBAAA,EACAuH,cAAA,KACA7rB,SAAA,EACAisB,SAAA,KACAC,kBAAA,KACAz3B,KAAA,oBACA03B,kBAAA,KACApiC,KAAA,QACAwK,SAAA,KACAtK,WAAA,EACAmiC,MAAA,EACAjI,sBACAC,wBACArQ,cAAA,EACAsY,QAAA,KACAziC,iBAAA,QACA0K,SAAA,OAGAiwB,gBAAA,EACAwH,uBAAA,WACAxa,cACA+S,gBAAA,EACAuH,cAAA,KACA7rB,SAAA,EACAisB,SAAA,KACAC,kBAAA,KACAz3B,KAAA,yBACA03B,kBAAA,KACApiC,KAAA,YACAwK,SAAA,KACAtK,WAAA,EACAmiC,MAAA,EACAjI,sBACAC,wBACArQ,cAAA,EACAsY,QAAA,KACAziC,iBAAA,YACA0K,SAAA,OAGAiwB,gBAAA,EACAwH,uBAAA,WACAxa,cACA+S,gBAAA,EACAuH,cAAA,KACA7rB,SAAA,EACAgsB,eAAA,EACAC,SAAA,KACAC,kBAAA,KACAz3B,KAAA,uBACA03B,kBAAA,KACApiC,KAAA,WACAwK,SAAA,KACAtK,WAAA,EACAmiC,MAAA,EACAjI,sBACAC,wBACArQ,cAAA,EACAsY,QAAA,KACAziC,iBAAA,WACA0K,SAAA,QAQA,SAAAo4B,oBAAAriC,EAAAy8B,EAAAC,EAAA1yB,EAAAyS,GACA,IAAAmmB,KACA,GAAA,YAAA5iC,EAAAT,iBACAqjC,EAAAhsC,MACA6S,KAAA,OACA2xB,iBACA3xB,KAAA,OACAvH,OAAA,4GAGA,IAAA,YAAAlC,EAAAT,kBAAA,YAAAS,EAAAT,oBAAAm9B,EAAA,CACA,IAAA1mC,EACAL,EACAqK,EAAAi6B,gBAIAjkC,EAAA,+HACAL,EAAA,wBAJAK,EAAA,4IACAL,EAAA,sBAKAitC,EAAAhsC,MACA6S,KAAA,OACA02B,eAAA,+CACA/E,iBACA3xB,KAAA,OACAvH,OAAAlM,GACA6sC,MAAAltC,KAkDA,GA7CAitC,EAAAhsC,MACAuf,IAAA,UACA1M,KAAA,mBACA02B,eAAA,wBACA/E,iBACA3xB,KAAA,SACAmV,MAAA,aAIA,YAAA5e,EAAAT,kBAAA,YAAAS,EAAAT,kBACAqjC,EAAAhsC,MAEAuf,IAAA,OACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,OACAghB,UAAA,EACAvzB,KAAA,+EAEAyzB,YACAgD,YACA9C,WAAA,SAAA+C,GACA,OAAArG,GAAAqG,IAAA/iC,EAAAN,OACA,IAAAhJ,EAAAqH,MAAA0+B,EAAA,QAAA7+B,QAAAmlC,IAIA/sC,QAAA,qDAEAgtC,SAEAhD,WAAA,SAAAtV,EAAAuV,GACA,IAAAznC,EAAAynC,GAAAvV,EACA,OAAAlyB,IACA,IAAAA,EAAAoF,QAAA,MAIA5H,QAAA,qCAKA,YAAAgK,EAAAT,kBAAA,YAAAS,EAAAT,iBAAA,CACA,IAAA0jC,GACA9sB,IAAA,OACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,OACAghB,UAAA,EACAC,YAAA,8BAEAqD,SACAC,SAAA,SAAA7G,EAAArjC,EAAA6E,EAAA9I,GACAiE,IAAA6E,IACA9I,EAAAouC,QAAA3F,qBAAA,MAKA,YAAAz9B,EAAAT,mBACA0jC,EAAA7H,gBAAA/uB,KAAA,4DAEAu2B,EAAAhsC,KACAqsC,GAuMA,GAnMA,YAAAjjC,EAAAT,kBAAA,YAAAS,EAAAT,kBACAqjC,EAAAhsC,MAEAuf,IAAA,SACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,WAEAskB,SACAC,SAAA,SAAA7G,EAAArjC,EAAA6E,EAAA9I,GACAiE,IAAA6E,IACA9I,EAAAouC,QAAA3F,qBAAA,OAQAmF,EAAAhsC,MAEAuf,IAAA,QACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,WACAghB,UAAA,EACAvzB,KAAA,kHAIAu2B,EAAAhsC,MAEAuf,IAAA,UACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,UACAvS,KAAA,mDAIA8J,IAAA,WACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,WACAvS,KAAA,2NAKA,YAAArM,EAAAT,kBAAA,YAAAS,EAAAT,mBACAqjC,EAAAhsC,MAEAuf,IAAA,WACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,gBACAvS,KAAA,2DAIA8J,IAAA,gBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,iBACAvS,KAAA,yFAIAu2B,EAAAhsC,MAEAuf,IAAA,oBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,gBACAvS,KAAA,iFAEAyzB,YACAuD,iBACArD,WAAA,SAAAtV,EAAAuV,GACA,IAAAznC,EAAAynC,GAAAvV,EACA,OAAAh3B,QAAA+C,YAAA+B,IAAA,OAAAA,GAAA,KAAAA,GAAAA,EAAA,GAEAxC,QAAA,qCAMAmgB,IAAA,oBACA1M,KAAA,kBACA02B,eAAA,0CACA/E,iBACA3xB,KAAA,SACAmV,MAAA,iBACAvS,KAAA,yGAEAyzB,YACAwD,WACAtD,WAAA,SAAAtV,EAAAuV,GACA,IAAAznC,EAAAynC,GAAAvV,EACA,OAAAlyB,GAAA,GAAAA,GAAA,IAEAxC,QAAA,yDAMA,YAAAgK,EAAAT,kBACAqjC,EAAAhsC,MAEAuf,IAAA,WACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAm2B,UAAA,EACAhhB,MAAA,WACAvS,KAAA,mEAEA62B,SACAC,SAAA,SAAA7G,EAAArjC,EAAA6E,EAAA9I,GACAiE,IAAA6E,IACA9I,EAAAouC,QAAA3F,qBAAA,OAOA,YAAAz9B,EAAAT,kBACAqjC,EAAAhsC,MAEAuf,IAAA,WACA1M,KAAA,iBACA02B,eAAA,kBACA/E,iBACA3xB,KAAA,OACAm2B,UAAA,EACAhhB,MAAA,WACAvS,KAAA,qEAMA,YAAArM,EAAAT,kBACAqjC,EAAAhsC,MAEAuf,IAAA,YACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAm2B,UAAA,EACAhhB,MAAA,aACAvS,KAAA,0EAOAu2B,EAAAhsC,MAEAuf,IAAA,YACA1M,KAAA,mBACA02B,eAAA,4CACA/E,iBACA3xB,KAAA,SACAmV,MAAA,YACAvS,KAAA,+CAIAu2B,EAAAhsC,MAEAuf,IAAA,yBACA1M,KAAA,mBACA2xB,iBACAxc,MAAA,gBACAtiB,UACAoD,KAAA,yBAAAlH,MAAA,aACAkH,KAAA,oBAAAlH,MAAA,QACAkH,KAAA,4BAAAlH,MAAA,YAMA,UAAAwH,EAAAT,iBAAA,CACA,IAAAgkC,EAAA9mB,EAAAyG,gBACA5mB,EAAA5F,EAAAsO,IAAAu+B,EAAA,SAAA9jC,GACA,OAAA5B,GAAA4B,EAAAC,KAAAkf,MAAAnf,EAAAC,QAEAkjC,EAAAhsC,MAEAuf,IAAA,oBACA1M,KAAA,wBACA2xB,iBACAxc,MAAA,aACAvS,KAAA,qHACA/P,QAAAA,EACAC,UACAQ,oBAAA,EACAG,eAAA,eAyEA,MAlEA,YAAA8C,EAAAT,kBAAA,YAAAS,EAAAT,kBACAqjC,EAAAhsC,MAEAuf,IAAA,qBACA1M,KAAA,wBACA2xB,iBACAxc,MAAA,aACAtiB,UACAsiB,MAAA,OAAA/gB,GAAA,SACA+gB,MAAA,SAAA/gB,GAAA,WACA+gB,MAAA,OAAA/gB,GAAA,SACA+gB,MAAA,QAAA/gB,GAAA,UACA+gB,MAAA,SAAA/gB,GAAA,WACA+gB,MAAA,OAAA/gB,GAAA,SAEAX,eAAA,UAKA,YAAA8C,EAAAT,kBAAA,YAAAS,EAAAT,kBACAqjC,EAAAhsC,MAEAuf,IAAA,uBACA1M,KAAA,wBACA2xB,iBACAxc,MAAA,eACAtiB,UACAsiB,MAAA,SAAA/gB,GAAA,UACA+gB,MAAA,KAAA/gB,GAAA,aACA+gB,MAAA,SAAA/gB,GAAA,SACA+gB,MAAA,QAAA/gB,GAAA,UAEAP,WAAA,UAMA,YAAA0C,EAAAT,kBAAA,YAAAS,EAAAT,kBACAqjC,EAAAhsC,MAEA6S,KAAA,sBACA02B,eAAA,sGACA/E,iBACAxc,MAAA,qBACAvS,KAAA,mGAMA,aAAArM,EAAAT,kBACAqjC,EAAAhsC,MAEAuf,IAAA,iBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,WACAvS,KAAA,8IAMAu2B,EAIA,SAAAzB,uBAAAnhC,EAAAy8B,EAAAC,GACA,IAAAkG,KAyIA,OAvIAA,EAAAlsC,EAAA8sC,MAAAZ,IAEAzsB,IAAA,UACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,aAIAzI,IAAA,OACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,OACAghB,UAAA,GAEAE,YACAgD,YACA9C,WAAA,SAAA+C,GACA,OAAArG,GAAAqG,IAAA/iC,EAAAN,OACA,IAAAhJ,EAAAqH,MAAA0+B,EAAA,QAAA7+B,QAAAmlC,IAIA/sC,QAAA,2DAMAmgB,IAAA,MACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,MACAvS,KAAA,gCACAuzB,UAAA,GAEAsD,SACAC,SAAA,SAAA7G,EAAArjC,EAAA6E,EAAA9I,GACAiE,IAAA6E,IACA9I,EAAAouC,QAAA3F,qBAAA,QAQA,YAAAz9B,EAAAqO,eACAu0B,EAAAhsC,MACAuf,IAAA,SACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,WAEAskB,SACAC,SAAA,SAAA7G,EAAArjC,EAAA6E,EAAA9I,GACAiE,IAAA6E,IACA9I,EAAAouC,QAAA3F,qBAAA,OAKA,WAAAz9B,EAAAqO,iBACAu0B,EAAAhsC,MACAuf,IAAA,WACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,YAEAskB,SACAC,SAAA,SAAA7G,EAAArjC,EAAA6E,EAAA9I,GACAiE,IAAA6E,IACA9I,EAAAouC,QAAA3F,qBAAA,OAKAmF,EAAAhsC,MACAuf,IAAA,WACA1M,KAAA,iBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,YAEAskB,SACAC,SAAA,SAAA7G,EAAArjC,EAAA6E,EAAA9I,GACAiE,IAAA6E,IACA9I,EAAAouC,QAAA3F,qBAAA,QAOAmF,EAAAlsC,EAAA8sC,MAAAZ,IAEAzsB,IAAA,kBACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,mBACAvS,KAAA,oIACAwzB,YAAA,0BAIA1pB,IAAA,gBACA1M,KAAA,mBACA2xB,iBACA3xB,KAAA,SACAmV,MAAA,kBACAtiB,UACAoD,KAAA,YAAAlH,MAAA,cACAkH,KAAA,aAAAlH,MAAA,WAEA6T,KAAA,sIAIA8J,IAAA,eACA1M,KAAA,kBACA2xB,iBACA3xB,KAAA,OACAmV,MAAA,iBACAvS,KAAA,uEACAwzB,YAAA,cAQA,SAAAmB,uBACA,SAEAthC,KAAA,SACA2O,eAAA,SACApE,SAAA,UACAw5B,cAAA,SACAC,cAAA,WACAt1B,aAAA,GACAhI,aAAA,MACAjB,IAAA,4CAGAA,IAAA,wBACAkJ,eAAA,UACA3O,KAAA,UACA+jC,cAAA,SACAC,cAAA,WACAt1B,aAAA,GACAhI,aAAA,SAKA,SAAAu9B,0BAAAhW,EAAAt5B,EAAA2L,EAAA4jC,EAAA1kB,GACA,IAAAlpB,EACA6tC,EACAxvC,EAAA6a,SACAlZ,EAAA,yBAAA4tC,EAAA,YAAAvvC,EAAA2B,QAAA,oCACA6tC,EAAA,0BAEA7tC,EAAA,yBAAA4tC,EAAA,qDACAC,EAAA,gBAEAlW,EAAA/yB,KAAA,0BAAA5E,GACAi4B,KACAC,MAAA,WACAhP,EAAAnkB,WAEAkJ,KAAA4/B,GAEA7V,IACAG,KAAA,WACAnuB,EAAA2V,SAAA,EACAuJ,EAAAnkB,WAEAkJ,KAAA,wBAEApI,QACA+vB,SAAA,WACA1M,EAAA6X,UAEA9yB,KAAA,4BAUA,SAAAq+B,+BAAA9lB,EAAAmR,EAAA8J,EAAAriC,EAAAmZ,GAEA,OACA8yB,MAGA,SAAArsC,EAAAgL,GACA,IAAAkf,EAAA1C,EAAA9M,QACA,GAAA1a,EAAA0nC,WAAA1nC,EAAAyoC,sBAAAzoC,EAAAimC,KAAAC,YAMA,CACA3sB,EAAA8E,MAAA,yBACAre,EAAAwoC,eAAA,EAEA/F,EAAAC,gBADA,sCACA13B,GAAA5L,KAAA,WACAgB,EAAAqF,KAAA,iDACAqpC,EAAA9uC,EAAAgL,GAAA5L,KAAA,SAAAC,GACAka,EAAA5O,QACA3K,EAAAwoC,eAAA,EACAte,EAAAnkB,QAAA1G,IACA,WACAka,EAAA5O,QACA3K,EAAAwoC,eAAA,EACAte,EAAA6X,YAGA,SAAA1iC,GACAka,EAAA5O,QACAgkC,0BAAAhW,EAAAt5B,EAAA2L,EAAA,UAAAkf,UAvBA4kB,EAAA9uC,EAAAgL,GAAA5L,KAAA,WACA8qB,EAAAnkB,QAAAiF,IACA,WACAkf,EAAA6X,WAuBA,OAAA7X,EAAAvP,UAIA,SAAAm0B,EAAA9uC,EAAAgL,GACA,IAAAkf,EAAA1C,EAAA9M,QAiCA,OAhCAhc,QAAA+C,YAAAuJ,EAAA85B,qBAAApmC,QAAA+C,YAAAuJ,EAAA+5B,uBAEAxrB,EAAA8E,MAAA,uEACAokB,EAAAE,WAAAK,cAAAh4B,EAAAm4B,UAAA,WAAA/jC,KACA,SAAAC,GACAA,EAAAA,EAAA,GACAka,EAAA5O,QACA3K,EAAAwoC,eAAA,EACAnpC,EAAA6lC,gBAAA7lC,EAAA4lC,eACA7kC,EAAAqF,KAAA,+CACApG,EAAA6lC,gBAAA7lC,EAAA4lC,eACAtM,EAAA/yB,KAAA,wBAAA,yMAAA,KAAA,QACAvG,EAAA4lC,gBACAtM,EAAA/yB,KAAA,6BAAA,2KAAA,KAAA,QAGAskB,EAAAnkB,QAAA1G,EAAA2jC,gBAEA,WACAzpB,EAAA5O,QACA3K,EAAAwoC,eAAA,EACAx9B,EAAA85B,wBAAA/xB,EACA/H,EAAA+5B,0BAAAhyB,EACA4lB,EAAA/yB,KAAA,6BAAA,uKAAA,KAAA,QACAskB,EAAAnkB,YACAwP,QACA,WACAvV,EAAAwoC,eAAA,KAGAte,EAAAnkB,UAEAmkB,EAAAvP,SAUA,SAAAyxB,kCAAA5kB,EAAAib,EAAAriC,EAAAu4B,EAAApf,GAEA,OACA8yB,MAGA,SAAArsC,EAAAgL,GACA,IAAAkf,EAAA1C,EAAA9M,QACA,GAAA1a,EAAA0nC,WAAA1nC,EAAAyoC,oBAEA,CACAzoC,EAAAwoC,eAAA,EACAjvB,EAAA8E,MAAA,yBAEAokB,EAAAC,gBADA,yCACAa,KAAAC,UAAAx4B,IAAA5L,KAAA,WACAma,EAAA5O,QACA3K,EAAAwoC,eAAA,EACApoC,EAAAqF,KAAA,oDACAykB,EAAAnkB,WAEA,SAAA1G,GACAka,EAAA5O,QACA3K,EAAAwoC,eAAA,EACAmG,0BAAAhW,EAAAt5B,EAAA2L,EAAA,aAAAkf,KACA3U,QAAA,WACAvV,EAAAwoC,eAAA,EACAjvB,EAAA5O,eAjBAuf,EAAAnkB,UAoBA,OAAAmkB,EAAAvP,UCxrEA,SAAAo0B,iBAAA9vC,EAAAC,EAAAmc,EAAAhb,EAAAsQ,EAAA2nB,EAAAiS,EAAAyE,EAAArW,EAAAjhB,EAAAnV,EAAAuY,EAAA1a,GASA,SAAA6uC,IACAvwC,QAAA+C,YAAAxC,EAAAgnC,MACAr+B,QAAA7G,MAAA,kDAIA9B,EAAAgnC,KAAAiJ,eACA5W,EAAA+Q,aACApqC,EAAAkwC,iBACAxW,EAAA/yB,KAAA,mBAAA,mGACAqzB,KACAC,MAAA,WACAxhB,EAAAc,YAGAwgB,IACAG,KAAA,SAAA1yB,GAEAxH,EAAAkwC,iBAAA,EACA1oC,EAAAK,UACAL,EAAAK,eA5BA7H,EAAA0R,OAAAA,EACA1R,EAAAmwC,OA0GA,WACA,GAAAnwC,EAAAgnC,KAAA0C,OACAtoC,EAAAiO,IAAArP,EAAA0R,QAAA,GAAAvR,KAAA,SAAAyB,IA1EA,SAAAwuC,EAAAxuC,EAAAqpC,EAAAoF,GACA5wC,QAAA+C,YAAAyoC,KACAA,EAAA,OAAA3nC,EAAApD,IAAA,mBAAAoD,EAAApD,IAAA,mBAGA,IAAAk7B,EAAAx5B,EAAAxB,KAAAg7B,gBACA,IAAAkV,EAAA1uC,EAAAxB,KAAAkwC,cACAtwC,EAAAkwC,gBAAAtuC,EAAAxB,KAAAiwC,iBAAA5wC,QAAAgL,UAAA4lC,IAAAA,EACA,IAAAE,EAAAD,EAAAxtC,OAAA,GAAAs4B,EAAAt4B,OAAA,IAAAmoC,EAEA,SAAAuF,EAAAzuC,EAAA+Y,GAKA,OAJArY,EAAA8I,QAAAuP,EAAA,SAAAtP,GACAzJ,GAAA,OAAAyJ,EAAA,UAEAzJ,GAAA,eAIA,GAAAwuC,EAAA,CACA,IAAAloC,EACAtG,EACAmW,EACAo4B,EAAAxtC,OAAA,GACAoV,EAAA,2BAEAnW,EAAAyuC,EADAzuC,EAAA,sGACAH,EAAAxB,KAAAkwC,eACAlV,EAAAt4B,OAAA,IAEAf,EAAAyuC,EADAzuC,GAAA,oGACAH,EAAAxB,KAAAg7B,kBAEA/yB,GACA2xB,KACAC,MAAA,aAEAjqB,KAAA,QAGAorB,EAAAt4B,OAAA,IACAoV,EAAA,6BAEAnW,EAAAyuC,EADAzuC,EAAA,uIACAH,EAAAxB,KAAAg7B,iBACA/yB,GACAT,QACA+vB,SAAA,WACA33B,EAAAgnC,KAAAiJ,eACA3sC,EAAA+L,IAAA,kBAAA,GACAjO,EAAAiO,IAAArP,EAAA0R,QAAA,GAAAvR,KAAA,SAAAyB,GACAwuC,EAAAxuC,GAAA,EAAA5B,EAAAkwC,iBACAF,KACA,SAAApuC,GAEAT,EAAAW,MAAAF,EAAAxB,SAGA4P,KAAA,iCAEAgqB,KACAC,MAAA,WACAmW,EAAAxuC,GAAA,EAAA5B,EAAAkwC,iBACAF,KAEAhgC,KAAA,QAKA0pB,EAAA/yB,KAAAuR,EAAAnW,EAAAsG,EAAA,KAAA,aAEA2nC,IAOAI,CAAAxuC,IACA,SAAAA,GAEAT,EAAAW,MAAAF,EAAAxB,YAGA,CACAe,EAAAW,MAAA,+CAGA,IACArC,QAAAgL,UAAAu8B,KAAA4C,OAAA+B,WACAlpC,EAAA6pB,KAAA0a,KAAA4C,OAAA+B,SAAA,SAAAhkC,GACAlI,QAAAgL,UAAA9C,EAAAiiC,OAAA+B,WACAlpC,EAAA6pB,KAAA3kB,EAAAiiC,OAAA+B,SAAA,SAAA8E,GACAA,EAAA5G,kBAKApqC,QAAA8L,QAAAvL,EAAAgnC,KAAA4C,OAAA+B,SAAA,SAAAtD,GACAA,EAAAwB,gBAEA,MAAA6G,OAnIA1wC,EAAAoc,UAAAA,EAEApc,EAAAkwC,iBAAA,EACAlwC,EAAA2wC,kBAAA,EAuIAZ,EAAAr+B,EAEA1R,EAAAmoC,OAAAmD,EAAAC,UAAAvrC,EAAA0R,QAEA1R,EAAA0c,UAEA/O,QAAA,EACAgP,MAAA,mBACAlR,KAAA,OACAM,MAAAgkC,EAAAtE,KACAtD,OAAAnoC,EAAAmoC,OAAAsD,KACApjC,aAGAsF,QAAA,EACAgP,MAAA,mBACAlR,KAAA,gBACAM,MAAAgkC,EAAAzB,KACAnG,OAAAnoC,EAAAmoC,OAAAmG,KACAjmC,aAGAsF,QAAA,EACAgP,MAAA,wBACAlR,KAAA,YACAM,MAAAgkC,EAAA1mB,UACA8e,OAAAnoC,EAAAmoC,OAAA9e,UACAhhB,aAGAsF,QAAA,EACAgP,MAAA,yBACAlR,KAAA,aACAM,MAAAgkC,EAAA/c,iBACAmV,OAAAnoC,EAAAmoC,OAAAnV,iBACA3qB,aAGAsF,QAAA,EACAgP,MAAA,0BACAlR,KAAA,cACAM,MAAAgkC,EAAAvuC,YACA2mC,OAAAnoC,EAAAmoC,OAAA3mC,YACA6G,aAGAsF,QAAA,EACAgP,MAAA,uBACAlR,KAAA,WACAM,MAAAgkC,EAAAnpB,SACAuhB,OAAAnoC,EAAAmoC,OAAAvhB,SACAve,aAIArI,EAAA4wC,eAAA,WACA,OAAA5wC,EAAAgnC,KAAA6J,QAAA7wC,EAAAgnC,KAAA0C,SAAA1pC,EAAA2wC,kBAGA3wC,EAAA8wC,gBAAA,SAAApnC,GACAmS,EAAAK,GAAAlc,EAAA0c,QAAAhT,GAAAiT,OAAAP,UAAA1S,IAAAmT,SAAA,EAAAC,QAAA,EAAAC,QAAA,KAGA/c,EAAAoY,KAAA,WACA,IAAA24B,EAAA/wC,EAAA0c,QAAA1c,EAAAoc,WAAA3Q,KACAxL,EAAAC,IAAA,oBAAA6wC,GAAA5wC,KAAA,SAAA8C,GACA,IAAA+tC,EAAA,mCAAA/tC,EAAA7C,KAAA,UACAs5B,EAAA/yB,KAAAoqC,EAAA,UAAAC,KAAA,OAEA,WACA7vC,EAAAW,MAAA,+BAIA9B,EAAAqE,IAAA,oBACA,SAAAM,EAAAs8B,EAAAC,EAAAC,EAAAC,GACAphC,EAAA4wC,mBACAjsC,EAAAm8B,iBACApH,EAAA/yB,KAAA,kBAAA,uCACAqzB,KACAC,MAAA,WACAj6B,EAAAmwC,SACAt0B,EAAAK,GAAA+kB,IAEAjxB,KAAA,OAEA+pB,IACAG,KAAA,WACAl6B,EAAA2wC,kBAAA,EACA3wC,EAAA0c,QAAA1c,EAAAoc,WAAA/T,QAAAglC,aACAxxB,EAAAK,GAAA+kB,IAEAjxB,KAAA,MAEApI,QACA+vB,SAAA,WACAhzB,EAAAm8B,kBAEA9wB,KAAA,eCtQA,SAAAwY,kBAAApnB,GAEA,OACAyzB,UAOA,SAAAppB,GACA,IAAA,IAAAwlC,KAAA7vC,EAAAG,UAAAyxB,iBAAAC,WAAA,CACA,IAAA9M,EAAA/kB,EAAAG,UAAAyxB,iBAAAC,WAAAge,GACA,GAAA9qB,EAAA1a,OAAAA,EACA,OAAA0a,IAVAuO,iBAAAA,EACAI,WAuBA,WACA,OAAAJ,IAAA,IAvBAzF,cAiBA,WACA,IAAAqgB,EAAAluC,EAAAG,UAAAyxB,iBAAAC,WACA,OAAAqc,EAAA4B,MAAA,EAAA5B,EAAAxsC,UANA,SAAA4xB,IACA,OAAAtzB,EAAAG,UAAAyxB,iBAAAC,YCpBA,SAAA3a,cAAArY,GAEA,OACA0Y,eAKA,WACA,OAAA1Y,EAAAC,IAAA,2BAAAC,KAAA,SAAAC,GACA,OAAAA,EAAAA,QANA0Z,gBAUA,SAAA9I,GACA,OAAA/Q,EAAAC,IAAA,8BAAA0N,QAAAoD,SAAAA,KAAA7Q,KAAA,SAAAyB,GACA,OAAAA,MVnBAooC,QAAA9+B,OAAA,QAAA,WACA,OAAA,SAAAimC,GACA,OAAAC,SAAAD,MAIAnH,QACA9+B,OAAA,UAAA,OAAA,SAAAuC,GACA,OAAA,SAAAuC,GACA,OAAAvC,EAAAW,YAAA4B,OCVA62B,qBAAA/mC,SAAA,QAAA,KAAA,aAAAL,QACAC,OAAA,eACAqhC,QAAA,uBAAA8F,sBA2CApnC,QACAC,OAAA,eAAAG,WAAA,gCAAA,SAAA,QAAA,oBAAA,uBAAA,OAAA,OAAA,SAAAG,EAAAC,EAAAuH,EAAAq/B,EAAAzmC,EAAAoV,GAEAxV,EAAAwV,KAAAA,EACAxV,EAAAqxC,SAAA,SAAA77B,EAAA,OAAA,SACAxV,EAAAI,KAAAA,EAAAA,KAEAJ,EAAA6O,OAAA,SAAAyiC,EAAAC,GACA,SAAAA,GAAA,SAAA/7B,EACAhO,EAAAE,MAAA4pC,EAAArH,UACA,WAAAsH,GACAtxC,EAAA4d,KAAA,oCAAAosB,SAAAqH,EAAArH,SAAAz0B,KAAAA,EAAA00B,MAAA,IAAA/pC,KAAA,SAAAC,GACAJ,EAAAI,KAAAA,EAAAA,QAKAJ,EAAAkqC,KAAA,WACAjqC,EAAA4d,KAAA,oCAAAosB,SAAAjqC,EAAAI,KAAA6pC,SAAAz0B,KAAAA,EAAA00B,MAAA,IAAA/pC,KAAA,SAAAC,GACAJ,EAAAI,KAAAA,EAAAA,QAIAJ,EAAAmwC,OAAA,WACA3oC,EAAAE,MAAA1H,EAAAI,KAAA6pC,cCrEAr5B,oBAAA9Q,SAAA,QAAA,SAAAL,QACAC,OAAA,eACAqhC,QAAA,sBAAAnwB,qBCFAyoB,4BAAAv5B,SAAA,QAAA,KAAA,aAAAL,QACAC,OAAA,eACAqhC,QAAA,8BAAA1H,6BA4EA55B,QACAC,OAAA,eAAAG,WAAA,yCAAA,SAAA,oBAAA,8BAAA,aAAA,SAAAG,EAAAwH,EAAA6xB,EAAApG,GAEAjzB,EAAAizB,WAAAA,EACAjzB,EAAA6O,OAAA,SAAAsX,GACAkT,EAAAxqB,OAAAsX,GACA3e,EAAAE,MAAA1H,OCpFA6/B,0BAAA//B,SAAA,SAAA,eAAA,YAAA,gBAAA,WAAA,QAAAL,QACAC,OAAA,eACAG,WAAA,4BAAAggC,2BAmJApgC,QACAC,OAAA,eACAwL,OAAA,oBAAAw/B,mBCxIArpC,aAAAvB,SAAA,WACAL,QACAC,OAAA,eACAqhC,QAAA,eAAA1/B,cClBAD,cAAAtB,SAAA,QAAA,KAAA,gBAAA,gBAAAL,QACAC,OAAA,eACAqhC,QAAA,gBAAA3/B,eCFAkqC,aAAAxrC,SAAA,aACAuuC,+BAAAvuC,SAAA,KAAA,eAAA,mBAAA,QAAA,WACAqtC,kCAAArtC,SAAA,KAAA,mBAAA,QAAA,eAAA,WAAAL,QACAC,OAAA,eACAqhC,QAAA,eAAAuK,cA2lEA7rC,QACAC,OAAA,eACAqhC,QAAA,iCAAAsN,gCAiFA5uC,QACAC,OAAA,eACAqhC,QAAA,oCAAAoM,mCCprEA2C,iBAAAhwC,SAAA,SAAA,QAAA,YAAA,gBAAA,SAAA,8BAAA,eAAA,cAAA,eAAA,iBAAA,sBAAA,SAAA,SAAAL,QACAC,OAAA,eACAqhC,QAAA,cAAA,WACA,WAGAthC,QACAC,OAAA,eACAqhC,QAAA,gBAAA,WAGA,OACAyQ,MAGA,SAAAzwC,GACAA,EACAk3B,aAAA,oBAAA,cACA,OAKAx4B,QACAC,OAAA,eACAG,WAAA,mBAAAiwC,kBCzBAtnB,kBAAA1oB,SAAA,iBAAAL,QACAC,OAAA,eACAqhC,QAAA,oBAAAvY,mBCFAlQ,cAAAxY,SAAA,SAAAL,QACAC,OAAA,eACAqhC,QAAA,gBAAAzoB,eCFA,IAAAm5B,sBAAA,SAAAjmC,GAGA,OAAAA,EAAA,GACAlE,KAAAoqC,IAAA,EAAAlmC,EAAA,GAAA,EAEA,EAAAlE,KAAAoqC,IAAA,GAAA,EAAAlmC,GAAA,GAAA,GAGAmmC,SAAAlyC,QAAAC,OAAA,YACA,qBACA,wBACA,2BACA,sBACA,2BAGA6E,MAAA,mBAAA,KAEAA,MAAA,kBAAA,KAGAA,MAAA,6BAAA,GAEAA,MAAA,kBAAA,GAEAA,MAAA,iBAAA,GAEAA,MAAA,iBAAAktC,uBAEAltC,MAAA,yBAAA,iDAEAA,MAAA,qBAAA,GAEAA,MAAA,sBAAA,UAEA,oBAAA7E,QAAAA,QAAAA,OAAAkyC,UACAlyC,OAAAkyC,QAAAD,UAIAlyC,QAAAC,OAAA,0BAAA,8BACAshC,KAAA,UAAA,KAAA,kBAAA,mBAAA,iBAAA,mBAAA,iBAAA,yBAAA,SAAA39B,EAAAklB,EAAAspB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,aAEA,IAgCAC,EAAAlnB,EAhCAmnB,KAEAC,EAAA,SAAAC,GACA,MAAA,oBAAAC,cAAAD,aAAAC,cAAAD,EAAAE,UAAAF,EAAAE,WAAAF,EAAAG,eAGAC,EAAA,SAAAJ,GACA,MAAA,oBAAAK,aAAAL,aAAAK,aAAAL,EAAAE,UAAAF,EAAAE,WAAAF,EAAAM,cAGAC,EAAA,SAAAP,GACA,OAAAI,EAAAJ,IAAAD,EAAAC,GAAAA,EAAAA,EAAA,IAGAF,EAAAU,WAAA,SAAAryB,EAAAH,EAAAW,EAAA8xB,GACA,IAAAC,EAMA,GALAvzC,QAAAizC,UAAAjyB,GACAuyB,EAAApgC,KAAAqgC,kBACAxzC,QAAAgL,UAAAwW,KACA+xB,EAAApgC,KAAAsgC,oBAEAF,EACA,OAAAA,EAAApwC,MAAAgQ,KAAAmyB,WAEA,IAAAuN,EAAAO,EAAAjgC,MACA,GAAAy/B,EAAAC,GACA,OAAAjvC,EAAA8vC,SAAA1yB,EAAAH,GAEAgyB,EAAAc,WAAA3yB,EACA6xB,EAAAtjC,UAAAsR,GAIA8xB,EAAAc,mBAAA,SAAAzyB,EAAAH,EAAAW,EAAA8xB,GACA9xB,IAAA8xB,IACAA,EAAAhB,GAEA,IAAAsB,EAAAzgC,KAAA0gC,eACAC,EAAA3gC,KAAA4gC,cACAC,EAAAnsC,KAAAC,MAAAkZ,EAAA4yB,GACAK,EAAApsC,KAAAC,MAAA+Y,EAAAizB,GAEAI,EAAA,KAAAl6B,EAAA,EACA64B,EAAA1/B,KAEAghC,EAAA,SAAAtvC,KACAA,GAAAmV,GAAAnV,EAAAgP,MAAA,KACA4+B,GACAI,EAAAuB,OAAA3B,EAAA0B,GAEA/B,EAAAM,GACAlnB,EAAA6X,SACAqP,EAAA,OASA,GALAA,GACAyB,IAEA3oB,EAAA1C,EAAA9M,QAEA,IAAAwF,IAAAwyB,IAAAC,EAKA,OAJA,IAAAzyB,GACAqxB,EAAAQ,WAAAryB,EAAAH,GAEA2K,EAAAnkB,UACAmkB,EAAAvP,QAGA,IAAAo4B,EAAA,SAAA7X,GACA,OAAA0X,IACAA,EAAA1X,GAIA,IAAA8X,GADAt6B,EAAAwiB,EAAA0X,IACA1yB,EAAA,EAAA8xB,EAAAt5B,EAAAwH,GAEAqxB,EAAAa,SACAE,EAAA/rC,KAAA0sC,KAAAP,EAAAM,GACAR,EAAAjsC,KAAA0sC,KAAAN,EAAAK,IAEAA,EAAA,EACA5B,EAAAL,EAAAgC,IAEA5B,GACAI,EAAAuB,OAAA3B,EAAA0B,GAEAzB,EAAA,KACAlnB,EAAAnkB,YAYA,OAPAwrC,EAAAQ,WAAAO,EAAAE,GAEArB,GACAI,EAAA3R,KAAAuR,EAAA0B,GAGAzB,EAAAL,EAAAgC,GACA7oB,EAAAvP,SAGA02B,EAAAa,kBAAA,SAAA9oC,EAAA0D,EAAAoT,EAAA8xB,GACA,IAAAT,EAAAO,EAAAjgC,MACAnT,QAAA60B,SAAAzmB,KAAAwmB,MAAAxmB,KACAA,EAAAokC,GAEA,IAAA3xB,EAAA1N,KAAA4gC,cAAAX,EAAA1oC,GAAA8pC,wBAAA3zB,IAAAzS,EAIA,OAHA6kC,EAAAJ,KACAhyB,GAAAgyB,EAAA2B,wBAAA3zB,KAEA1N,KAAAkgC,WAAA,EAAAxyB,EAAAW,EAAA8xB,IAGAX,EAAAkB,aAAA,SAAA/uC,EAAA0c,EAAA8xB,GACA,GAAAtzC,QAAA60B,SAAA/vB,GACA,OAAAqO,KAAAkgC,WAAAvuC,EAAAqO,KAAA4gC,cAAAvyB,EAAA8xB,GAEA,IAAAT,EAAAO,EAAAjgC,MACA,OAAAy/B,EAAAC,GACAjvC,EAAA6wC,SAAAplC,SAAAqlC,gBAAAf,YAAAtkC,SAAA0O,KAAA41B,WAEAd,EAAAc,YAEAhB,EAAAoB,YAAA,SAAAjvC,EAAA0c,EAAA8xB,GACA,GAAAtzC,QAAA60B,SAAA/vB,GACA,OAAAqO,KAAAkgC,WAAAlgC,KAAA0gC,eAAA/uC,EAAA0c,EAAA8xB,GAEA,IAAAT,EAAAO,EAAAjgC,MACA,OAAAy/B,EAAAC,GACAjvC,EAAA+wC,SAAAtlC,SAAAqlC,gBAAAnlC,WAAAF,SAAA0O,KAAAxO,UAEAsjC,EAAAtjC,WAGAojC,EAAAiC,0BAAA,SAAAlqC,EAAA0D,EAAAoT,EAAA8xB,GACA,OAAAngC,KAAAqgC,kBAAA9oC,EAAA0D,EAAAoT,GAAA+wB,EAAAe,IAGAX,EAAAkC,oBAAA,SAAAh0B,EAAAW,EAAA8xB,GACA,OAAAngC,KAAA4gC,YAAAlzB,EAAAW,GAAA+wB,EAAAe,IAGAX,EAAAmC,qBAAA,SAAA9zB,EAAAQ,EAAA8xB,GACA,OAAAngC,KAAA0gC,aAAA7yB,EAAAQ,GAAA+wB,EAAAe,IAGAtzC,QAAA8L,QAAA6mC,EAAA,SAAAz6B,EAAAuK,GACAziB,QAAAuI,QAAAwkB,UAAAtK,GAAAvK,EAGA,IAAA68B,EAAAtyB,EAAAphB,QAAA,YAAA,UACArB,QAAA+C,YAAA/C,QAAAuI,QAAAwkB,UAAAgoB,MACA/0C,QAAAuI,QAAAwkB,UAAAgoB,GAAA78B,QAQAlY,QAAAC,OAAA,wBACAqhC,QAAA,YAAA,UAAA,SAAA19B,GACA,aAEA,IAAAoxC,GAAA,SAAA,MAAA,IAAA,MAEA,OAAA,SAAAC,EAAAC,GACA,GAAAtxC,EAAAqxC,GACA,OAAArxC,EAAAqxC,GAGA,IADA,IACAxyB,EADA0yB,EAAAF,EAAAvkC,OAAA,EAAA,GAAA0kC,cAAAH,EAAAvkC,OAAA,GACA6G,EAAA,EAAAA,EAAAy9B,EAAA3xC,OAAAkU,IAEA,GAAA3T,EADA6e,EAAAuyB,EAAAz9B,GAAA49B,GAEA,OAAAvxC,EAAA6e,GAGA,OAAAyyB,MAIAl1C,QAAAC,OAAA,6BAAA,sBACAqhC,QAAA,oBAAA,WAAA,WAAA,SAAA+T,EAAA/sC,GACA,aAEA,IAAAgtC,EAAA,EAUA,OAAAD,EAAA,wBATA,SAAAnkC,EAAA3I,GACA,IAAAgtC,GAAA,IAAA/d,MAAAC,UACA+d,EAAA3tC,KAAA6H,IAAA,EAAA,IAAA6lC,EAAAD,IACAnrC,EAAA7B,EAAA,WAAA4I,EAAAqkC,EAAAC,IACAA,GAEA,OADAF,EAAAC,EAAAC,EACArrC,OAKAm3B,QAAA,mBAAA,WAAA,WAAA,SAAA+T,EAAA/sC,GACA,aAMA,OAAA+sC,EAAA,uBAJA,SAAAp5B,GACA3T,EAAAH,OAAA8T,QAOAjc,QAAAC,OAAA,mBAAA,gCACAqhC,QAAA,UAAA,aAAA,WAAA,YAAA,UAAA,YAAA,qBAAA,iBAAA,kBAAA,6BAAA,oBAAA,sBAAA,SAAAtE,EAAA10B,EAAAyF,EAAAnK,EAAAqF,EAAAwsC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,aAEA,IAkFAC,KAEAC,EAAA,SAAAz1C,GACA,IArFAuX,EACA4hB,EAAAuc,EACAC,EAmFA/rC,EAAA5J,EAAA41C,IACAr+B,GACAs+B,UAUA,OAPAt+B,EAAAo+B,SA1FAp+B,EA0FAA,EAzFA4hB,GAAA,EAAAuc,GAAA,EACAC,EAAA,WACAD,GAAA,EACA,IAGAI,EAFAC,EADAx+B,EAAAy+B,UACA,GACAC,EAAA,EAGA,GAAA,oBAAAtD,aAAAoD,aAAApD,aAAAoD,EAAAvD,UAAAuD,EAAAvD,WAAAuD,EAAAnD,aACAqD,EAAAF,EAAA9B,wBAAA3zB,IACAw1B,EAAAxuC,KAAAC,MAAAwuC,EAAA/mC,UAAA+mC,EAAAG,eAAAH,EAAAI,iBACA,CACA,IAAAC,EAAA1tC,EAAA,GAAA8U,KAAA24B,cAAAztC,EAAA,GAAAyrC,gBAAAgC,aACAL,EAAAxuC,KAAAC,MAAAlE,EAAAgzC,YAAAhzC,EAAAizC,cAAAF,EAEA,IAEAp/B,EAAAu/B,EAAAC,EAAAX,EAAAY,EAAAC,EAFAC,EAAArB,GAAAQ,EAAA,SAAA,MAOA,IAJAD,EAAAt+B,EAAAs+B,MACAU,EAAAh/B,EAAAg/B,gBACAC,OAAA1iC,EAEAkD,EAAA,EAAAA,EAAA6+B,EAAA/yC,OAAAkU,KAEA0/B,GADAD,EAAAZ,EAAA7+B,IACA4/B,sBACAH,EAAAvzC,WAEAoyC,GAAAQ,GAAAY,EAAAp2B,IAAAm2B,EAAA5oC,OAAAooC,EAAA,KAAAd,IAAA,EAAAuB,EAAAp2B,IAAA21B,GAAAS,EAAAt2B,WAEAo2B,GAAAA,EAAAG,GAAAD,EAAAC,OACAH,GACAC,IAAAA,IAEAE,GAAAD,EAAAC,IAKAH,IACAA,EAAAA,EAAAC,KAEAF,IAAAC,GAAArB,IAAAqB,IACAD,GAAAA,EAAArzC,WACAqzC,EAAArzC,SAAA0S,YAAA2/B,GACA9Y,EAAA1pB,WACA,6BACAwjC,EAAArzC,SACAzD,QAAAuI,QAAAuuC,EAAAM,sBAGAL,IACAA,EAAAtzC,SAAA2S,SAAA0/B,GACA9Y,EAAA1pB,WACA,2BACAyjC,EAAAtzC,SACAzD,QAAAuI,QAAAwuC,EAAAK,sBAGAt/B,EAAAg/B,gBAAAC,IAGApB,EAKA,WACAjc,EASAuc,GAAA,GARAC,IACAxc,EAAApxB,EAAA,WACAoxB,GAAA,EACAuc,GACAC,KAEAP,GAAA,KAZAO,GA4BAH,EAAA5rC,GAAA2N,EAEAvX,EAAAqE,IAAA,WAAA,WACAyyC,EAAA92C,KAGA4J,GAGAktC,EAAA,SAAA92C,GACA,IAAA4J,EAAA5J,EAAA41C,IACAr+B,EAAAi+B,EAAA5rC,GAAAosC,EAAAz+B,EAAAy+B,UACAz+B,EAAAw/B,iBACAvpC,EAAA5F,OAAA2P,EAAAw/B,iBAEAf,GACAA,EAAAh+B,IAAA,SAAAT,EAAAo+B,gBAEAH,EAAA5rC,IAGAotC,EAAAvB,EAAAhZ,GAEAwa,EAAA,SAAAl2C,GACA,OAAAy0C,EAAAz0C,EAAA60C,KACAJ,EAAAz0C,EAAA60C,KAEA70C,EAAAouC,QACA8H,EAAAl2C,EAAAouC,SAEAqG,EAAAwB,IAGAE,EAAA,SAAAT,GACA,IAAAl/B,EAAA4/B,EAAAp2C,EAAA01C,EAAAz2C,OACA,GAAAe,EACA,OAAAk2C,EAAAl2C,GAGA,IAAAo2C,KAAA3B,EAEA,IAAA,KADAj+B,EAAAi+B,EAAA2B,IACAtB,MAAAlsC,QAAA8sC,GACA,OAAAl/B,GA4CA,OACA6/B,OA9BA,SAAAX,GACA,IAAAl/B,EAAA2/B,EAAAT,GACAl/B,IACAA,EAAAs+B,MAAAlzC,KAAA8zC,GACAl/B,EAAAy+B,WAdA,SAAAhuC,GACA,KAAAA,EAAA0O,YAEA,IADA1O,EAAAA,EAAA0O,cACA5H,SACA,OAAA,EAGA,OAAA,EAOAuoC,CAAA9/B,EAAAy+B,aACAz+B,EAAAy+B,WACAz+B,EAAAy+B,UAAAh+B,IAAA,SAAAT,EAAAo+B,SAEAp+B,EAAAy+B,UAAAd,EAAAoC,aAAAb,EAAAz2C,QACAq1C,IAAA99B,EAAAw/B,kBACAx/B,EAAAw/B,gBAAAvpC,EAAA+J,EAAAo+B,QAAAN,EAAA,GAAA,IAEA99B,EAAAy+B,UAAAjsC,GAAA,SAAAwN,EAAAo+B,SAAA4B,eAAA,aAmBAC,UAfA,SAAAf,GACA,IAAAl/B,EAAA2/B,EAAAT,GACAA,IAAAl/B,EAAAg/B,kBACA9Z,EAAA1pB,WAAA,6BAAAwE,EAAAg/B,gBAAArzC,UACAqU,EAAAg/B,gBAAA,MAEA,IAAAv/B,EAAAO,EAAAs+B,MAAAlsC,QAAA8sC,IACA,IAAAz/B,GACAO,EAAAs+B,MAAAhzC,OAAAmU,EAAA,GAEAy/B,EAAAvzC,SAAA,MAMAuyC,cAAAA,EACAqB,eAAAA,EACAG,mBAAAA,MAKAx3C,QAAAC,OAAA,kCACAqhC,QAAA,sBAAA,YAAA,SAAAr4B,GACA,aAEA,IAAA+uC,KAQAC,EAAA,SAAA32C,GACA,OAAA02C,EAAA12C,EAAA60C,KACA70C,EAAA60C,IAEA70C,EAAAouC,QACAuI,EAAA32C,EAAAouC,cADA,GAkBA,OACAuI,eAAAA,EACAJ,aAdA,SAAAv2C,GACA,IAAA6I,EAAA8tC,EAAA32C,GACA,OAAA6I,EAAA6tC,EAAA7tC,GAAAlB,GAaAivC,aA/BA,SAAA52C,EAAAiH,GACA,IAAA4B,EAAA7I,EAAA60C,IAEA,OADA6B,EAAA7tC,GAAA5B,EACA4B,GA6BAguC,gBAXA,SAAA72C,GACA,IAAA6I,EAAA8tC,EAAA32C,GACA6I,UACA6tC,EAAA7tC,QAaAnK,QAAAC,OAAA,yBAAA,yBAAA,gCACAghC,UAAA,kBAAA,mBAAA,iBAAA,qBAAA,SAAAsR,EAAAC,EAAAiD,GACA,aAEA,OACA/tC,KAAA,SAAAnH,EAAAkD,EAAA20C,GACA30C,EAAA6G,GAAA,QAAA,SAAAC,GACA,GAAA6tC,EAAA3wC,OAAA,IAAA2wC,EAAA3wC,KAAAyC,QAAA,MAAA,KAAAkuC,EAAAC,eAAA,CAEA,IAAAluC,EAAAiuC,EAAA3wC,KAAA2wC,EAAA3wC,KAAApG,QAAA,iBAAA,IAAA8rB,UAAA,GAAAirB,EAAAC,eAEA3tC,EAAA2E,SAAAC,eAAAnF,IAAAkF,SAAAipC,kBAAAnuC,GAAA,GACA,GAAAO,GAAAA,EAAA8pC,sBAAA,CAEAjqC,EAAAguC,iBAAAhuC,EAAAguC,kBACAhuC,EAAA82B,gBAAA92B,EAAA82B,iBAEA,IAAAjzB,EAAAgqC,EAAAhqC,OAAA6L,SAAAm+B,EAAAhqC,OAAA,IAAAokC,EACAhxB,EAAA42B,EAAA52B,SAAAvH,SAAAm+B,EAAA52B,SAAA,IAAA+wB,EACAkD,EAAAoC,aAAAt3C,GAEAizC,kBACAxzC,QAAAuI,QAAAmC,GACAkqB,MAAAxmB,GAAA,EAAAA,EACAwmB,MAAApT,GAAA,EAAAA,YAQAxhB,QAAAC,OAAA,uBAAA,oBACAghC,UAAA,gBAAA,SAAA,SAAAuX,GACA,aAEA,OACAp3C,SAAA,IACAE,OAAA,EACAm3C,QAAA,SAAAC,EAAAC,EAAA13C,GACA,OACA23C,IAAA,SAAAr4C,EAAAs4C,EAAAC,EAAA14C,GACAo4C,EAAAxC,cAAAz1C,UAQAP,QAAAC,OAAA,4BAAA,gCACAghC,UAAA,qBAAA,qBAAA,SAAAwU,GACA,aAEA,OACAr0C,SAAA,IACAE,OAAA,EACAm3C,QAAA,SAAAC,EAAAC,EAAA13C,GACA,OACA23C,IAAA,SAAAr4C,EAAAs4C,EAAAC,EAAA14C,GACA04C,EAAAC,SAAA,oBAAA,SAAAxwC,GACAvI,QAAA6iC,SAAAt6B,KACAA,EAAA8G,SAAAC,eAAA/G,IAGAA,EAAAvI,QAAAizC,UAAA1qC,GAAAvI,QAAAuI,QAAAA,GAAAswC,EACApD,EAAAyC,aAAA33C,EAAAgI,GACAhI,EAAAqE,IAAA,WAAA,WACA6wC,EAAA0C,gBAAA53C,cAUAP,QAAAC,OAAA,sBAAA,oBACAghC,UAAA,eAAA,SAAA,iBAAA,WAAA,aAAA,SAAAuX,EAAAhG,EAAAlqC,EAAA00B,GACA,aAEA,IAAAgc,EAAA,SAAAC,EAAA14C,EAAAkD,EAAA2K,GACApO,QAAAizC,UAAAgG,GACA9lC,KAAAzI,OAAAuuC,EACAj5C,QAAA6iC,SAAAoW,KACA9lC,KAAA+lC,SAAAD,GAEA9lC,KAAA5S,OAAAA,EACA4S,KAAA1P,SAAAA,EACA0P,KAAA/E,OAAAA,GAuBA,OApBA4qC,EAAAjsB,UAAAqqB,iBAAA,WAIA,OAHAjkC,KAAAzI,QAAAyI,KAAA+lC,WACA/lC,KAAAzI,OAAA2E,SAAAC,eAAA6D,KAAA+lC,WAAA7pC,SAAAipC,kBAAAnlC,KAAA+lC,UAAA,IAEA/lC,KAAAzI,QAGAsuC,EAAAjsB,UAAAoqB,kBAAA,WACA,IAAAzsC,EAAAyI,KAAAikC,mBACA,GAAA1sC,EACA,OAAAA,EAAA8pC,yBAIAwE,EAAAjsB,UAAAosB,iBAAA,WACAhmC,KAAA+lC,WACA/lC,KAAAzI,YAAA2J,KAKA3M,KAAA,SAAAnH,EAAAkD,EAAA20C,GACA,IACAc,EADAzxC,EAAA2wC,EAAAgB,QAAAhB,EAAA3wC,KAUA,GAPAA,IAAA,IAAAA,EAAAyC,QAAA,KACAgvC,EAAAzxC,EAAApG,QAAA,iBAAA,IAAA8rB,UAAA,GACAirB,EAAAiB,YACAH,EAAAd,EAAAiB,YACAjB,EAAAC,iBACAa,EAAAd,EAAAC,gBAEAa,EAAA,CAIA,IAAAI,EAAAhxC,EAAA,WACA,IAAA0uC,EAAA,IAAAgC,EAAAE,EAAA34C,EAAAkD,IAAA20C,EAAAhqC,OAAA6L,SAAAm+B,EAAAhqC,OAAA,IAAAokC,IACAgG,EAAAb,OAAAX,GAEAz2C,EAAAqE,IAAA,yBAAAoyC,EAAAmC,iBAAAjY,KAAA8V,IACA,IAAAuC,EAAAvc,EAAAp4B,IAAA,sBAAAoyC,EAAAmC,iBAAAjY,KAAA8V,IACAz2C,EAAAqE,IAAA,WAAA,WACA4zC,EAAAT,UAAAf,GACAuC,OAEA,GAAA,GACAh5C,EAAAqE,IAAA,WAAA,WAAA0D,EAAAH,OAAAmxC","file":"nzbhydra.js","sourcesContent":["// For caching HTML templates, see http://paulsalaets.com/pre-caching-angular-templates-with-gulp\nangular.module('templates', []);\n\nvar nzbhydraapp = angular.module('nzbhydraApp', ['angular-loading-bar', 'cgBusy', 'ui.bootstrap', 'ipCookie', 'angular-growl', 'angular.filter', 'filters', 'ui.router', 'blockUI', 'mgcrea.ngStrap', 'angularUtils.directives.dirPagination', 'nvd3', 'formly', 'formlyBootstrap', 'frapontillo.bootstrap-switch', 'ui.select', 'ngSanitize', 'checklist-model', 'ngAria', 'ngMessages', 'ui.router.title', 'LocalStorageModule', 'angular.filter', 'ngFileUpload', 'ngCookies', 'angular.chips', 'templates', 'base64','duScroll']);\n\nnzbhydraapp.config(['$compileProvider', function ($compileProvider) {\n    $compileProvider.debugInfoEnabled(true);\n}]);\n\nnzbhydraapp.config(['$animateProvider', function ($animateProvider) {\n    //$animateProvider.classNameFilter(/ng-animate-enabled/);\n}]);\n\nangular.module('nzbhydraApp').config([\"$stateProvider\", \"$urlRouterProvider\", \"$locationProvider\", \"blockUIConfig\", \"$urlMatcherFactoryProvider\", \"localStorageServiceProvider\", \"bootstrapped\", function ($stateProvider, $urlRouterProvider, $locationProvider, blockUIConfig, $urlMatcherFactoryProvider, localStorageServiceProvider, bootstrapped) {\n    blockUIConfig.autoBlock = false;\n    blockUIConfig.resetOnException = false;\n    blockUIConfig.autoInjectBodyBlock = false;\n    $urlMatcherFactoryProvider.strictMode(false);\n\n    $urlRouterProvider.otherwise(\"/\");\n\n    $stateProvider\n        .state('root', {\n            url: '',\n            abstract: true,\n            resolve: {\n                //loginRequired: loginRequired\n            },\n            views: {\n                'header': {\n                    templateUrl: 'static/html/states/header.html',\n                    controller: 'HeaderController'\n                }\n            }\n        })\n        .state(\"root.config\", {\n            url: \"/config\",\n            views: {},\n            abstract: true\n        })\n        .state(\"root.config.main\", {\n            url: \"/main\",\n            views: {\n                'container@': {\n                    templateUrl: \"static/html/states/config.html\",\n                    controller: \"ConfigController\",\n                    controllerAs: 'ctrl',\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\n                        }],\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.get();\n                        }],\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.getSafe();\n                        }],\n                        activeTab: [function () {\n                            return 0;\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"Config (Main)\"\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.config.auth\", {\n            url: \"/auth\",\n            views: {\n                'container@': {\n                    templateUrl: \"static/html/states/config.html\",\n                    controller: \"ConfigController\",\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\n                        }],\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.get();\n                        }],\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.getSafe();\n                        }],\n                        activeTab: [function () {\n                            return 1;\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"Config (Auth)\"\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.config.searching\", {\n            url: \"/searching\",\n            views: {\n                'container@': {\n                    templateUrl: \"static/html/states/config.html\",\n                    controller: \"ConfigController\",\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\n                        }],\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.get();\n                        }],\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.getSafe();\n                        }],\n                        activeTab: [function () {\n                            return 2;\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"Config (Searching)\"\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.config.categories\", {\n            url: \"/categories\",\n            views: {\n                'container@': {\n                    templateUrl: \"static/html/states/config.html\",\n                    controller: \"ConfigController\",\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\n                        }],\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.get();\n                        }],\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.getSafe();\n                        }],\n                        activeTab: [function () {\n                            return 3;\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"Config (Categories)\"\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.config.downloading\", {\n            url: \"/downloading\",\n            views: {\n                'container@': {\n                    templateUrl: \"static/html/states/config.html\",\n                    controller: \"ConfigController\",\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\n                        }],\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.get();\n                        }],\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.getSafe();\n                        }],\n                        activeTab: [function () {\n                            return 4;\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"Config (Downloading)\"\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.config.indexers\", {\n            url: \"/indexers\",\n            views: {\n                'container@': {\n                    templateUrl: \"static/html/states/config.html\",\n                    controller: \"ConfigController\",\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\n                        }],\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.get();\n                        }],\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.getSafe();\n                        }],\n                        activeTab: [function () {\n                            return 5;\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"Config (Indexers)\"\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.stats\", {\n            url: \"/stats\",\n            abstract: true,\n            views: {\n                'container@': {\n                    templateUrl: \"static/html/states/stats.html\",\n                    controller: [\"$scope\", \"$state\", function ($scope, $state) {\n                        $scope.$state = $state;\n                    }],\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"stats\")\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"Stats\"\n                        }]\n                    }\n\n                }\n            }\n        })\n        .state(\"root.stats.main\", {\n            url: \"/stats\",\n            views: {\n                'stats@root.stats': {\n                    templateUrl: \"static/html/states/main-stats.html\",\n                    controller: \"StatsController\",\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"stats\")\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"Stats\"\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.stats.indexers\", {\n            url: \"/indexers\",\n            views: {\n                'stats@root.stats': {\n                    templateUrl: \"static/html/states/indexer-statuses.html\",\n                    controller: IndexerStatusesController,\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"stats\")\n                        }],\n                        statuses: [\"$http\", function ($http) {\n                            return $http.get(\"internalapi/indexerstatuses\").success(function (response) {\n                                return response;\n                            });\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"Stats (Indexers)\"\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.stats.searches\", {\n            url: \"/searches\",\n            views: {\n                'stats@root.stats': {\n                    templateUrl: \"static/html/states/search-history.html\",\n                    controller: SearchHistoryController,\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"stats\")\n                        }],\n                        history: ['loginRequired', 'SearchHistoryService', function (loginRequired, SearchHistoryService) {\n                            return SearchHistoryService.getSearchHistory();\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"Stats (Searches)\"\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.stats.downloads\", {\n            url: \"/downloads\",\n            views: {\n                'stats@root.stats': {\n                    templateUrl: 'static/html/states/download-history.html',\n                    controller: DownloadHistoryController,\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"stats\")\n                        }],\n                        downloads: [\"StatsService\", function (StatsService) {\n                            return StatsService.getDownloadHistory();\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"Stats (Downloads)\"\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.system\", {\n            url: \"/system\",\n            views: {},\n            abstract: true\n        })\n        .state(\"root.system.control\", {\n            url: \"/control\",\n            views: {\n                'container@': {\n                    templateUrl: \"static/html/states/system.html\",\n                    controller: \"SystemController\",\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\n                        }],\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.getSafe();\n                        }],\n                        // askAdmin: ['loginRequired', '$http', function (loginRequired, $http) {\n                        //     return $http.get(\"internalapi/askadmin\");\n                        // }],\n                        activeTab: [function () {\n                            return 0;\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"System\"\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.system.updates\", {\n            url: \"/updates\",\n            views: {\n                'container@': {\n                    templateUrl: \"static/html/states/system.html\",\n                    controller: \"SystemController\",\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\n                        }],\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.getSafe();\n                        }],\n                        activeTab: [function () {\n                            return 1;\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"System (Updates)\"\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.system.log\", {\n            url: \"/log\",\n            views: {\n                'container@': {\n                    templateUrl: \"static/html/states/system.html\",\n                    controller: \"SystemController\",\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\n                        }],\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.getSafe();\n                        }],\n                        activeTab: [function () {\n                            return 2;\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"System (Log)\"\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.system.tasks\", {\n            url: \"/tasks\",\n            views: {\n                'container@': {\n                    templateUrl: \"static/html/states/system.html\",\n                    controller: \"SystemController\",\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\n                        }],\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.getSafe();\n                        }],\n                        activeTab: [function () {\n                            return 3;\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"System (Tasks)\"\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.system.backup\", {\n            url: \"/backup\",\n            views: {\n                'container@': {\n                    templateUrl: \"static/html/states/system.html\",\n                    controller: \"SystemController\",\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\n                        }],\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.getSafe();\n                        }],\n                        activeTab: [function () {\n                            return 4;\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"System (Backup)\"\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.system.bugreport\", {\n            url: \"/bugreport\",\n            views: {\n                'container@': {\n                    templateUrl: \"static/html/states/system.html\",\n                    controller: \"SystemController\",\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\n                        }],\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.getSafe();\n                        }],\n                        activeTab: [function () {\n                            return 5;\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"System (Bug report)\"\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.system.news\", {\n            url: \"/news\",\n            views: {\n                'container@': {\n                    templateUrl: \"static/html/states/system.html\",\n                    controller: \"SystemController\",\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\n                        }],\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.getSafe();\n                        }],\n                        activeTab: [function () {\n                            return 6;\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"System (News)\"\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.system.about\", {\n            url: \"/about\",\n            views: {\n                'container@': {\n                    templateUrl: \"static/html/states/system.html\",\n                    controller: \"SystemController\",\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\n                        }],\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.getSafe();\n                        }],\n                        activeTab: [function () {\n                            return 7;\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"System (About)\"\n                        }]\n                    }\n                }\n            }\n        })\n\n        .state(\"root.search\", {\n            url: \"/?category&query&imdbid&tvdbid&title&season&episode&minsize&maxsize&minage&maxage&offsets&tvrageid&mode&tmdbid&indexers&tvmazeid\",\n            views: {\n                'container@': {\n                    templateUrl: \"static/html/states/search.html\",\n                    controller: \"SearchController\",\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"search\")\n                        }],\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\n                            return ConfigService.getSafe();\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"Search\";\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.search.results\", {\n            views: {\n                'results@root.search': {\n                    templateUrl: \"static/html/states/search-results.html\",\n                    controller: \"SearchResultsController\",\n                    controllerAs: \"srController\",\n                    options: {\n                        inherit: true\n                    },\n                    params: {\n                        modalInstance: null\n                    },\n                    resolve: {\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"search\")\n                        }],\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            var title = \"Search results\";\n                            var details;\n                            if ($stateParams.title) {\n                                details = $stateParams.title;\n                            } else if ($stateParams.query) {\n                                details = $stateParams.query;\n                            }\n                            if (details) {\n                                title += \" (\" + details + \")\";\n                            }\n                            return title;\n                        }]\n                    }\n                }\n            }\n        })\n        .state(\"root.login\", {\n            url: \"/login\",\n            views: {\n                'container@': {\n                    templateUrl: \"static/html/states/login.html\",\n                    controller: \"LoginController\",\n                    resolve: {\n                        loginRequired: function () {\n                            return null;\n                        },\n                        $title: [\"$stateParams\", function ($stateParams) {\n                            return \"Login\"\n                        }]\n                    }\n                }\n            }\n        })\n    ;\n\n\n    $locationProvider.html5Mode(true);\n\n\n    function loginRequired($q, $timeout, $state, HydraAuthService, type) {\n        var deferred = $q.defer();\n        var userInfos = HydraAuthService.getUserInfos();\n        var allowed = false;\n        if (type === \"search\") {\n            allowed = !userInfos.searchRestricted || userInfos.maySeeSearch;\n        } else if (type === \"stats\") {\n            allowed = !userInfos.statsRestricted || userInfos.maySeeStats;\n        } else if (type === \"admin\") {\n            allowed = !userInfos.adminRestricted || userInfos.maySeeAdmin;\n        } else {\n            allowed = true;\n        }\n        if (allowed || userInfos.authType !== \"FORM\") {\n            deferred.resolve();\n        } else {\n            $timeout(function () {\n                // This code runs after the authentication promise has been rejected.\n                // Go to the log-in page\n                $state.go(\"root.login\");\n            })\n        }\n        return deferred.promise;\n    }\n\n\n    //Because I don't know for what state the login is required / asked I have a function for each\n\n    function loginRequiredSearch($q, $timeout, $state, HydraAuthService) {\n        var deferred = $q.defer();\n        var userInfos = HydraAuthService.getUserInfos();\n        if (!userInfos.searchRestricted || userInfos.maySeeSearch || userInfos.authType !== \"FORM\") {\n            deferred.resolve();\n        } else {\n            $timeout(function () {\n                // This code runs after the authentication promise has been rejected.\n                // Go to the log-in page\n                $state.go(\"root.login\");\n            })\n        }\n        return deferred.promise;\n    }\n\n    function loginRequiredStats($q, $timeout, $state, HydraAuthService) {\n        var deferred = $q.defer();\n\n        var userInfos = HydraAuthService.getUserInfos();\n        if (!userInfos.statsRestricted || userInfos.maySeeStats || userInfos.authType !== \"FORM\") {\n            deferred.resolve();\n        } else {\n            $timeout(function () {\n                // This code runs after the authentication promise has been rejected.\n                // Go to the log-in page\n                $state.go(\"root.login\");\n            })\n        }\n        return deferred.promise;\n    }\n\n    function loginRequiredAdmin($q, $timeout, $state, HydraAuthService) {\n        var deferred = $q.defer();\n\n        var userInfos = HydraAuthService.getUserInfos();\n        if (!userInfos.statsRestricted || userInfos.maySeeAdmin || userInfos.authType != \"form\") {\n            deferred.resolve();\n        } else {\n            $timeout(function () {\n                // This code runs after the authentication promise has been rejected.\n                // Go to the log-in page\n                $state.go(\"root.login\");\n            })\n        }\n        return deferred.promise;\n    }\n\n    localStorageServiceProvider\n        .setPrefix('nzbhydra');\n    localStorageServiceProvider\n        .setNotify(true, false);\n}]);\n\n\nnzbhydraapp.config([\"paginationTemplateProvider\", function (paginationTemplateProvider) {\n    paginationTemplateProvider.setPath('static/html/dirPagination.tpl.html');\n}]);\n\nnzbhydraapp.config(['cfpLoadingBarProvider', function (cfpLoadingBarProvider) {\n    cfpLoadingBarProvider.latencyThreshold = 100;\n}]);\n\nnzbhydraapp.config(['growlProvider', function (growlProvider) {\n    growlProvider.globalTimeToLive(5000);\n    growlProvider.globalPosition('bottom-right');\n}]);\n\nnzbhydraapp.directive('ngEnter', function () {\n    return function (scope, element, attr) {\n        element.bind(\"keydown keypress\", function (event) {\n            if (event.which === 13) {\n                scope.$apply(function () {\n                    scope.$evalAsync(attr.ngEnter);\n                });\n\n                event.preventDefault();\n            }\n        });\n    };\n});\n\nnzbhydraapp.filter('nzblink', function () {\n    return function (resultItem) {\n        var uri = new URI(\"internalapi/getnzb/user/\" + resultItem.searchResultId);\n        return uri.toString();\n    }\n});\n\nnzbhydraapp.factory('focus', [\"$rootScope\", \"$timeout\", function ($rootScope, $timeout) {\n    return function (name) {\n        $timeout(function () {\n            $rootScope.$broadcast('focusOn', name);\n        });\n    }\n}]);\n\nnzbhydraapp.run([\"$rootScope\", function ($rootScope) {\n    $rootScope.$on('$stateChangeSuccess',\n        function (event, toState, toParams, fromState, fromParams) {\n            try {\n                $rootScope.title = toState.views[Object.keys(toState.views)[0]].resolve.$title[1](toParams);\n            } catch (e) {\n\n            }\n\n        });\n}]);\n\nnzbhydraapp.filter('dereferer', [\"ConfigService\", function (ConfigService) {\n    return function (url) {\n        if (ConfigService.getSafe().dereferer) {\n            return ConfigService.getSafe().dereferer.replace(\"$s\", escape(url));\n        }\n        return url;\n    }\n}]);\n\nnzbhydraapp.config([\"$provide\", function ($provide) {\n    $provide.decorator(\"$exceptionHandler\", ['$delegate', '$injector', function ($delegate, $injector) {\n        return function (exception, cause) {\n            $delegate(exception, cause);\n            try {\n\n                if (angular.isDefined(exception.stack)) {\n                    var stack = exception.stack.split('\\n').map(function (line) {\n                        return line.trim();\n                    });\n                    stack = stack.join(\"\\n\");\n                    //$injector.get(\"$http\").put(\"internalapi/logerror\", {error: stack, cause: angular.isDefined(cause) ? cause.toString() : \"No known cause\"});\n                }\n            } catch (e) {\n                console.error(\"Unable to log JS exception to server\", e);\n            }\n        };\n    }]);\n}]);\n\n_.mixin({\n    isNullOrEmpty: function (string) {\n        return (_.isUndefined(string) || _.isNull(string) || (_.isString(string) && string.length === 0))\n    }\n});\n\nnzbhydraapp.factory('sessionInjector', [\"$injector\", function ($injector) {\n    var sessionInjector = {\n        response: function (response) {\n            if (response.headers(\"Hydra-MaySeeAdmin\") != null) {\n                $injector.get(\"HydraAuthService\").setLoggedInByBasic(response.headers(\"Hydra-MaySeeStats\") == \"True\", response.headers(\"Hydra-MaySeeAdmin\") == \"True\", response.headers(\"Hydra-Username\"))\n            }\n\n            return response;\n        }\n    };\n    return sessionInjector;\n}]);\n\nnzbhydraapp.config(['$httpProvider', function ($httpProvider) {\n    $httpProvider.interceptors.push('sessionInjector');\n}]);\n\nnzbhydraapp.directive('autoFocus', [\"$timeout\", function ($timeout) {\n    return {\n        restrict: 'AC',\n        link: function (_scope, _element) {\n            $timeout(function () {\n                _element[0].focus();\n            }, 0);\n        }\n    };\n}]);\n\n\nnzbhydraapp.factory('responseObserver', [\"$q\", \"$window\", \"growl\", function responseObserver($q, $window, growl) {\n    return {\n        'responseError': function (errorResponse) {\n            switch (errorResponse.status) {\n                case 403:\n                    growl.info(\"You are not allowed to visit that section.\");\n                    break;\n            }\n            if (angular.isDefined(errorResponse.config)) {\n                errorResponse.config.alreadyHandled = true;\n            }\n            return $q.reject(errorResponse);\n        }\n    };\n}]);\n\nnzbhydraapp.config([\"$httpProvider\", function ($httpProvider) {\n    $httpProvider.interceptors.push('responseObserver');\n}]);\n\n\nnzbhydraapp.factory('focus', [\"$timeout\", \"$window\", function ($timeout, $window) {\n    return function (id) {\n        // timeout makes sure that it is invoked after any other event has been triggered.\n        // e.g. click events that need to run before the focus or\n        // inputs elements that are in a disabled state but are enabled when those events\n        // are triggered.\n        $timeout(function () {\n            var element = $window.document.getElementById(id);\n            if (element)\n                element.focus();\n        });\n    };\n}]);\n\nnzbhydraapp.directive('eventFocus', [\"focus\", function (focus) {\n    return function (scope, elem, attr) {\n        elem.on(attr.eventFocus, function () {\n            focus(attr.eventFocusId);\n        });\n\n        // Removes bound events in the element itself\n        // when the scope is destroyed\n        scope.$on('$destroy', function () {\n            elem.off(attr.eventFocus);\n        });\n    };\n}]);\n\n","/*\n *  (C) Copyright 2017 TheOtherP (theotherp@gmx.de)\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nangular\n    .module('nzbhydraApp')\n    .directive('hydraTasks', hydraTasks);\n\nfunction hydraTasks() {\n    controller.$inject = [\"$scope\", \"$http\"];\n    return {\n        templateUrl: 'static/html/directives/tasks.html',\n        controller: controller\n    };\n\n    function controller($scope, $http) {\n\n        $http.get(\"internalapi/tasks\").then(function (data) {\n            $scope.tasks = data.data;\n        });\n\n        $scope.runTask = function (taskName) {\n            $http.put(\"internalapi/tasks/\" + taskName).then(function (data) {\n                $scope.tasks = data.data;\n            });\n        }\n    }\n}\n\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('tabOrChart', tabOrChart);\r\n\r\nfunction tabOrChart() {\r\n    return {\r\n        templateUrl: 'static/html/directives/tab-or-chart.html',\r\n        transclude: {\r\n            \"chartSlot\": \"chart\",\r\n            \"tableSlot\": \"table\"\r\n        },\r\n        restrict: 'E',\r\n        replace: true,\r\n        scope: {\r\n            display: \"@\"\r\n        }\r\n\r\n    };\r\n\r\n}\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('sendTorrentToBlackhole', sendTorrentToBlackhole);\r\n\r\nfunction sendTorrentToBlackhole() {\r\n    controller.$inject = [\"$scope\", \"$http\", \"growl\", \"ConfigService\", \"DebugService\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/send-torrent-to-blackhole.html',\r\n        scope: {\r\n            searchResultId: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, $http, growl, ConfigService, DebugService) {\r\n        $scope.useBlackhole = ConfigService.getSafe().downloading.saveTorrentsTo !== null && ConfigService.getSafe().downloading.saveTorrentsTo !== \"\";\r\n        $scope.cssClass = \"glyphicon-save-file\";\r\n        $scope.add = function () {\r\n            $scope.cssClass = \"nzb-spinning\";\r\n            $http.put(\"internalapi/saveTorrent\", [$scope.searchResultId]).then(function (response) {\r\n                if (response.data.successful) {\r\n                    $scope.cssClass = \"glyphicon-ok\";\r\n                } else {\r\n                    $scope.cssClass = \"glyphicon-remove\";\r\n                    growl.error(response.data.message);\r\n                }\r\n            });\r\n\r\n        };\r\n        DebugService.log(\"blackhole\");\r\n\r\n    }\r\n}\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('selectionButton', selectionButton);\r\n\r\nfunction selectionButton() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/selection-button.html',\r\n        scope: {\r\n            selected: \"=\",\r\n            selectable: \"=\",\r\n            invertSelection: \"<\",\r\n            selectAll: \"<\",\r\n            deselectAll: \"<\",\r\n            btn: \"@\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n\r\n        if (angular.isUndefined($scope.btn)) {\r\n            $scope.btn = \"default\"; //Will form class \"btn-default\"\r\n        }\r\n\r\n        if (angular.isUndefined($scope.invertSelection)) {\r\n            $scope.invertSelection = function () {\r\n                $scope.selected = _.difference($scope.selectable, $scope.selected);\r\n            };\r\n        }\r\n\r\n        if (angular.isUndefined($scope.selectAll)) {\r\n            $scope.selectAll = function () {\r\n                $scope.selected.push.apply($scope.selected, $scope.selectable);\r\n            };\r\n        }\r\n\r\n        if (angular.isUndefined($scope.deselectAll)) {\r\n            $scope.deselectAll = function () {\r\n                $scope.selected.splice(0, $scope.selected.length);\r\n            };\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n","\r\nNfoModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"nfo\"];angular\r\n    .module('nzbhydraApp')\r\n    .directive('searchResult', searchResult);\r\n\r\nfunction searchResult() {\r\n    controller.$inject = [\"$scope\", \"$element\", \"$http\", \"growl\", \"$attrs\", \"$uibModal\", \"$window\", \"DebugService\", \"localStorageService\", \"HydraAuthService\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/search-result.html',\r\n        require: '^result',\r\n        replace: false,\r\n        scope: {\r\n            result: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n\r\n    function handleDisplay($scope, localStorageService) {\r\n        //Display state / expansion\r\n        $scope.foo.duplicatesDisplayed = localStorageService.get(\"duplicatesDisplayed\") !== null ? localStorageService.get(\"duplicatesDisplayed\") : false;\r\n        $scope.duplicatesExpanded = false;\r\n        $scope.titlesExpanded = false;\r\n\r\n        function calculateDisplayState() {\r\n            $scope.resultDisplayed = ($scope.result.titleGroupIndex === 0 || $scope.titlesExpanded) && ($scope.duplicatesExpanded || $scope.result.duplicateGroupIndex === 0);\r\n        }\r\n\r\n        calculateDisplayState();\r\n\r\n        $scope.toggleTitleExpansion = function () {\r\n            $scope.titlesExpanded = !$scope.titlesExpanded;\r\n            $scope.$emit(\"toggleTitleExpansionUp\", $scope.titlesExpanded, $scope.result.titleGroupIndicator);\r\n        };\r\n\r\n        $scope.toggleDuplicateExpansion = function () {\r\n            $scope.duplicatesExpanded = !$scope.duplicatesExpanded;\r\n            $scope.$emit(\"toggleDuplicateExpansionUp\", $scope.duplicatesExpanded, $scope.result.hash);\r\n        };\r\n\r\n        $scope.$on(\"toggleTitleExpansionDown\", function ($event, value, titleGroupIndicator) {\r\n            if ($scope.result.titleGroupIndicator === titleGroupIndicator) {\r\n                $scope.titlesExpanded = value;\r\n                calculateDisplayState();\r\n            }\r\n        });\r\n\r\n        $scope.$on(\"toggleDuplicateExpansionDown\", function ($event, value, hash) {\r\n            if ($scope.result.hash === hash) {\r\n                $scope.duplicatesExpanded = value;\r\n                calculateDisplayState();\r\n            }\r\n        });\r\n\r\n        $scope.$on(\"duplicatesDisplayed\", function($event, value) {\r\n            $scope.foo.duplicatesDisplayed = value;\r\n            if (!value) {\r\n                //Collapse duplicate groups they shouldn't be displayed\r\n                $scope.duplicatesExpanded = false;\r\n            }\r\n            calculateDisplayState();\r\n        });\r\n\r\n        $scope.$on(\"calculateDisplayState\", function () {\r\n            calculateDisplayState();\r\n        });\r\n    }\r\n\r\n    function handleSelection($scope, $element) {\r\n        $scope.foo.selected = false;\r\n\r\n        function sendSelectionEvent() {\r\n            $scope.$emit(\"selectionUp\", $scope.result, $scope.foo.selected);\r\n        }\r\n\r\n        $scope.clickCheckbox = function () {\r\n            sendSelectionEvent();\r\n            $scope.$emit(\"checkboxClicked\", event, $scope.rowIndex, $scope.foo.selected, event.currentTarget);\r\n        };\r\n\r\n        function isBetween(num, betweena, betweenb) {\r\n            return (betweena <= num && num <= betweenb) || (betweena >= num && num >= betweenb);\r\n        }\r\n\r\n        $scope.$on(\"shiftClick\", function (event, startIndex, endIndex, newValue, previousClickTargetElement, newClickTargetElement) {\r\n            var fromYlocation = $($(previousClickTargetElement).prop(\"parentNode\")).prop(\"offsetTop\");\r\n            var newYlocation = $($(newClickTargetElement).prop(\"parentNode\")).prop(\"offsetTop\");\r\n            var elementYlocation = $($element).prop(\"offsetTop\");\r\n            if (!$scope.resultDisplayed) {\r\n                return;\r\n            }\r\n            //if (isBetween($scope.rowIndex, startIndex, endIndex)) {\r\n            if (isBetween(elementYlocation, fromYlocation, newYlocation)) {\r\n                if (newValue) {\r\n                    $scope.foo.selected = true;\r\n                } else {\r\n                    $scope.foo.selected = false;\r\n                }\r\n                sendSelectionEvent();\r\n            }\r\n        });\r\n        $scope.$on(\"invertSelection\", function () {\r\n            if (!$scope.resultDisplayed) {\r\n                return;\r\n            }\r\n            $scope.foo.selected = !$scope.foo.selected;\r\n            sendSelectionEvent();\r\n        });\r\n        $scope.$on(\"deselectAll\", function () {\r\n            if (!$scope.resultDisplayed) {\r\n                return;\r\n            }\r\n            $scope.foo.selected = false;\r\n            sendSelectionEvent();\r\n        });\r\n        $scope.$on(\"selectAll\", function () {\r\n            if (!$scope.resultDisplayed) {\r\n                return;\r\n            }\r\n            $scope.foo.selected = true;\r\n            sendSelectionEvent();\r\n        });\r\n        $scope.$on(\"toggleSelection\", function ($event, result, value) {\r\n            if (!$scope.resultDisplayed || result !== $scope.result) {\r\n                return;\r\n            }\r\n            $scope.foo.selected = value;\r\n        });\r\n    }\r\n\r\n    function handleNfoDisplay($scope, $http, growl, $uibModal, HydraAuthService) {\r\n        $scope.showDetailsDl = HydraAuthService.getUserInfos().maySeeDetailsDl;\r\n\r\n        $scope.showNfo = showNfo;\r\n\r\n        function showNfo(resultItem) {\r\n            if (resultItem.has_nfo === 0) {\r\n                return;\r\n            }\r\n            var uri = new URI(\"internalapi/nfo/\" + resultItem.searchResultId);\r\n            return $http.get(uri.toString()).then(function (response) {\r\n                if (response.data.successful) {\r\n                    if (response.data.hasNfo) {\r\n                        $scope.openModal(\"lg\", response.data.content)\r\n                    } else {\r\n                        growl.info(\"No NFO available\");\r\n                    }\r\n                } else {\r\n                    growl.error(response.data.content);\r\n                }\r\n            });\r\n        }\r\n\r\n        $scope.openModal = openModal;\r\n\r\n        function openModal(size, nfo) {\r\n            var modalInstance = $uibModal.open({\r\n                template: '<pre class=\"nfo\"><span ng-bind-html=\"nfo\"></span></pre>',\r\n                controller: NfoModalInstanceCtrl,\r\n                size: size,\r\n                resolve: {\r\n                    nfo: function () {\r\n                        return nfo;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then();\r\n        }\r\n\r\n        $scope.getNfoTooltip = function () {\r\n            if ($scope.result.hasNfo === \"YES\") {\r\n                return \"Show NFO\"\r\n            } else if ($scope.result.hasNfo === \"MAYBE\") {\r\n                return \"Try to load NFO (may not be available)\";\r\n            } else {\r\n                return \"No NFO available\";\r\n            }\r\n        };\r\n    }\r\n\r\n    function handleNzbDownload($scope, $window) {\r\n        $scope.downloadNzb = downloadNzb;\r\n\r\n        function downloadNzb(resultItem) {\r\n            //href = \"{{ result.link }}\"\r\n            $window.location.href = resultItem.link;\r\n        }\r\n    }\r\n\r\n\r\n    function controller($scope, $element, $http, growl, $attrs, $uibModal, $window, DebugService, localStorageService, HydraAuthService) {\r\n        $scope.foo = {};\r\n        handleDisplay($scope, localStorageService);\r\n        handleSelection($scope, $element);\r\n        handleNfoDisplay($scope, $http, growl, $uibModal, HydraAuthService);\r\n        handleNzbDownload($scope, $window);\r\n\r\n        $scope.kify =  function() {\r\n           return function (number) {\r\n                if (number > 1000) {\r\n                    return Math.round(number / 1000) + \"k\";\r\n                }\r\n                return number;\r\n            };\r\n        };\r\n        DebugService.log(\"search-result\");\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('NfoModalInstanceCtrl', NfoModalInstanceCtrl);\r\n\r\nfunction NfoModalInstanceCtrl($scope, $uibModalInstance, nfo) {\r\n\r\n    $scope.nfo = nfo;\r\n\r\n    $scope.ok = function () {\r\n        $uibModalInstance.close($scope.selected.item);\r\n    };\r\n\r\n    $scope.cancel = function () {\r\n        $uibModalInstance.dismiss();\r\n    };\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .filter('kify', function() {\r\n        return function (number) {\r\n            if (number > 1000) {\r\n                return Math.round(number / 1000) + \"k\";\r\n            }\r\n            return number;\r\n        }\r\n    });","//Can be used in an ng-repeat directive to call a function when the last element was rendered\r\n//We use it to mark the end of sorting / filtering so we can stop blocking the UI\r\n\r\nonFinishRender.$inject = [\"$timeout\"];\r\nangular\r\n    .module('nzbhydraApp')\r\n    .directive('onFinishRender', onFinishRender);\r\n\r\nfunction onFinishRender($timeout) {\r\n    function linkFunction(scope, element, attr) {\r\n\r\n        if (scope.$last === true) {\r\n            // console.log(\"Render finished\");\r\n            // console.timeEnd(\"Presenting\");\r\n            // console.timeEnd(\"searchall\");\r\n            scope.$emit(\"onFinishRender\")\r\n        }\r\n    }\r\n\r\n    return {\r\n        link: linkFunction\r\n    }\r\n}","//Fork of https://github.com/dotansimha/angularjs-dropdown-multiselect to make it compatible with formly\nangular\n    .module('nzbhydraApp')\n    .directive('multiselectDropdown',\n\n        dropdownMultiselectDirective\n    );\n\nfunction dropdownMultiselectDirective() {\n    return {\n        scope: {\n            selectedModel: '=',\n            options: '=',\n            settings: '=?',\n            events: '=?'\n        },\n        transclude: {\n            toggleDropdown: '?toggleDropdown'\n        },\n        templateUrl: 'static/html/directives/multiselect-dropdown.html',\n        controller: [\"$scope\", \"$element\", \"$filter\", \"$document\", function dropdownMultiselectController($scope, $element, $filter, $document) {\n            console.log($scope.options);\n            console.log($scope.selectedModel);\n            var $dropdownTrigger = $element.children()[0];\n\n            var settings = {\n                showSelectedValues: true,\n                showSelectAll: true,\n                showDeselectAll: true,\n                noSelectedText: null\n            };\n            var events = {\n                onToggleItem: angular.noop\n            };\n            angular.extend(events, $scope.events || []);\n            angular.extend(settings, $scope.settings || []);\n            angular.extend($scope, {settings: settings, events: events});\n\n            $scope.buttonText = \"\";\n            if (settings.buttonText) {\n                $scope.buttonText = settings.buttonText;\n            } else {\n                $scope.$watch(\"selectedModel\", function () {\n                    if (settings.showSelectedValues) {\n                        if ($scope.selectedModel.length === 0) {\n                            if ($scope.settings.noSelectedText) {\n                                $scope.buttonText = $scope.settings.noSelectedText;\n                            } else {\n                                $scope.buttonText = \"None selected\";\n                            }\n                        } else if ($scope.selectedModel.length === $scope.options.length) {\n                            $scope.buttonText = \"All selected\";\n                        } else {\n                            $scope.buttonText = $scope.selectedModel.join(\", \");\n                        }\n                    } else {\n                        if ($scope.settings.noSelectedText && $scope.selectedModel.length === 0) {\n                            $scope.buttonText = $scope.settings.noSelectedText;\n                        } else {\n                            $scope.buttonText = $scope.selectedModel.length + \" / \" + $scope.options.length + \" selected\";\n                        }\n                    }\n                }, true);\n            }\n            $scope.open = false;\n\n            $scope.toggleDropdown = function () {\n                $scope.open = !$scope.open;\n            };\n\n            $scope.toggleItem = function (option) {\n                var index = $scope.selectedModel.indexOf(option.id);\n                var oldValue = index > -1;\n                if (oldValue) {\n                    $scope.selectedModel.splice(index, 1);\n                } else {\n                    $scope.selectedModel.push(option.id);\n                }\n                $scope.events.onToggleItem(option, !oldValue);\n            };\n\n            $scope.selectAll = function () {\n                $scope.selectedModel = _.pluck($scope.options, \"id\");\n            };\n\n            $scope.deselectAll = function () {\n                $scope.selectedModel.splice(0, $scope.selectedModel.length);\n            };\n\n            //Close when clicked outside\n\n            $document.on('click', function (e) {\n                function contains(collection, target) {\n                    var containsTarget = false;\n                    collection.some(function (object) {\n                        if (object === target) {\n                            containsTarget = true;\n                            return true;\n                        }\n                        return false;\n                    });\n                    return containsTarget;\n                }\n\n                if ($scope.open) {\n                    var target = e.target.parentElement;\n                    var parentFound = false;\n\n                    while (angular.isDefined(target) && target !== null && !parentFound) {\n                        if (!!target.className.split && contains(target.className.split(' '), 'multiselect-parent') && !parentFound) {\n                            if (target === $dropdownTrigger) {\n                                parentFound = true;\n                            }\n                        }\n                        target = target.parentElement;\n                    }\n\n                    if (!parentFound) {\n                        $scope.$apply(function () {\n                            $scope.open = false;\n                        });\n                    }\n                }\n            });\n\n\n        }]\n\n    }\n}","/*\r\n *  (C) Copyright 2017 TheOtherP (theotherp@gmx.de)\r\n *\r\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *  you may not use this file except in compliance with the License.\r\n *  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *  Unless required by applicable law or agreed to in writing, software\r\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *  See the License for the specific language governing permissions and\r\n *  limitations under the License.\r\n */\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .directive('indexerSelectionButton', indexerSelectionButton);\r\n\r\nfunction indexerSelectionButton() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/indexer-selection-button.html',\r\n        scope: {\r\n            selectedIndexers: \"=\",\r\n            availableIndexers: \"=\",\r\n            btn: \"@\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n\r\n        $scope.anyTorrentIndexersSelectable = _.any($scope.availableIndexers,\r\n            function (indexer) {\r\n                return indexer.searchModuleType === \"TORZNAB\";\r\n            }\r\n        );\r\n\r\n        $scope.invertSelection = function () {\r\n            _.forEach($scope.availableIndexers, function (x) {\r\n                var index = _.indexOf($scope.selectedIndexers, x.name);\r\n                if (index === -1) {\r\n                    $scope.selectedIndexers.push(x.name);\r\n                } else {\r\n                    $scope.selectedIndexers.splice(index, 1);\r\n                }\r\n            });\r\n        };\r\n\r\n        $scope.selectAll = function () {\r\n            $scope.deselectAll();\r\n            $scope.selectedIndexers.push.apply($scope.selectedIndexers, _.pluck($scope.availableIndexers, \"name\"));\r\n        };\r\n\r\n        $scope.deselectAll = function () {\r\n            $scope.selectedIndexers.splice(0, $scope.selectedIndexers.length);\r\n        };\r\n\r\n        function selectByPredicate(predicate) {\r\n            $scope.deselectAll();\r\n            $scope.selectedIndexers.push.apply($scope.selectedIndexers,\r\n                _.pluck(\r\n                    _.filter($scope.availableIndexers,\r\n                        predicate\r\n                    ), \"name\")\r\n            );\r\n        }\r\n\r\n        $scope.reset = function () {\r\n            selectByPredicate(function (indexer) {\r\n                return indexer.preselect;\r\n            });\r\n        };\r\n\r\n        $scope.selectAllUsenet = function () {\r\n            selectByPredicate(function (indexer) {\r\n                return indexer.searchModuleType !== \"TORZNAB\";\r\n            });\r\n        };\r\n\r\n        $scope.selectAllTorrent = function () {\r\n            selectByPredicate(function (indexer) {\r\n                return indexer.searchModuleType === \"TORZNAB\";\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('indexerInput', indexerInput);\r\n\r\nfunction indexerInput() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/indexer-input.html',\r\n        scope: {\r\n            indexer: \"=\",\r\n            model: \"=\",\r\n            onClick: \"=\"\r\n        },\r\n        replace: true,\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n        $scope.isFocused = false;\r\n\r\n        $scope.onFocus = function () {\r\n            $scope.isFocused = true;\r\n        };\r\n\r\n        $scope.onBlur = function () {\r\n            $scope.isFocused = false;\r\n        };\r\n\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('hydraupdates', hydraupdates);\r\n\r\nfunction hydraupdates() {\r\n    controller.$inject = [\"$scope\", \"UpdateService\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/updates.html',\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, UpdateService) {\r\n\r\n        $scope.loadingPromise = UpdateService.getInfos().then(function (data) {\r\n            $scope.currentVersion = data.data.currentVersion;\r\n            $scope.repVersion = data.data.latestVersion;\r\n            $scope.updateAvailable = data.data.updateAvailable;\r\n            $scope.latestVersionIgnored = data.data.latestVersionIgnored;\r\n            $scope.changelog = data.data.changelog;\r\n        });\r\n\r\n        UpdateService.getVersionHistory().then(function (data) {\r\n            $scope.versionHistory = data.data;\r\n        });\r\n\r\n        $scope.update = function () {\r\n            UpdateService.update();\r\n        };\r\n\r\n        $scope.showChangelog = function () {\r\n            UpdateService.showChanges($scope.changelog);\r\n        };\r\n\r\n        $scope.forceUpdate = function () {\r\n            UpdateService.update()\r\n        };\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('hydraNews', hydraNews);\r\n\r\nfunction hydraNews() {\r\n    controller.$inject = [\"$scope\", \"$http\"];\r\n    return {\r\n        templateUrl: \"static/html/directives/news.html\",\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, $http) {\r\n\r\n        return $http.get(\"internalapi/news\").success(function (data) {\r\n            $scope.news = data;\r\n        });\r\n\r\n\r\n    }\r\n}\r\n\r\n","\r\nLogModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"entry\"];\r\nescapeHtml.$inject = [\"$sanitize\"];angular\r\n    .module('nzbhydraApp')\r\n    .directive('hydralog', hydralog);\r\n\r\nfunction hydralog() {\r\n    controller.$inject = [\"$scope\", \"$http\", \"$interval\", \"$uibModal\", \"$sce\", \"localStorageService\", \"growl\"];\r\n    return {\r\n        templateUrl: \"static/html/directives/log.html\",\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, $http, $interval, $uibModal, $sce, localStorageService, growl) {\r\n        $scope.tailInterval = null;\r\n        $scope.doUpdateLog = localStorageService.get(\"doUpdateLog\") !== null ? localStorageService.get(\"doUpdateLog\") : false;\r\n        $scope.doTailLog = localStorageService.get(\"doTailLog\") !== null ? localStorageService.get(\"doTailLog\") : false;\r\n\r\n        $scope.active = 0;\r\n        $scope.currentJsonIndex = 0;\r\n        $scope.hasMoreJsonLines = true;\r\n\r\n        function getLog(index) {\r\n            if ($scope.active === 0) {\r\n                return $http.get(\"internalapi/debuginfos/jsonlogs\", {params: {offset: index, limit: 500}}).success(function (data) {\r\n                    $scope.jsonLogLines = angular.fromJson(data.lines);\r\n                    $scope.hasMoreJsonLines = data.hasMore;\r\n                });\r\n            } else if ($scope.active === 1) {\r\n                return $http.get(\"internalapi/debuginfos/currentlogfile\").success(function (data) {\r\n                    $scope.log = $sce.trustAsHtml(data.replace(/&/g, \"&amp;\")\r\n                        .replace(/</g, \"&lt;\")\r\n                        .replace(/>/g, \"&gt;\")\r\n                        .replace(/\"/g, \"&quot;\")\r\n                        .replace(/'/g, \"&#039;\"));\r\n                }, function(data) {\r\n                    growl.error(data)\r\n                });\r\n            } else if ($scope.active === 2) {\r\n                return $http.get(\"internalapi/debuginfos/logfilenames\").success(function (data) {\r\n                    $scope.logfilenames = data;\r\n                });\r\n            }\r\n        }\r\n\r\n        $scope.logPromise = getLog();\r\n\r\n        $scope.select = function (index) {\r\n            $scope.active = index;\r\n            $scope.update();\r\n        };\r\n\r\n        $scope.scrollToBottom = function () {\r\n            document.getElementById(\"logfile\").scrollTop = 10000000;\r\n            document.getElementById(\"logfile\").scrollTop = 100001000;\r\n        };\r\n\r\n        $scope.update = function () {\r\n            getLog($scope.currentJsonIndex);\r\n            if ($scope.active === 1) {\r\n                $scope.scrollToBottom();\r\n            }\r\n        };\r\n\r\n        $scope.getOlderFormatted = function () {\r\n            getLog($scope.currentJsonIndex + 500).then(function () {\r\n                $scope.currentJsonIndex += 500;\r\n            });\r\n\r\n        };\r\n\r\n        $scope.getNewerFormatted = function () {\r\n            var index = Math.max($scope.currentJsonIndex - 500, 0);\r\n            getLog(index);\r\n            $scope.currentJsonIndex = index;\r\n        };\r\n\r\n        function startUpdateLogInterval() {\r\n            $scope.tailInterval = $interval(function () {\r\n                if ($scope.active === 1) {\r\n                    $scope.update();\r\n                    if ($scope.doTailLog && $scope.active === 1) {\r\n                        $scope.scrollToBottom();\r\n                    }\r\n                }\r\n            }, 5000);\r\n        }\r\n\r\n        $scope.toggleUpdate = function (doUpdateLog) {\r\n            $scope.doUpdateLog = doUpdateLog;\r\n            if ($scope.doUpdateLog) {\r\n                startUpdateLogInterval();\r\n            } else if ($scope.tailInterval !== null) {\r\n                console.log(\"Cancelling\");\r\n                $interval.cancel($scope.tailInterval);\r\n                localStorageService.set(\"doTailLog\", false);\r\n                $scope.doTailLog = false;\r\n            }\r\n            localStorageService.set(\"doUpdateLog\", $scope.doUpdateLog);\r\n        };\r\n\r\n        $scope.toggleTailLog = function () {\r\n            localStorageService.set(\"doTailLog\", $scope.doTailLog);\r\n        };\r\n\r\n        $scope.openModal = function openModal(entry) {\r\n            var modalInstance = $uibModal.open({\r\n                templateUrl: 'log-entry.html',\r\n                controller: LogModalInstanceCtrl,\r\n                size: \"xl\",\r\n                resolve: {\r\n                    entry: function () {\r\n                        return entry;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then();\r\n        };\r\n\r\n        $scope.$on('$destroy', function () {\r\n            if ($scope.tailInterval !== null) {\r\n                $interval.cancel($scope.tailInterval);\r\n            }\r\n        });\r\n\r\n        if ($scope.doUpdateLog) {\r\n            startUpdateLogInterval();\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('LogModalInstanceCtrl', LogModalInstanceCtrl);\r\n\r\nfunction LogModalInstanceCtrl($scope, $uibModalInstance, entry) {\r\n\r\n    $scope.entry = entry;\r\n\r\n    $scope.ok = function () {\r\n        $uibModalInstance.dismiss();\r\n    };\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .filter('formatTimestamp', formatTimestamp);\r\n\r\nfunction formatTimestamp() {\r\n    return function (date) {\r\n        return moment(date).local().format(\"YYYY-MM-DD HH:mm\");\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .filter('escapeHtml', escapeHtml);\r\n\r\nfunction escapeHtml($sanitize) {\r\n    return function (text) {\r\n        return $sanitize(text);\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .filter('formatClassname', formatClassname);\r\n\r\nfunction formatClassname() {\r\n    return function (fqn) {\r\n        return fqn.substr(fqn.lastIndexOf(\".\") + 1);\r\n\r\n    }\r\n}","angular\r\n    .module('nzbhydraApp').directive('focusOn', focusOn);\r\n\r\nfunction focusOn() {\r\n    return directive;\r\n\r\n    function directive(scope, elem, attr) {\r\n        scope.$on('focusOn', function (e, name) {\r\n            if (name === attr.focusOn) {\r\n                elem[0].focus();\r\n            }\r\n        });\r\n    }\r\n}\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('downloadNzbzipButton', downloadNzbzipButton);\r\n\r\nfunction downloadNzbzipButton() {\r\n    controller.$inject = [\"$scope\", \"growl\", \"$http\", \"FileDownloadService\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/download-nzbzip-button.html',\r\n        require: ['^searchResults'],\r\n        scope: {\r\n            searchResults: \"<\",\r\n            searchTitle: \"<\",\r\n            callback: \"&\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, growl, $http, FileDownloadService) {\r\n\r\n        $scope.download = function () {\r\n            if (angular.isUndefined($scope.searchResults) || $scope.searchResults.length === 0) {\r\n                growl.info(\"You should select at least one result...\");\r\n            } else {\r\n                var values = _.map($scope.searchResults, function (value) {\r\n                    return value.searchResultId;\r\n                });\r\n                var link = \"internalapi/nzbzip\";\r\n\r\n                var searchTitle;\r\n                if (angular.isDefined($scope.searchTitle)) {\r\n                    searchTitle = \" for \" + $scope.searchTitle.replace(\"[^a-zA-Z0-9.-]\", \"_\");\r\n                } else {\r\n                    searchTitle = \"\";\r\n                }\r\n                var filename = \"NZBHydra NZBs\" + searchTitle + \".zip\";\r\n                $http({method: \"post\", url: link, data: values}).success(function (response) {\r\n                    if (response.successful && response.zip !== null) {\r\n                        //FileDownloadService.sendFile($base64.decode(response.zip), filename);\r\n                        link = \"internalapi/nzbzipDownload\";\r\n                        FileDownloadService.downloadFile(link, filename, \"POST\", response.zipFilepath);\r\n                        if (angular.isDefined($scope.callback)) {\r\n                            $scope.callback({result:response.addedIds});\r\n                        }\r\n                        if (response.missedIds.length > 0) {\r\n                            growl.error(\"Unable to add \" + response.missedIds.length + \" out of \" + values.length + \" NZBs to ZIP\");\r\n                        }\r\n                    } else {\r\n                        growl.error(response.message);\r\n                    }\r\n                }).error(function (data, status, headers, config) {\r\n                    growl.error(status);\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('downloadNzbsButton', downloadNzbsButton);\r\n\r\nfunction downloadNzbsButton() {\r\n    controller.$inject = [\"$scope\", \"$http\", \"NzbDownloadService\", \"ConfigService\", \"growl\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/download-nzbs-button.html',\r\n        require: ['^searchResults'],\r\n        scope: {\r\n            searchResults: \"<\",\r\n            callback: \"&\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, $http, NzbDownloadService, ConfigService, growl) {\r\n\r\n        $scope.downloaders = NzbDownloadService.getEnabledDownloaders();\r\n        $scope.blackholeEnabled = ConfigService.getSafe().downloading.saveTorrentsTo !== null;\r\n\r\n        $scope.download = function (downloader) {\r\n            if (angular.isUndefined($scope.searchResults) || $scope.searchResults.length === 0) {\r\n                growl.info(\"You should select at least one result...\");\r\n            } else {\r\n\r\n                var didFilterOutResults = false;\r\n                var didKeepAnyResults = false;\r\n                var searchResults = _.filter($scope.searchResults, function (value) {\r\n                    if (value.downloadType === \"NZB\") {\r\n                        didKeepAnyResults = true;\r\n                        return true;\r\n                    } else {\r\n                        console.log(\"Not sending torrent result to downloader\");\r\n                        didFilterOutResults = true;\r\n                        return false;\r\n                    }\r\n                });\r\n                if (didFilterOutResults && !didKeepAnyResults) {\r\n                    growl.info(\"None of the selected results were NZBs. Adding aborted\");\r\n                    if (angular.isDefined($scope.callback)) {\r\n                        $scope.callback({result: []});\r\n                    }\r\n                    return;\r\n                } else if (didFilterOutResults && didKeepAnyResults) {\r\n                    growl.info(\"Some the selected results are torrent results which were skipped\");\r\n                }\r\n\r\n                var tos = _.map(searchResults, function(entry) {\r\n                    return {searchResultId: entry.searchResultId, originalCategory: entry.originalCategory}\r\n                });\r\n\r\n                NzbDownloadService.download(downloader, tos).then(function (response) {\r\n                    if (angular.isDefined(response.data)) {\r\n                        if (response !== \"dismissed\") {\r\n                            if (response.data.successful) {\r\n                                growl.info(\"Successfully added all NZBs\");\r\n                            } else {\r\n                                growl.error(response.data.message);\r\n                            }\r\n                        } else {\r\n                            growl.error(\"Error while adding NZBs\");\r\n                        }\r\n                        if (angular.isDefined($scope.callback)) {\r\n                            $scope.callback({result: response.data.addedIds});\r\n                        }\r\n                    }\r\n                }, function () {\r\n                    growl.error(\"Error while adding NZBs\");\r\n                });\r\n            }\r\n        };\r\n\r\n       $scope.sendToBlackhole = function() {\r\n           var didFilterOutResults = false;\r\n           var didKeepAnyResults = false;\r\n           var searchResults = _.filter($scope.searchResults, function (value) {\r\n               if (value.downloadType === \"TORRENT\") {\r\n                   didKeepAnyResults = true;\r\n                   return true;\r\n               } else {\r\n                   console.log(\"Not sending NZB result to black hole\");\r\n                   didFilterOutResults = true;\r\n                   return false;\r\n               }\r\n           });\r\n           if (didFilterOutResults && !didKeepAnyResults) {\r\n               growl.info(\"None of the selected results were torrents. Adding aborted\");\r\n               if (angular.isDefined($scope.callback)) {\r\n                   $scope.callback({result: []});\r\n               }\r\n               return;\r\n           } else if (didFilterOutResults && didKeepAnyResults) {\r\n               growl.info(\"Some the selected results are NZB results which were skipped\");\r\n           }\r\n           var searchResultIds = _.pluck(searchResults, \"searchResultId\");\r\n           $http.put(\"internalapi/saveTorrent\", searchResultIds).then(function (response) {\r\n               if (response.data.successful) {\r\n                   growl.info(\"Successfully saved all torrents\");\r\n               } else {\r\n                   growl.error(response.data.message);\r\n               }\r\n               if (angular.isDefined($scope.callback)) {\r\n                   $scope.callback({result: response.data.addedIds});\r\n               }\r\n           });\r\n       }\r\n\r\n    }\r\n}\r\n\r\n","\r\nfreetextFilter.$inject = [\"DebugService\"];\r\nbooleanFilter.$inject = [\"DebugService\"];angular\r\n    .module('nzbhydraApp').directive(\"columnFilterWrapper\", columnFilterWrapper);\r\n\r\nfunction columnFilterWrapper() {\r\n    controller.$inject = [\"$scope\", \"DebugService\"];\r\n    return {\r\n        restrict: \"E\",\r\n        templateUrl: 'static/html/dataTable/columnFilterOuter.html',\r\n        transclude: true,\r\n        controllerAs: 'columnFilterWrapperCtrl',\r\n        scope: true,\r\n        bindToController: true,\r\n        controller: controller,\r\n        link: function (scope, element, attr) {\r\n            scope.element = element;\r\n\r\n        }\r\n    };\r\n\r\n    function controller($scope, DebugService) {\r\n        var vm = this;\r\n\r\n        vm.open = false;\r\n        vm.isActive = false;\r\n\r\n        vm.toggle = function () {\r\n            vm.open = !vm.open;\r\n            if (vm.open) {\r\n                $scope.$broadcast(\"opened\");\r\n            }\r\n        };\r\n\r\n        vm.clear = function() {\r\n            if (vm.open) {\r\n                $scope.$broadcast(\"clear\");\r\n            }\r\n        };\r\n\r\n        $scope.$on(\"filter\", function (event, column, filterModel, isActive) {\r\n            vm.open = false;\r\n            vm.isActive = isActive;\r\n        });\r\n\r\n        DebugService.log(\"filter-wrapper\");\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nangular\r\n    .module('nzbhydraApp').directive(\"freetextFilter\", freetextFilter);\r\n\r\nfunction freetextFilter(DebugService) {\r\n    controller.$inject = [\"$scope\", \"focus\"];\r\n    return {\r\n        template: '<ng-include src=\"\\'static/html/dataTable/columnFilterFreetext.html\\'\"/>',\r\n        require: \"^columnFilterWrapper\",\r\n        controllerAs: 'innerController',\r\n        scope: {\r\n            column: \"@\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, focus) {\r\n        $scope.data = {};\r\n\r\n        $scope.$on(\"opened\", function () {\r\n            focus(\"freetext-filter-input\");\r\n        });\r\n\r\n        $scope.onKeypress = function (keyEvent) {\r\n            if (keyEvent.which === 13) {\r\n                $scope.$emit(\"filter\", $scope.column, {filterValue: $scope.data.filter, filterType: \"freetext\"}, angular.isDefined($scope.data.filter) && $scope.data.filter.length > 0);\r\n            }\r\n        };\r\n        DebugService.log(\"filter-freetext\");\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp').directive(\"checkboxesFilter\", checkboxesFilter);\r\n\r\nfunction checkboxesFilter() {\r\n    controller.$inject = [\"$scope\", \"DebugService\"];\r\n    return {\r\n        template: '<ng-include src=\"\\'static/html/dataTable/columnFilterCheckboxes.html\\'\"/>',\r\n        controllerAs: 'checkboxesFilterController',\r\n        scope: {\r\n            column: \"@\",\r\n            entries: \"<\",\r\n            preselect: \"<\",\r\n            showInvert: \"<\",\r\n            isBoolean: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, DebugService) {\r\n        $scope.selected = {\r\n            entries: []\r\n        };\r\n        $scope.active = false;\r\n\r\n        if ($scope.preselect) {\r\n            $scope.selected.entries.push.apply($scope.selected.entries, $scope.entries);\r\n        }\r\n\r\n        $scope.invert = function () {\r\n            $scope.selected.entries = _.difference($scope.entries, $scope.selected.entries);\r\n        };\r\n\r\n        $scope.selectAll = function () {\r\n            $scope.selected.entries.push.apply($scope.selected.entries, $scope.entries);\r\n        };\r\n\r\n        $scope.deselectAll = function () {\r\n            $scope.selected.entries.splice(0, $scope.selected.entries.length);\r\n        };\r\n\r\n        $scope.apply = function () {\r\n            $scope.active =   $scope.selected.entries.length < $scope.entries.length;\r\n            $scope.$emit(\"filter\", $scope.column, {filterValue: _.pluck($scope.selected.entries, \"id\"), filterType: \"checkboxes\", isBoolean: $scope.isBoolean}, $scope.active)\r\n        };\r\n        $scope.clear = function () {\r\n\r\n            $scope.selectAll();\r\n            $scope.active = false;\r\n            $scope.$emit(\"filter\", $scope.column, {filterValue: undefined, filterType: \"checkboxes\", isBoolean: $scope.isBoolean}, $scope.active)\r\n        };\r\n        $scope.$on(\"clear\", $scope.clear);\r\n        DebugService.log(\"filter-checkboxes\");\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp').directive(\"booleanFilter\", booleanFilter);\r\n\r\nfunction booleanFilter(DebugService) {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        template: '<ng-include src=\"\\'static/html/dataTable/columnFilterBoolean.html\\'\"/>',\r\n        controllerAs: 'booleanFilterController',\r\n        scope: {\r\n            column: \"@\",\r\n            options: \"<\",\r\n            preselect: \"@\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n\r\n    function controller($scope) {\r\n        $scope.selected = {value: $scope.options[$scope.preselect].value};\r\n        $scope.active = false;\r\n\r\n        $scope.apply = function () {\r\n            $scope.active = $scope.selected.value !== $scope.options[0].value;\r\n            $scope.$emit(\"filter\", $scope.column, {filterValue: $scope.selected.value, filterType: \"boolean\"}, $scope.active)\r\n        };\r\n        $scope.clear = function () {\r\n            $scope.selected.value = true;\r\n            $scope.active = false;\r\n            $scope.$emit(\"filter\", $scope.column, {filterValue: undefined, filterType: \"boolean\"}, $scope.active)\r\n        };\r\n        $scope.$on(\"clear\", $scope.clear);\r\n        DebugService.log(\"filter-boolean\");\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp').directive(\"timeFilter\", timeFilter);\r\n\r\nfunction timeFilter() {\r\n    controller.$inject = [\"$scope\", \"DebugService\"];\r\n    return {\r\n        template: '<ng-include src=\"\\'static/html/dataTable/columnFilterTime.html\\'\"/>',\r\n        scope: {\r\n            column: \"@\",\r\n            selected: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, DebugService) {\r\n\r\n        $scope.dateOptions = {\r\n            dateDisabled: false,\r\n            formatYear: 'yy',\r\n            startingDay: 1\r\n        };\r\n\r\n        $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];\r\n        $scope.format = $scope.formats[0];\r\n        $scope.altInputFormats = ['M!/d!/yyyy'];\r\n        $scope.active = false;\r\n\r\n        $scope.openAfter = function () {\r\n            $scope.after.opened = true;\r\n        };\r\n\r\n        $scope.openBefore = function () {\r\n            $scope.before.opened = true;\r\n        };\r\n\r\n        $scope.after = {\r\n            opened: false\r\n        };\r\n\r\n        $scope.before = {\r\n            opened: false\r\n        };\r\n\r\n        $scope.apply = function () {\r\n            $scope.active = $scope.selected.beforeDate || $scope.selected.afterDate;\r\n            $scope.$emit(\"filter\", $scope.column, {filterValue: {after: $scope.selected.afterDate, before: $scope.selected.beforeDate}, filterType: \"time\"}, $scope.active)\r\n        };\r\n        $scope.clear = function () {\r\n            $scope.selected.beforeDate = undefined;\r\n            $scope.selected.afterDate = undefined;\r\n            $scope.active = false;\r\n            $scope.$emit(\"filter\", $scope.column, {filterValue: undefined, filterType: \"time\"}, $scope.active)\r\n        };\r\n        $scope.$on(\"clear\", $scope.clear);\r\n        DebugService.log(\"filter-time\");\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp').directive(\"numberRangeFilter\", numberRangeFilter);\r\n\r\nfunction numberRangeFilter() {\r\n    controller.$inject = [\"$scope\", \"DebugService\"];\r\n    return {\r\n        template: '<ng-include src=\"\\'static/html/dataTable/columnFilterNumberRange.html\\'\"/>',\r\n        scope: {\r\n            column: \"@\",\r\n            min: \"<\",\r\n            max: \"<\",\r\n            addon: \"@\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, DebugService) {\r\n        $scope.filterValue = {min: undefined, max: undefined};\r\n        $scope.active = false;\r\n\r\n        function apply() {\r\n            $scope.active = $scope.filterValue.min || $scope.filterValue.max;\r\n            $scope.$emit(\"filter\", $scope.column, {filterValue: $scope.filterValue, filterType: \"numberRange\"}, $scope.active)\r\n        }\r\n        $scope.clear = function () {\r\n            $scope.filterValue = {min: undefined, max: undefined};\r\n            $scope.active = false;\r\n            $scope.$emit(\"filter\", $scope.column, {filterValue: undefined, filterType: \"numberRange\", isBoolean: $scope.isBoolean}, $scope.active)\r\n        };\r\n        $scope.$on(\"clear\", $scope.clear);\r\n\r\n        $scope.apply = function () {\r\n            apply();\r\n        };\r\n\r\n        $scope.onKeypress = function (keyEvent) {\r\n            if (keyEvent.which === 13) {\r\n                apply();\r\n            }\r\n        }\r\n\r\n        DebugService.log(\"filter-number\");\r\n    }\r\n}\r\n\r\n\r\nangular\r\n    .module('nzbhydraApp').directive(\"columnSortable\", columnSortable);\r\n\r\nfunction columnSortable() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        restrict: \"E\",\r\n        templateUrl: \"static/html/dataTable/columnSortable.html\",\r\n        transclude: true,\r\n        scope: {\r\n            sortMode: \"<\", //0: no sorting, 1: asc, 2: desc\r\n            column: \"@\",\r\n            reversed: \"<\",\r\n            startMode: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n        if (angular.isUndefined($scope.sortMode)) {\r\n            $scope.sortMode = 0;\r\n        }\r\n\r\n        if (angular.isUndefined($scope.startMode)) {\r\n            $scope.startMode = 1;\r\n        }\r\n\r\n        $scope.sortModel = {\r\n            sortMode: $scope.sortMode,\r\n            column: $scope.column,\r\n            reversed: $scope.reversed,\r\n            startMode: $scope.startMode,\r\n            active: false\r\n        };\r\n\r\n        $scope.$on(\"newSortColumn\", function (event, column, sortMode) {\r\n            $scope.sortModel.active = column === $scope.sortModel.column;\r\n            if (column !== $scope.sortModel.column) {\r\n                $scope.sortModel.sortMode = 0;\r\n            } else {\r\n                $scope.sortModel.sortMode = sortMode;\r\n            }\r\n        });\r\n\r\n        $scope.sort = function () {\r\n            if ($scope.sortModel.sortMode === 0 || angular.isUndefined($scope.sortModel.sortMode)) {\r\n                $scope.sortModel.sortMode = $scope.sortModel.startMode;\r\n            } else if ($scope.sortModel.sortMode === 1) {\r\n                $scope.sortModel.sortMode = 2;\r\n            } else {\r\n                $scope.sortModel.sortMode = 1;\r\n            }\r\n            $scope.$emit(\"sort\", $scope.sortModel.column, $scope.sortModel.sortMode, $scope.sortModel.reversed)\r\n        };\r\n\r\n    }\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('connectionTest', connectionTest);\r\n\r\nfunction connectionTest() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/connection-test.html',\r\n        require: ['^type', '^data'],\r\n        scope: {\r\n            type: \"=\",\r\n            id: \"=\",\r\n            data: \"=\",\r\n            downloader: \"=\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n        $scope.message = \"\";\r\n\r\n\r\n        var testButton = \"#button-test-connection\";\r\n        var testMessage = \"#message-test-connection\";\r\n\r\n        function showSuccess() {\r\n            angular.element(testButton).removeClass(\"btn-default\");\r\n            angular.element(testButton).removeClass(\"btn-danger\");\r\n            angular.element(testButton).addClass(\"btn-success\");\r\n        }\r\n\r\n        function showError() {\r\n            angular.element(testButton).removeClass(\"btn-default\");\r\n            angular.element(testButton).removeClass(\"btn-success\");\r\n            angular.element(testButton).addClass(\"btn-danger\");\r\n        }\r\n\r\n        $scope.testConnection = function () {\r\n            angular.element(testButton).addClass(\"glyphicon-refresh-animate\");\r\n            var myInjector = angular.injector([\"ng\"]);\r\n            var $http = myInjector.get(\"$http\");\r\n            var url;\r\n            var params;\r\n            if ($scope.type === \"downloader\") {\r\n                url = \"internalapi/test_downloader\";\r\n                params = {name: $scope.downloader, username: $scope.data.username, password: $scope.data.password};\r\n                if ($scope.downloader === \"SABNZBD\") {\r\n                    params.apiKey = $scope.data.apiKey;\r\n                    params.url = $scope.data.url;\r\n                } else {\r\n                    params.host = $scope.data.host;\r\n                    params.port = $scope.data.port;\r\n                    params.ssl = $scope.data.ssl;\r\n                }\r\n            } else if ($scope.data.type === \"newznab\") {\r\n                url = \"internalapi/test_newznab\";\r\n                params = {host: $scope.data.host, apiKey: $scope.data.apiKey};\r\n                if (angular.isDefined($scope.data.username)) {\r\n                    params[\"username\"] = $scope.data.username;\r\n                    params[\"password\"] = $scope.data.password;\r\n                }\r\n            }\r\n            $http.get(url, {params: params}).success(function (result) {\r\n                //Using ng-class and a scope variable doesn't work for some reason, is only updated at second click \r\n                if (result.successful) {\r\n                    angular.element(testMessage).text(\"\");\r\n                    showSuccess();\r\n                } else {\r\n                    angular.element(testMessage).text(result.message);\r\n                    showError();\r\n                }\r\n\r\n            }).error(function () {\r\n                angular.element(testMessage).text(result.message);\r\n                showError();\r\n            }).finally(function () {\r\n                angular.element(testButton).removeClass(\"glyphicon-refresh-animate\");\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n\r\n","//Taken from https://github.com/IamAdamJowett/angular-click-outside\r\n\r\n    clickOutside.$inject = [\"$document\", \"$parse\", \"$timeout\"];\r\nfunction childOf(/*child node*/c, /*parent node*/p){ //returns boolean\r\n    while((c=c.parentNode)&&c!==p);\r\n    return !!c;\r\n};\r\n\r\n    angular\r\n        .module('nzbhydraApp').directive(\"clickOutside\", clickOutside);\r\n\r\n    /**\r\n     * @ngdoc directive\r\n     * @name angular-click-outside.directive:clickOutside\r\n     * @description Directive to add click outside capabilities to DOM elements\r\n     * @requires $document\r\n     * @requires $parse\r\n     * @requires $timeout\r\n     **/\r\n    function clickOutside($document, $parse, $timeout) {\r\n        return {\r\n            restrict: 'A',\r\n            link: function($scope, elem, attr) {\r\n\r\n                // postpone linking to next digest to allow for unique id generation\r\n                $timeout(function() {\r\n                    var classList = (attr.outsideIfNot !== undefined) ? attr.outsideIfNot.split(/[ ,]+/) : [],\r\n                        fn;\r\n\r\n                    function eventHandler(e) {\r\n                        var i,\r\n                            element,\r\n                            r,\r\n                            id,\r\n                            classNames,\r\n                            l;\r\n\r\n                        // check if our element already hidden and abort if so\r\n                        if (angular.element(elem).hasClass(\"ng-hide\")) {\r\n                            return;\r\n                        }\r\n\r\n                        // if there is no click target, no point going on\r\n                        if (!e || !e.target) {\r\n                            return;\r\n                        }\r\n\r\n                        if (angular.isDefined(attr.outsideIgnore) && $scope.$eval(attr.outsideIgnore)) {\r\n                            return;\r\n                        }\r\n                        var isChild = childOf(e.target, elem.context);\r\n                        if (isChild) {\r\n                            return;\r\n                        }\r\n                        // loop through the available elements, looking for classes in the class list that might match and so will eat\r\n                        for (element = e.target; element; element = element.parentNode) {\r\n                            // check if the element is the same element the directive is attached to and exit if so (props @CosticaPuntaru)\r\n                            if (element === elem[0]) {\r\n                                return;\r\n                            }\r\n\r\n                            // now we have done the initial checks, start gathering id's and classes\r\n                            id = element.id,\r\n                                classNames = element.className,\r\n                                l = classList.length;\r\n\r\n                            // Unwrap SVGAnimatedString classes\r\n                            if (classNames && classNames.baseVal !== undefined) {\r\n                                classNames = classNames.baseVal;\r\n                            }\r\n\r\n                            // if there are no class names on the element clicked, skip the check\r\n                            if (classNames || id) {\r\n\r\n                                // loop through the elements id's and classnames looking for exceptions\r\n                                for (i = 0; i < l; i++) {\r\n                                    //prepare regex for class word matching\r\n                                    r = new RegExp('\\\\b' + classList[i] + '\\\\b');\r\n\r\n                                    // check for exact matches on id's or classes, but only if they exist in the first place\r\n                                    if ((id !== undefined && id === classList[i]) || (classNames && r.test(classNames))) {\r\n                                        // now let's exit out as it is an element that has been defined as being ignored for clicking outside\r\n                                        return;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // if we have got this far, then we are good to go with processing the command passed in via the click-outside attribute\r\n                        $timeout(function() {\r\n                            fn = $parse(attr['clickOutside']);\r\n                            fn($scope, { event: e });\r\n                        });\r\n                    }\r\n\r\n                    // if the devices has a touchscreen, listen for this event\r\n                    if (_hasTouch()) {\r\n                        $document.on('touchstart', eventHandler);\r\n                    }\r\n\r\n                    // still listen for the click event even if there is touch to cater for touchscreen laptops\r\n                    $document.on('click', eventHandler);\r\n\r\n                    // when the scope is destroyed, clean up the documents event handlers as we don't want it hanging around\r\n                    $scope.$on('$destroy', function() {\r\n                        if (_hasTouch()) {\r\n                            $document.off('touchstart', eventHandler);\r\n                        }\r\n\r\n                        $document.off('click', eventHandler);\r\n                    });\r\n\r\n                    /**\r\n                     * @description Private function to attempt to figure out if we are on a touch device\r\n                     * @private\r\n                     **/\r\n                    function _hasTouch() {\r\n                        // works on most browsers, IE10/11 and Surface\r\n                        return 'ontouchstart' in window || navigator.maxTouchPoints;\r\n                    };\r\n                });\r\n            }\r\n        };\r\n    }\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('cfgFormEntry', cfgFormEntry);\r\n\r\nfunction cfgFormEntry() {\r\n    return {\r\n        templateUrl: 'static/html/directives/cfg-form-entry.html',\r\n        require: [\"^title\", \"^cfg\"],\r\n        scope: {\r\n            title: \"@\",\r\n            cfg: \"=\",\r\n            help: \"@\",\r\n            type: \"@?\",\r\n            options: \"=?\"\r\n        },\r\n        controller: [\"$scope\", \"$element\", \"$attrs\", function ($scope, $element, $attrs) {\r\n            $scope.type = angular.isDefined($scope.type) ? $scope.type : 'text';\r\n            $scope.options = angular.isDefined($scope.type) ? $scope.$eval($attrs.options) : [];\r\n        }]\r\n    };\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('hydrabackup', hydrabackup);\r\n\r\nfunction hydrabackup() {\r\n    controller.$inject = [\"$scope\", \"BackupService\", \"Upload\", \"FileDownloadService\", \"$http\", \"RequestsErrorHandler\", \"growl\", \"RestartService\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/backup.html',\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, BackupService, Upload, FileDownloadService, $http, RequestsErrorHandler, growl, RestartService) {\r\n        $scope.refreshBackupList = function () {\r\n            BackupService.getBackupsList().then(function (backups) {\r\n                $scope.backups = backups;\r\n            });\r\n        };\r\n\r\n        $scope.refreshBackupList();\r\n\r\n        $scope.uploadActive = false;\r\n\r\n\r\n        $scope.createBackupFile = function () {\r\n            $http.get(\"internalapi/backup/backuponly\", {params: {dontdownload: true}}).then(function () {\r\n                $scope.refreshBackupList();\r\n            });\r\n        };\r\n        $scope.createAndDownloadBackupFile = function () {\r\n            FileDownloadService.downloadFile(\"internalapi/backup/backup\", \"nzbhydra-backup-\" + moment().format(\"YYYY-MM-DD-HH-mm\") + \".zip\", \"GET\").then(function () {\r\n                $scope.refreshBackupList();\r\n            });\r\n        };\r\n\r\n        $scope.uploadBackupFile = function (file, errFiles) {\r\n            RequestsErrorHandler.specificallyHandled(function () {\r\n\r\n                $scope.file = file;\r\n                $scope.errFile = errFiles && errFiles[0];\r\n                if (file) {\r\n                    $scope.uploadActive = true;\r\n                    file.upload = Upload.upload({\r\n                        url: 'internalapi/backup/restorefile',\r\n                        file: file\r\n                    });\r\n\r\n                    file.upload.then(function (response) {\r\n                        $scope.uploadActive = false;\r\n                        file.result = response.data;\r\n                        RestartService.restart(\"Restore successful.\");\r\n\r\n                    }, function (response) {\r\n                        $scope.uploadActive = false;\r\n                        growl.error(response.data)\r\n                    }, function (evt) {\r\n                        file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));\r\n                        file.loaded = Math.floor(evt.loaded / 1024);\r\n                        file.total = Math.floor(evt.total / 1024);\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        $scope.restoreFromFile = function (filename) {\r\n            BackupService.restoreFromFile(filename).then(function () {\r\n                    RestartService.restart(\"Extraction of backup successful. Restarting for wrapper to restore data.\");\r\n                },\r\n                function (response) {\r\n                    growl.error(response.data);\r\n                })\r\n        }\r\n\r\n    }\r\n}\r\n\r\n","\r\naddableNzbs.$inject = [\"DebugService\"];angular\r\n    .module('nzbhydraApp')\r\n    .directive('addableNzbs', addableNzbs);\r\n\r\nfunction addableNzbs(DebugService) {\r\n    controller.$inject = [\"$scope\", \"NzbDownloadService\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/addable-nzbs.html',\r\n        require: [],\r\n        scope: {\r\n            searchresult: \"<\",\r\n            alwaysAsk: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, NzbDownloadService) {\r\n        $scope.alwaysAsk = $scope.alwaysAsk === \"true\";\r\n        console.log($scope.alwaysAsk);\r\n        $scope.downloaders = _.filter(NzbDownloadService.getEnabledDownloaders(), function (downloader) {\r\n            if ($scope.searchresult.downloadType !== \"NZB\") {\r\n                return downloader.downloadType === $scope.searchresult.downloadType\r\n            }\r\n            return true;\r\n        });\r\n\r\n        DebugService.log(\"addable-nzbs\");\r\n    }\r\n}\r\n","\r\naddableNzb.$inject = [\"DebugService\"];angular\r\n    .module('nzbhydraApp')\r\n    .directive('addableNzb', addableNzb);\r\n\r\nfunction addableNzb(DebugService) {\r\n    controller.$inject = [\"$scope\", \"NzbDownloadService\", \"growl\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/addable-nzb.html',\r\n        scope: {\r\n            searchresult: \"=\",\r\n            downloader: \"<\",\r\n            alwaysAsk: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, NzbDownloadService, growl) {\r\n        if ($scope.downloader.iconCssClass) {\r\n            $scope.cssClass = \"fa fa-\" + $scope.downloader.iconCssClass.replace(\"fa-\", \"\").replace(\"fa \", \"\");\r\n        } else {\r\n            $scope.cssClass = $scope.downloader.downloaderType === \"SABNZBD\" ? \"sabnzbd\" : \"nzbget\";\r\n        }\r\n\r\n        $scope.add = function () {\r\n            var originalClass = $scope.cssClass;\r\n            $scope.cssClass = \"nzb-spinning\";\r\n            NzbDownloadService.download($scope.downloader, [{\r\n                searchResultId: $scope.searchresult.searchResultId ? $scope.searchresult.searchResultId : $scope.searchresult.id,\r\n                originalCategory: $scope.searchresult.originalCategory}], $scope.alwaysAsk).then(function (response) {\r\n                if (response !== \"dismissed\") {\r\n                    if (response.data.successful) {\r\n                        $scope.cssClass = $scope.downloader.downloaderType === \"SABNZBD\" ? \"sabnzbd-success\" : \"nzbget-success\";\r\n                    } else {\r\n                        $scope.cssClass = $scope.downloader.downloaderType === \"SABNZBD\" ? \"sabnzbd-error\" : \"nzbget-error\";\r\n                        growl.error(\"Unable to add NZB. Make sure the downloader is running and properly configured.\");\r\n                    }\r\n                } else {\r\n                    $scope.cssClass = originalClass;\r\n                }\r\n            }, function () {\r\n                $scope.cssClass = $scope.downloader.downloaderType === \"SABNZBD\" ? \"sabnzbd-error\" : \"nzbget-error\";\r\n                growl.error(\"An unexpected error occurred while trying to contact NZBHydra or add the NZB.\");\r\n            })\r\n        };\r\n    }\r\n}\r\n","\r\nUpdateService.$inject = [\"$http\", \"growl\", \"blockUI\", \"RestartService\", \"RequestsErrorHandler\", \"$uibModal\", \"$timeout\"];\r\nUpdateModalInstanceCtrl.$inject = [\"$scope\", \"$http\", \"$interval\", \"RequestsErrorHandler\"];angular\r\n    .module('nzbhydraApp')\r\n    .factory('UpdateService', UpdateService);\r\n\r\nfunction UpdateService($http, growl, blockUI, RestartService, RequestsErrorHandler, $uibModal, $timeout) {\r\n\r\n    var currentVersion;\r\n    var latestVersion;\r\n    var updateAvailable;\r\n    var latestVersionIgnored;\r\n    var versionHistory\r\n    ;\r\n\r\n\r\n    return {\r\n        update: update,\r\n        showChanges: showChanges,\r\n        getInfos: getInfos,\r\n        getVersionHistory: getVersionHistory,\r\n        ignore: ignore\r\n    };\r\n\r\n    function getInfos() {\r\n        return RequestsErrorHandler.specificallyHandled(function () {\r\n            return $http.get(\"internalapi/updates/infos\").then(\r\n                function (data) {\r\n                    currentVersion = data.data.currentVersion;\r\n                    latestVersion = data.data.latestVersion;\r\n                    updateAvailable = data.data.updateAvailable;\r\n                    latestVersionIgnored = data.data.latestVersionIgnored;\r\n                    return data;\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n\r\n    function ignore(version) {\r\n        return $http.put(\"internalapi/updates/ignore?version=\" + version).then(function (data) {\r\n            return data;\r\n        });\r\n    }\r\n\r\n    function getVersionHistory() {\r\n        return $http.get(\"internalapi/updates/versionHistory\").then(function (data) {\r\n            versionHistory = data.data;\r\n            return data;\r\n        });\r\n    }\r\n\r\n    function showChanges() {\r\n        return $http.get(\"internalapi/updates/changesSince\").then(function (response) {\r\n            var params = {\r\n                size: \"lg\",\r\n                templateUrl: \"static/html/changelog-modal.html\",\r\n                resolve: {\r\n                    versionHistory: function () {\r\n                        return response.data;\r\n                    }\r\n                },\r\n                controller: function ($scope, $sce, $uibModalInstance, versionHistory) {\r\n                    $scope.versionHistory = versionHistory;\r\n\r\n                    $scope.ok = function () {\r\n                        $uibModalInstance.dismiss();\r\n                    };\r\n                }\r\n            };\r\n\r\n            var modalInstance = $uibModal.open(params);\r\n            modalInstance.result.then();\r\n        });\r\n    }\r\n\r\n\r\n    function update() {\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'static/html/update-modal.html',\r\n            controller: 'UpdateModalInstanceCtrl',\r\n            size: \"md\",\r\n            backdrop: 'static',\r\n            keyboard: false\r\n        });\r\n        $http.put(\"internalapi/updates/installUpdate\").then(function () {\r\n                //Handle like restart, ping application and wait\r\n                //Perhaps save the version to which we want to update, ask later and see if they're equal. If not updating apparently failed...\r\n                $timeout(function () {\r\n                    //Give user some time to read the last message\r\n                    RestartService.startCountdown(\"\");\r\n                    modalInstance.close();\r\n                }, 2000);\r\n            },\r\n            function () {\r\n                growl.info(\"An error occurred while updating. Please check the logs.\");\r\n                modalInstance.close();\r\n            });\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('UpdateModalInstanceCtrl', UpdateModalInstanceCtrl);\r\n\r\nfunction UpdateModalInstanceCtrl($scope, $http, $interval, RequestsErrorHandler) {\r\n    $scope.messages = [];\r\n\r\n    var interval = $interval(function () {\r\n            RequestsErrorHandler.specificallyHandled(function () {\r\n                $http.get(\"internalapi/updates/messages\").then(\r\n                    function (data) {\r\n                        $scope.messages = data.data;\r\n                    }\r\n                );\r\n            });\r\n        },\r\n        200);\r\n\r\n    $scope.$on('$destroy', function () {\r\n        if (interval !== null) {\r\n            $interval.cancel(interval);\r\n        }\r\n    });\r\n\r\n}","\r\nUpdateFooterController.$inject = [\"$scope\", \"UpdateService\", \"RequestsErrorHandler\", \"HydraAuthService\", \"$http\", \"$uibModal\", \"ConfigService\"];\r\nNewsModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"news\"];\r\nWelcomeModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"$state\", \"MigrationService\"];angular\r\n    .module('nzbhydraApp')\r\n    .controller('UpdateFooterController', UpdateFooterController);\r\n\r\nfunction UpdateFooterController($scope, UpdateService, RequestsErrorHandler, HydraAuthService, $http, $uibModal, ConfigService) {\r\n\r\n    $scope.updateAvailable = false;\r\n    $scope.checked = false;\r\n    var welcomeIsBeingShown = false;\r\n\r\n    $scope.mayUpdate = HydraAuthService.getUserInfos().maySeeAdmin;\r\n\r\n    $scope.$on(\"user:loggedIn\", function () {\r\n        if (HydraAuthService.getUserInfos().maySeeAdmin && !$scope.checked) {\r\n            retrieveUpdateInfos();\r\n        }\r\n    });\r\n\r\n\r\n    if ($scope.mayUpdate) {\r\n        retrieveUpdateInfos();\r\n    }\r\n\r\n    function retrieveUpdateInfos() {\r\n        $scope.checked = true;\r\n        UpdateService.getInfos().then(function (data) {\r\n            $scope.currentVersion = data.data.currentVersion;\r\n            $scope.latestVersion = data.data.latestVersion;\r\n            $scope.updateAvailable = data.data.updateAvailable;\r\n            $scope.changelog = data.data.changelog;\r\n        });\r\n    }\r\n\r\n\r\n    $scope.update = function () {\r\n        UpdateService.update();\r\n    };\r\n\r\n    $scope.ignore = function () {\r\n        UpdateService.ignore($scope.latestVersion);\r\n    };\r\n\r\n    $scope.showChangelog = function () {\r\n        UpdateService.showChanges();\r\n    };\r\n\r\n    function checkAndShowNews() {\r\n        RequestsErrorHandler.specificallyHandled(function () {\r\n            if (ConfigService.getSafe().showNews) {\r\n                $http.get(\"internalapi/news/forcurrentversion\").then(function (data) {\r\n                    if (data && data.length > 0) {\r\n                        $uibModal.open({\r\n                            templateUrl: 'static/html/news-modal.html',\r\n                            controller: NewsModalInstanceCtrl,\r\n                            size: \"lg\",\r\n                            resolve: {\r\n                                news: function () {\r\n                                    return data;\r\n                                }\r\n                            }\r\n                        });\r\n                        $http.put(\"internalapi/news/saveshown\");\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    function checkAndShowWelcome() {\r\n        RequestsErrorHandler.specificallyHandled(function () {\r\n            $http.get(\"internalapi/welcomeshown\").success(function (wasWelcomeShown) {\r\n                if (!wasWelcomeShown) {\r\n                    $http.put(\"internalapi/welcomeshown\");\r\n                    var promise = $uibModal.open({\r\n                        templateUrl: 'static/html/welcome-modal.html',\r\n                        controller: WelcomeModalInstanceCtrl,\r\n                        size: \"md\"\r\n                    });\r\n                    promise.opened.then(function () {\r\n                        welcomeIsBeingShown = true;\r\n                    });\r\n                    promise.closed.then(function () {\r\n                        welcomeIsBeingShown = false;\r\n                    });\r\n                } else {\r\n                    _.defer(checkAndShowNews);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    checkAndShowWelcome();\r\n\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('NewsModalInstanceCtrl', NewsModalInstanceCtrl);\r\n\r\nfunction NewsModalInstanceCtrl($scope, $uibModalInstance, news) {\r\n    $scope.news = news;\r\n    $scope.close = function () {\r\n        $uibModalInstance.dismiss();\r\n    };\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('WelcomeModalInstanceCtrl', WelcomeModalInstanceCtrl);\r\n\r\nfunction WelcomeModalInstanceCtrl($scope, $uibModalInstance, $state, MigrationService) {\r\n    $scope.close = function () {\r\n        $uibModalInstance.dismiss();\r\n    };\r\n\r\n    $scope.startMigration = function () {\r\n        $uibModalInstance.dismiss();\r\n        MigrationService.migrate();\r\n    };\r\n\r\n    $scope.goToConfig = function () {\r\n        $uibModalInstance.dismiss();\r\n        $state.go(\"root.config.main\");\r\n    }\r\n}","\nSystemController.$inject = [\"$scope\", \"$state\", \"activeTab\", \"$http\", \"growl\", \"RestartService\", \"MigrationService\", \"ConfigService\", \"NzbHydraControlService\"];angular\n    .module('nzbhydraApp')\n    .controller('SystemController', SystemController);\n\nfunction SystemController($scope, $state, activeTab, $http, growl, RestartService, MigrationService, ConfigService, NzbHydraControlService) {\n\n    $scope.activeTab = activeTab;\n    $scope.foo = {\n        csv: \"\",\n        sql: \"\"\n    };\n\n    $scope.shutdown = function () {\n        NzbHydraControlService.shutdown().then(function () {\n                growl.info(\"Shutdown initiated. Cya!\");\n            },\n            function () {\n                growl.info(\"Unable to send shutdown command.\");\n            })\n    };\n\n    $scope.restart = function () {\n        RestartService.restart();\n    };\n\n    $scope.reloadConfig = function () {\n        ConfigService.reloadConfig().then(function () {\n            growl.info(\"Successfully reloaded config. Some setting may need a restart to take effect.\")\n        }, function (data) {\n            growl.error(data.message);\n        })\n    };\n\n\n    $scope.migrate = function () {\n        MigrationService.migrate();\n    };\n\n\n    $scope.allTabs = [\n        {\n            active: false,\n            state: 'root.system.control',\n            name: \"Control\"\n        },\n        {\n            active: false,\n            state: 'root.system.updates',\n            name: \"Updates\"\n        },\n        {\n            active: false,\n            state: 'root.system.log',\n            name: \"Log\"\n        },\n        {\n            active: false,\n            state: 'root.system.tasks',\n            name: \"Tasks\"\n        },\n        {\n            active: false,\n            state: 'root.system.backup',\n            name: \"Backup\"\n        },\n        {\n            active: false,\n            state: 'root.system.bugreport',\n            name: \"Bugreport / Debug\"\n        },\n        {\n            active: false,\n            state: 'root.system.news',\n            name: \"News\"\n        },\n        {\n            active: false,\n            state: 'root.system.about',\n            name: \"About\"\n        }\n    ];\n\n\n    $scope.goToSystemState = function (index) {\n        $state.go($scope.allTabs[index].state, {activeTab: index}, {inherit: false, notify: true, reload: true});\n    };\n\n    $scope.downloadDebuggingInfos = function () {\n        $http({method: 'GET', url: 'internalapi/debuginfos/logandconfig', responseType: 'arraybuffer'}).success(function (data, status, headers, config) {\n            var a = document.createElement('a');\n            var blob = new Blob([data], {'type': \"application/octet-stream\"});\n            a.href = URL.createObjectURL(blob);\n            a.download = \"nzbhydra-debuginfos-\" + moment().format(\"YYYY-MM-DD-HH-mm\") + \".zip\";\n\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n        });\n    };\n\n    $scope.executeSqlQuery = function () {\n        $http.post('internalapi/debuginfos/executesqlquery', $scope.foo.sql).success(function (data) {\n            if (data.successful) {\n                $scope.foo.csv = data.message;\n            } else {\n                growl.error(data.message);\n            }\n        });\n    };\n\n    $scope.executeSqlUpdate = function () {\n        $http.post('internalapi/debuginfos/executesqlupdate', $scope.foo.sql).success(function (data) {\n            if (data.successful) {\n                $scope.foo.csv = data.message + \" rows affected\";\n            } else {\n                growl.error(data.message);\n            }\n        });\n    };\n\n\n}","\r\nStatsService.$inject = [\"$http\"];angular\r\n    .module('nzbhydraApp')\r\n    .factory('StatsService', StatsService);\r\n\r\nfunction StatsService($http) {\r\n\r\n    return {\r\n        get: getStats,\r\n        getDownloadHistory: getDownloadHistory\r\n    };\r\n\r\n    function getStats(after, before, includeDisabled, switchState) {\r\n        var requestBody = {after: after, before: before, includeDisabled: includeDisabled};\r\n        requestBody = _.extend(requestBody, switchState);\r\n        return $http.post(\"internalapi/stats\", requestBody).success(function (response) {\r\n            return response.data;\r\n        });\r\n    }\r\n\r\n    function getDownloadHistory(pageNumber, limit, filterModel, sortModel) {\r\n        var params = {page: pageNumber, limit: limit, filterModel: filterModel};\r\n        if (angular.isUndefined(pageNumber)) {\r\n            params.page = 1;\r\n        }\r\n        if (angular.isUndefined(limit)) {\r\n            params.limit = 100;\r\n        }\r\n        if (angular.isUndefined(filterModel)) {\r\n            params.filterModel = {}\r\n        }\r\n        if (!angular.isUndefined(sortModel)) {\r\n            params.sortModel = sortModel;\r\n        } else {\r\n            params.sortModel = {\r\n                column: \"time\",\r\n                sortMode: 2\r\n            };\r\n        }\r\n        return $http.post(\"internalapi/history/downloads\", params).success(function (response) {\r\n            return {\r\n                nzbDownloads: response.content,\r\n                totalDownloads: response.totalElements\r\n            };\r\n\r\n        });\r\n    }\r\n\r\n}","\r\nStatsController.$inject = [\"$scope\", \"$filter\", \"StatsService\", \"blockUI\", \"localStorageService\", \"$timeout\", \"$window\", \"ConfigService\"];angular\r\n    .module('nzbhydraApp')\r\n    .controller('StatsController', StatsController);\r\n\r\nfunction StatsController($scope, $filter, StatsService, blockUI, localStorageService, $timeout, $window, ConfigService) {\r\n\r\n    $scope.dateOptions = {\r\n        dateDisabled: false,\r\n        formatYear: 'yy',\r\n        startingDay: 1\r\n    };\r\n    var initializingAfter = true;\r\n    var initializingBefore = true;\r\n    $scope.afterDate = moment().subtract(30, \"days\").toDate();\r\n    $scope.beforeDate = moment().add(1, \"days\").toDate();\r\n    var historyInfoTypeUserEnabled = ConfigService.getSafe().logging.historyUserInfoType === 'USERNAME' || ConfigService.getSafe().logging.historyUserInfoType === 'BOTH';\r\n    var historyInfoTypeIpEnabled = ConfigService.getSafe().logging.historyUserInfoType === 'IP' || ConfigService.getSafe().logging.historyUserInfoType === 'BOTH';\r\n    $scope.foo = {\r\n        includeDisabledIndexersInStats: localStorageService.get(\"includeDisabledIndexersInStats\") !== null ? localStorageService.get(\"includeDisabledIndexersInStats\") : false,\r\n        statsSwichState: localStorageService.get(\"statsSwitchState\") !== null ? localStorageService.get(\"statsSwitchState\") :\r\n            {\r\n                indexerApiAccessStats: true,\r\n                avgIndexerSearchResultsShares: true,\r\n                avgResponseTimes: true,\r\n                indexerDownloadShares: true,\r\n                downloadsPerDayOfWeek: true,\r\n                downloadsPerHourOfDay: true,\r\n                searchesPerDayOfWeek: true,\r\n                searchesPerHourOfDay: true,\r\n                downloadsPerAgeStats: true,\r\n                successfulDownloadsPerIndexer: true,\r\n                downloadSharesPerUser: historyInfoTypeUserEnabled,\r\n                searchSharesPerUser: historyInfoTypeIpEnabled,\r\n                downloadSharesPerIp: true,\r\n                searchSharesPerIp: true,\r\n                userAgentSearchShares: true,\r\n                userAgentDownloadShares: true\r\n            }\r\n    };\r\n    localStorageService.set(\"statsSwitchState\", $scope.foo.statsSwichState);\r\n    $scope.stats = {};\r\n\r\n    updateStats();\r\n\r\n\r\n    $scope.openAfter = function () {\r\n        $scope.after.opened = true;\r\n    };\r\n\r\n    $scope.openBefore = function () {\r\n        $scope.before.opened = true;\r\n    };\r\n\r\n    $scope.after = {\r\n        opened: false\r\n    };\r\n\r\n    $scope.before = {\r\n        opened: false\r\n    };\r\n\r\n    $scope.toggleIncludeDisabledIndexers = function () {\r\n        localStorageService.set(\"includeDisabledIndexersInStats\", $scope.foo.includeDisabledIndexersInStats);\r\n    };\r\n\r\n    $scope.onStatsSwitchToggle = function (statId) {\r\n        localStorageService.set(\"statsSwitchState\", $scope.foo.statsSwichState);\r\n\r\n        if ($scope.foo.statsSwichState[statId]) { //Stat was enabled, get only data for this stat\r\n            updateStats(statId);\r\n        }\r\n\r\n    };\r\n\r\n    $scope.refresh = function() {\r\n        updateStats();\r\n    };\r\n\r\n    function updateStats(statId) {\r\n        blockUI.start(\"Updating stats...\");\r\n        var after = $scope.afterDate !== null ? $scope.afterDate : null;\r\n        var before = $scope.beforeDate !== null ? $scope.beforeDate : null;\r\n        var statsToRetrieve = {};\r\n        if (angular.isDefined(statId)) {\r\n            statsToRetrieve[statId] = true;\r\n        } else {\r\n            statsToRetrieve = $scope.foo.statsSwichState;\r\n        }\r\n        $scope.statsLoadingPromise = StatsService.get(after, before, $scope.foo.includeDisabledIndexersInStats, statsToRetrieve).then(function (stats) {\r\n            $scope.setStats(stats);\r\n            //Resize event is needed for the -perUsernameOrIp charts to be properly sized because nvd3 thinks the initial size is 0\r\n            $timeout(function () {\r\n                $window.dispatchEvent(new Event(\"resize\"));\r\n            }, 500);\r\n        });\r\n\r\n        blockUI.reset();\r\n    }\r\n\r\n    $scope.$watch('beforeDate', function () {\r\n        if (initializingBefore) {\r\n            initializingBefore = false;\r\n        } else {\r\n            //updateStats();\r\n        }\r\n    });\r\n\r\n\r\n    $scope.$watch('afterDate', function () {\r\n        if (initializingAfter) {\r\n            initializingAfter = false;\r\n        } else {\r\n            //updateStats();\r\n        }\r\n    });\r\n\r\n    $scope.onKeypress = function (keyEvent) {\r\n        if (keyEvent.which === 13) {\r\n            //updateStats();\r\n        }\r\n    };\r\n\r\n\r\n    $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];\r\n    $scope.format = $scope.formats[0];\r\n    $scope.altInputFormats = ['M!/d!/yyyy'];\r\n\r\n    $scope.setStats = function (stats) {\r\n        stats = stats.data;\r\n\r\n        //Only update those stats that were calculated (because this might be an update when one stat has just been enabled)\r\n        _.forEach(stats, function (value, key) {\r\n            if (value !== null) {\r\n                $scope.stats[key] = value;\r\n            }\r\n        });\r\n\r\n\r\n        if ($scope.stats.avgResponseTimes) {\r\n            $scope.avgResponseTimesChart = getChart(\"multiBarHorizontalChart\", $scope.stats.avgResponseTimes, \"indexer\", \"avgResponseTime\", \"\", \"Response time\");\r\n            $scope.avgResponseTimesChart.options.chart.margin.left = 100;\r\n            $scope.avgResponseTimesChart.options.chart.yAxis.rotateLabels = -30;\r\n            $scope.avgResponseTimesChart.options.chart.height = Math.max($scope.stats.avgResponseTimes.length * 30, 350);\r\n        }\r\n\r\n        if ($scope.stats.avgIndexerSearchResultsShares) {\r\n            $scope.resultsSharesChart = getResultsSharesChart();\r\n\r\n            var rotation = 30;\r\n            var numberOfDisplayedIndexers = $scope.foo.includeDisabledIndexersInStats ? stats.numberOfConfiguredIndexers : stats.numberOfEnabledIndexers;\r\n            if (numberOfDisplayedIndexers > 30) {\r\n                rotation = 70;\r\n            }\r\n            $scope.resultsSharesChart.options.chart.xAxis.rotateLabels = rotation;\r\n            $scope.resultsSharesChart.options.chart.height = 350;\r\n        }\r\n\r\n\r\n        if ($scope.stats.downloadsPerHourOfDay) {\r\n            $scope.downloadsPerHourOfDayChart = getChart(\"discreteBarChart\", $scope.stats.downloadsPerHourOfDay, \"hour\", \"count\", \"Hour of day\", 'Downloads');\r\n            $scope.downloadsPerHourOfDayChart.options.chart.xAxis.rotateLabels = 0;\r\n        }\r\n\r\n        if ($scope.stats.downloadsPerDayOfWeek) {\r\n            $scope.downloadsPerDayOfWeekChart = getChart(\"discreteBarChart\", $scope.stats.downloadsPerDayOfWeek, \"day\", \"count\", \"Day of week\", 'Downloads');\r\n            $scope.downloadsPerDayOfWeekChart.options.chart.xAxis.rotateLabels = 0;\r\n        }\r\n\r\n        if ($scope.stats.searchesPerHourOfDay) {\r\n            $scope.searchesPerHourOfDayChart = getChart(\"discreteBarChart\", $scope.stats.searchesPerHourOfDay, \"hour\", \"count\", \"Hour of day\", 'Searches');\r\n            $scope.searchesPerHourOfDayChart.options.chart.xAxis.rotateLabels = 0;\r\n        }\r\n\r\n        if ($scope.stats.searchesPerDayOfWeek) {\r\n            $scope.searchesPerDayOfWeekChart = getChart(\"discreteBarChart\", $scope.stats.searchesPerDayOfWeek, \"day\", \"count\", \"Day of week\", 'Searches');\r\n            $scope.searchesPerDayOfWeekChart.options.chart.xAxis.rotateLabels = 0;\r\n        }\r\n\r\n        if ($scope.stats.downloadsPerAgeStats) {\r\n            $scope.downloadsPerAgeChart = getChart(\"discreteBarChart\", $scope.stats.downloadsPerAgeStats.downloadsPerAge, \"age\", \"count\", \"Downloads per age\", 'Downloads');\r\n            $scope.downloadsPerAgeChart.options.chart.xAxis.rotateLabels = 45;\r\n            $scope.downloadsPerAgeChart.options.chart.showValues = false;\r\n        }\r\n\r\n        if ($scope.stats.successfulDownloadsPerIndexer) {\r\n            $scope.successfulDownloadsPerIndexerChart = getChart(\"multiBarHorizontalChart\", $scope.stats.successfulDownloadsPerIndexer, \"indexerName\", \"percentSuccessful\", \"Indexer\", '% successful');\r\n            $scope.successfulDownloadsPerIndexerChart.options.chart.xAxis.rotateLabels = 90;\r\n            $scope.successfulDownloadsPerIndexerChart.options.chart.yAxis.tickFormat = function (d) {\r\n                return $filter('number')(d, 0);\r\n            };\r\n            $scope.successfulDownloadsPerIndexerChart.options.chart.valueFormat = function (d) {\r\n                return $filter('number')(d, 0);\r\n            };\r\n            $scope.successfulDownloadsPerIndexerChart.options.chart.showValues = true;\r\n        }\r\n\r\n        if ($scope.stats.indexerDownloadShares) {\r\n            $scope.indexerDownloadSharesChart = {\r\n                options: {\r\n                    chart: {\r\n                        type: 'pieChart',\r\n                        height: 500,\r\n                        x: function (d) {\r\n                            return d.indexerName;\r\n                        },\r\n                        y: function (d) {\r\n                            return d.share;\r\n                        },\r\n                        showLabels: true,\r\n                        donut: true,\r\n                        donutRatio: 0.35,\r\n                        duration: 500,\r\n                        labelThreshold: 0.03,\r\n                        labelSunbeamLayout: true,\r\n                        tooltip: {\r\n                            valueFormatter: function (d, i) {\r\n                                return $filter('number')(d, 2) + \"%\";\r\n                            }\r\n                        },\r\n                        legend: {\r\n                            margin: {\r\n                                top: 5,\r\n                                right: 35,\r\n                                bottom: 5,\r\n                                left: 0\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                data: $scope.stats.indexerDownloadShares\r\n            };\r\n            $scope.indexerDownloadSharesChart.options.chart.height = Math.min(Math.max(($scope.foo.includeDisabledIndexersInStats ? $scope.stats.numberOfConfiguredIndexers : $scope.stats.numberOfEnabledIndexers) * 40, 350), 900);\r\n        }\r\n\r\n        function getSharesPieChart(data, height, xValue, yValue) {\r\n            return {\r\n                options: {\r\n                    chart: {\r\n                        type: 'pieChart',\r\n                        height: height,\r\n                        x: function (d) {\r\n                            return d[xValue];\r\n                        },\r\n                        y: function (d) {\r\n                            return d[yValue];\r\n                        },\r\n                        showLabels: true,\r\n                        donut: true,\r\n                        donutRatio: 0.35,\r\n                        duration: 500,\r\n                        labelThreshold: 0.03,\r\n                        labelsOutside: true,\r\n                        //labelType: \"percent\",\r\n                        labelSunbeamLayout: true,\r\n                        tooltip: {\r\n                            valueFormatter: function (d, i) {\r\n                                return $filter('number')(d, 2) + \"%\";\r\n                            }\r\n                        },\r\n                        legend: {\r\n                            margin: {\r\n                                top: 5,\r\n                                right: 35,\r\n                                bottom: 5,\r\n                                left: 0\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                data: data\r\n            };\r\n        }\r\n\r\n        if ($scope.stats.searchSharesPerIp !== null) {\r\n            $scope.downloadSharesPerIpChart = getSharesPieChart($scope.stats.downloadSharesPerIp, 300, \"key\", \"percentage\");\r\n        }\r\n        if ($scope.stats.searchSharesPerIpChart !== null) {\r\n            $scope.searchSharesPerIpChart = getSharesPieChart($scope.stats.searchSharesPerIp, 300, \"key\", \"percentage\");\r\n        }\r\n        if ($scope.stats.searchSharesPerUser !== null) {\r\n            $scope.downloadSharesPerUserChart = getSharesPieChart($scope.stats.downloadSharesPerUser, 300, \"key\", \"percentage\");\r\n        }\r\n        if ($scope.stats.searchSharesPerUserChart !== null) {\r\n            $scope.searchSharesPerUserChart = getSharesPieChart($scope.stats.searchSharesPerUser, 300, \"key\", \"percentage\");\r\n        }\r\n\r\n        if ($scope.stats.userAgentSearchShares) {\r\n            $scope.userAgentSearchSharesChart = getSharesPieChart($scope.stats.userAgentSearchShares, 300, \"userAgent\", \"percentage\");\r\n            $scope.userAgentSearchSharesChart.options.chart.legend.margin.bottom = 25;\r\n        }\r\n        if ($scope.stats.userAgentDownloadShares) {\r\n            $scope.userAgentDownloadSharesChart = getSharesPieChart($scope.stats.userAgentDownloadShares, 300, \"userAgent\", \"percentage\");\r\n            $scope.userAgentDownloadSharesChart.options.chart.legend.margin.bottom = 25;\r\n        }\r\n\r\n    };\r\n\r\n    function getChart(chartType, values, xKey, yKey, xAxisLabel, yAxisLabel) {\r\n        return {\r\n            options: {\r\n                chart: {\r\n                    type: chartType,\r\n                    height: 350,\r\n                    margin: {\r\n                        top: 20,\r\n                        right: 20,\r\n                        bottom: 100,\r\n                        left: 50\r\n                    },\r\n                    x: function (d) {\r\n                        return d[xKey];\r\n                    },\r\n                    y: function (d) {\r\n                        return d[yKey];\r\n                    },\r\n                    showValues: true,\r\n                    valueFormat: function (d) {\r\n                        return d;\r\n                    },\r\n                    color: function () {\r\n                        return \"red\"\r\n                    },\r\n                    showControls: false,\r\n                    showLegend: false,\r\n                    duration: 100,\r\n                    xAxis: {\r\n                        axisLabel: xAxisLabel,\r\n                        tickFormat: function (d) {\r\n                            return d;\r\n                        },\r\n                        rotateLabels: 30,\r\n                        showMaxMin: false,\r\n                        color: function () {\r\n                            return \"white\"\r\n                        }\r\n                    },\r\n                    yAxis: {\r\n                        axisLabel: yAxisLabel,\r\n                        axisLabelDistance: -10,\r\n                        tickFormat: function (d) {\r\n                            return d;\r\n                        }\r\n                    },\r\n                    tooltip: {\r\n                        enabled: false\r\n                    },\r\n                    zoom: {\r\n                        enabled: true,\r\n                        scaleExtent: [1, 10],\r\n                        useFixedDomain: false,\r\n                        useNiceScale: false,\r\n                        horizontalOff: false,\r\n                        verticalOff: true,\r\n                        unzoomEventType: 'dblclick.zoom'\r\n                    }\r\n                }\r\n            }, data: [{\r\n                \"key\": \"doesntmatter\",\r\n                \"bar\": true,\r\n                \"values\": values\r\n            }]\r\n        };\r\n    }\r\n\r\n    //Was unable to use the function above for this and gave up\r\n    function getResultsSharesChart() {\r\n        return {\r\n            options: {\r\n                chart: {\r\n                    type: 'multiBarChart',\r\n                    height: 350,\r\n                    margin: {\r\n                        top: 20,\r\n                        right: 20,\r\n                        bottom: 100,\r\n                        left: 45\r\n                    },\r\n\r\n                    clipEdge: true,\r\n                    duration: 500,\r\n                    stacked: false,\r\n                    reduceXTicks: false,\r\n                    showValues: true,\r\n                    tooltip: {\r\n                        enabled: true,\r\n                        valueFormatter: function (d) {\r\n                            return $filter('number')(d, 2) + \"%\";\r\n                        }\r\n                    },\r\n                    showControls: false,\r\n                    xAxis: {\r\n                        axisLabel: '',\r\n                        showMaxMin: false,\r\n                        rotateLabels: 30,\r\n                        axisLabelDistance: 30,\r\n                        tickFormat: function (d) {\r\n                            return d;\r\n                        }\r\n                    },\r\n                    yAxis: {\r\n                        axisLabel: 'Share (%)',\r\n                        axisLabelDistance: -20,\r\n                        tickFormat: function (d) {\r\n                            return $filter('number')(d, 0) + \"%\";\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n\r\n            data: [\r\n                {\r\n                    key: \"Results\",\r\n                    values: _.map($scope.stats.avgIndexerSearchResultsShares, function (stats) {\r\n                        return {series: 0, y: stats.totalShare, x: stats.indexerName}\r\n                    })\r\n                },\r\n                {\r\n                    key: \"Unique results\",\r\n                    values: _.map($scope.stats.avgIndexerSearchResultsShares, function (stats) {\r\n                        return {series: 1, y: stats.uniqueShare, x: stats.indexerName}\r\n                    })\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n\r\n\r\n","//\r\nSearchService.$inject = [\"$http\"];\r\nangular\r\n    .module('nzbhydraApp')\r\n    .factory('SearchService', SearchService);\r\n\r\nfunction SearchService($http) {\r\n\r\n\r\n    var lastExecutedQuery;\r\n    var lastExecutedSearchRequestParameters;\r\n    var lastResults;\r\n    var modalInstance;\r\n\r\n    return {\r\n        search: search,\r\n        getLastResults: getLastResults,\r\n        loadMore: loadMore,\r\n        getSearchState: getSearchState,\r\n        getModalInstance: getModalInstance,\r\n        setModalInstance: setModalInstance,\r\n    };\r\n\r\n    function getModalInstance() {\r\n        return modalInstance;\r\n    }\r\n\r\n    function setModalInstance(mi) {\r\n        modalInstance = mi;\r\n    }\r\n\r\n    function search(searchRequestId, category, query, metaData, season, episode, minsize, maxsize, minage, maxage, indexers, mode) {\r\n        // console.time(\"search\");\r\n        var uri = new URI(\"internalapi/search\");\r\n        var searchRequestParameters = {};\r\n        searchRequestParameters.searchRequestId = searchRequestId;\r\n        searchRequestParameters.query = query;\r\n        searchRequestParameters.minsize = minsize;\r\n        searchRequestParameters.maxsize = maxsize;\r\n        searchRequestParameters.minage = minage;\r\n        searchRequestParameters.maxage = maxage;\r\n        searchRequestParameters.category = category;\r\n        if (!angular.isUndefined(indexers) && indexers !== null) {\r\n            searchRequestParameters.indexers = indexers.split(\",\");\r\n        }\r\n\r\n        if (metaData) {\r\n            searchRequestParameters.title = metaData.title;\r\n            if (category.indexOf(\"Movies\") > -1 || (category.indexOf(\"20\") === 0) || mode === \"movie\") {\r\n                searchRequestParameters.tmdbId = metaData.tmdbId;\r\n                searchRequestParameters.imdbId = metaData.imdbId;\r\n            } else if (category.indexOf(\"TV\") > -1 || (category.indexOf(\"50\") === 0) || mode === \"tvsearch\") {\r\n                searchRequestParameters.tvdbId = metaData.tvdbId;\r\n                searchRequestParameters.tvrageid = metaData.rid;\r\n                searchRequestParameters.tvmazeid = metaData.rid;\r\n                searchRequestParameters.season = season;\r\n                searchRequestParameters.episode = episode;\r\n            }\r\n        }\r\n\r\n        lastExecutedQuery = uri;\r\n        lastExecutedSearchRequestParameters = searchRequestParameters;\r\n        return $http.post(uri.toString(), searchRequestParameters).then(processData);\r\n    }\r\n\r\n    function loadMore(offset, limit, loadAll) {\r\n        lastExecutedSearchRequestParameters.offset = offset;\r\n        lastExecutedSearchRequestParameters.limit = limit;\r\n        lastExecutedSearchRequestParameters.loadAll = angular.isDefined(loadAll) ? loadAll : false;\r\n\r\n        return $http.post(lastExecutedQuery.toString(), lastExecutedSearchRequestParameters).then(processData);\r\n    }\r\n\r\n    function getSearchState(searchRequestId) {\r\n        return $http.get(\"internalapi/search/state\", {params: {searchrequestid: searchRequestId}});\r\n    }\r\n\r\n    function processData(response) {\r\n        var searchResults = response.data.searchResults;\r\n        var indexerSearchMetaDatas = response.data.indexerSearchMetaDatas;\r\n        var numberOfAvailableResults = response.data.numberOfAvailableResults;\r\n        var numberOfRejectedResults = response.data.numberOfRejectedResults;\r\n        var numberOfAcceptedResults = response.data.numberOfAcceptedResults;\r\n        var numberOfProcessedResults = response.data.numberOfProcessedResults;\r\n        var rejectedReasonsMap = response.data.rejectedReasonsMap;\r\n        var notPickedIndexersWithReason = response.data.notPickedIndexersWithReason;\r\n\r\n        lastResults = {\r\n            \"searchResults\": searchResults,\r\n            \"indexerSearchMetaDatas\": indexerSearchMetaDatas,\r\n            \"numberOfAvailableResults\": numberOfAvailableResults,\r\n            \"numberOfAcceptedResults\": numberOfAcceptedResults,\r\n            \"numberOfRejectedResults\": numberOfRejectedResults,\r\n            \"numberOfProcessedResults\": numberOfProcessedResults,\r\n            \"rejectedReasonsMap\": rejectedReasonsMap,\r\n            \"notPickedIndexersWithReason\": notPickedIndexersWithReason\r\n\r\n        };\r\n        // console.timeEnd(\"searchonly\");\r\n        return lastResults;\r\n    }\r\n\r\n    function getLastResults() {\r\n        return lastResults;\r\n    }\r\n}","\nSearchResultsController.$inject = [\"$stateParams\", \"$scope\", \"$q\", \"$timeout\", \"$document\", \"blockUI\", \"growl\", \"localStorageService\", \"SearchService\", \"ConfigService\", \"CategoriesService\", \"DebugService\"];angular\n    .module('nzbhydraApp')\n    .controller('SearchResultsController', SearchResultsController);\n\n//SearchResultsController.$inject = ['blockUi'];\nfunction SearchResultsController($stateParams, $scope, $q, $timeout, $document, blockUI, growl, localStorageService, SearchService, ConfigService, CategoriesService, DebugService) {\n    // console.time(\"Presenting\");\n    DebugService.log(\"foobar\");\n    $scope.limitTo = 100;\n    $scope.offset = 0;\n    //Handle incoming data\n\n    $scope.indexersearches = SearchService.getLastResults().indexerSearchMetaDatas;\n    $scope.notPickedIndexersWithReason = [];\n    _.forEach(SearchService.getLastResults().notPickedIndexersWithReason, function (k, v) {\n        $scope.notPickedIndexersWithReason.push({\"indexer\": v, \"reason\": k});\n    });\n    $scope.indexerResultsInfo = {}; //Stores information about the indexerName's searchResults like how many we already retrieved\n    $scope.groupExpanded = {};\n    $scope.selected = [];\n    if ($stateParams.title) {\n        $scope.searchTitle = $stateParams.title;\n    } else if ($stateParams.query) {\n        $scope.searchTitle = $stateParams.query;\n    } else {\n        $scope.searchTitle = undefined;\n    }\n\n    $scope.selectedIds = _.map($scope.selected, function (value) {\n        return value.searchResultId;\n    });\n\n    //For shift clicking results\n    $scope.lastClickedRowIndex = null;\n    $scope.lastClickedValue = null;\n\n    var allSearchResults = [];\n    var sortModel = {};\n    $scope.filterModel = {};\n\n    $scope.isShowFilterButtons = ConfigService.getSafe().searching.showQuickFilterButtons;\n    $scope.isShowFilterButtonsMovie = $scope.isShowFilterButtons && $stateParams.category.toLowerCase().indexOf(\"movie\") > -1;\n    $scope.isShowFilterButtonsTv = $scope.isShowFilterButtons && $stateParams.category.toLowerCase().indexOf(\"tv\") > -1;\n    $scope.filterButtonsModel = {\n        source: {},\n        quality: {}\n    };\n    $scope.filterButtonsModelMap = {\n        tv: ['hdtv'],\n        camts: ['cam', 'ts'],\n        web: ['webrip', 'web-dl', 'webdl'],\n        dvd: ['dvd'],\n        bluray: ['bluray', 'blu-ray']\n    };\n    if (localStorageService.get(\"sorting\") !== null) {\n        sortModel = localStorageService.get(\"sorting\");\n    } else {\n        sortModel = {\n            column: \"epoch\",\n            sortMode: 2,\n            reversed: false\n        };\n    }\n    $timeout(function () {\n        $scope.$broadcast(\"newSortColumn\", sortModel.column, sortModel.sortMode, sortModel.reversed);\n    }, 10);\n\n\n    $scope.foo = {\n        indexerStatusesExpanded: localStorageService.get(\"indexerStatusesExpanded\") !== null ? localStorageService.get(\"indexerStatusesExpanded\") : false,\n        duplicatesDisplayed: localStorageService.get(\"duplicatesDisplayed\") !== null ? localStorageService.get(\"duplicatesDisplayed\") : false,\n        groupTorrentAndNewznabResults: localStorageService.get(\"groupTorrentAndNewznabResults\") !== null ? localStorageService.get(\"groupTorrentAndNewznabResults\") : false,\n        sumGrabs: localStorageService.get(\"sumGrabs\") !== null ? localStorageService.get(\"sumGrabs\") : true,\n        scrollToResults: localStorageService.get(\"scrollToResults\") !== null ? localStorageService.get(\"scrollToResults\") : true\n    };\n    $scope.loadMoreEnabled = false;\n    $scope.totalAvailableUnknown = false;\n    $scope.expandedTitlegroups = [];\n    $scope.optionsOptions = [\n        {id: \"duplicatesDisplayed\", label: \"Show duplicate display triggers\"},\n        {id: \"groupTorrentAndNewznabResults\", label: \"Group torrent and usenet results\"},\n        {id: \"sumGrabs\", label: \"Use sum of grabs / seeders for filtering / sorting of groups\"},\n        {id: \"scrollToResults\", label: \"Scroll to results when finished\"}\n    ];\n    $scope.optionsSelectedModel = [];\n    for (var key in $scope.optionsOptions) {\n        if ($scope.foo[$scope.optionsOptions[key][\"id\"]]) {\n            $scope.optionsSelectedModel.push($scope.optionsOptions[key].id);\n        }\n    }\n\n    $scope.optionsExtraSettings = {\n        showSelectAll: false,\n        showDeselectAll: false,\n        buttonText: \"Display options\"\n    };\n\n\n    $scope.optionsEvents = {\n        onToggleItem: function (item, newValue) {\n            console.log(item.id + \": \" + newValue);\n            if (item.id === \"duplicatesDisplayed\") {\n                toggleDuplicatesDisplayed(newValue);\n            } else if (item.id === \"groupTorrentAndNewznabResults\") {\n                toggleGroupTorrentAndNewznabResults(newValue);\n            } else if (item.id === \"sumGrabs\") {\n                toggleSumGrabs(newValue);\n            } else if (item.id === \"scrollToResults\") {\n                toggleScrollToResults(newValue);\n            }\n        }\n    };\n\n    function toggleDuplicatesDisplayed(value) {\n        localStorageService.set(\"duplicatesDisplayed\", value);\n        $scope.$broadcast(\"duplicatesDisplayed\", value);\n        $scope.foo.duplicatesDisplayed = value;\n    }\n\n    function toggleGroupTorrentAndNewznabResults(value) {\n        localStorageService.set(\"groupTorrentAndNewznabResults\", value);\n        $scope.foo.groupTorrentAndNewznabResults = value;\n        blockAndUpdate();\n    }\n\n    function toggleSumGrabs(value) {\n        localStorageService.set(\"sumGrabs\", value);\n        $scope.foo.sumGrabs = value;\n        blockAndUpdate();\n    }\n\n    function toggleScrollToResults(value) {\n        localStorageService.set(\"scrollToResults\", value);\n        $scope.foo.scrollToResults = value;\n    }\n\n\n    $scope.indexersForFiltering = [];\n    _.forEach($scope.indexersearches, function (indexer) {\n        $scope.indexersForFiltering.push({label: indexer.indexerName, id: indexer.indexerName})\n    });\n    $scope.categoriesForFiltering = [];\n    _.forEach(CategoriesService.getWithoutAll(), function (category) {\n        $scope.categoriesForFiltering.push({label: category.name, id: category.name})\n    });\n    _.forEach($scope.indexersearches, function (ps) {\n        $scope.indexerResultsInfo[ps.indexerName.toLowerCase()] = {loadedResults: ps.loaded_results};\n    });\n\n    setDataFromSearchResult(SearchService.getLastResults(), []);\n    $scope.$emit(\"searchResultsShown\");\n    if (!SearchService.getLastResults().searchResults || SearchService.getLastResults().searchResults.length === 0) {\n        //Close modal instance because no search results will be rendered that could trigger the closing\n        SearchService.getModalInstance().close();\n    }\n    //stopBlocking();\n\n    //Returns the content of the property (defined by the current sortPredicate) of the first group element \n    $scope.firstResultPredicate = firstResultPredicate;\n\n    function firstResultPredicate(item) {\n        return item[0][$scope.sortPredicate];\n    }\n\n    //Returns the unique group identifier which allows angular to keep track of the grouped search results even after filtering, making filtering by indexers a lot faster (albeit still somewhat slow...)\n    $scope.groupId = groupId;\n\n    function groupId(item) {\n        return item[0][0].searchResultId;\n    }\n\n    $scope.onFilterButtonsModelChange = function () {\n        blockAndUpdate();\n    };\n\n    function blockAndUpdate() {\n        startBlocking(\"Sorting / filtering...\").then(function () {\n            $scope.filteredResults = sortAndFilter(allSearchResults);\n            //stopBlocking();\n            localStorageService.set(\"sorting\", sortModel);\n        });\n    }\n\n    //Block the UI and return after timeout. This way we make sure that the blocking is done before angular starts updating the model/view. There's probably a better way to achieve that?\n    function startBlocking(message) {\n        var deferred = $q.defer();\n        blockUI.start(message);\n        $timeout(function () {\n            deferred.resolve();\n        }, 10);\n        return deferred.promise;\n    }\n\n    $scope.$on(\"sort\", function (event, column, sortMode, reversed) {\n        if (sortMode === 0) {\n            sortModel = {\n                column: \"epoch\",\n                sortMode: 2,\n                reversed: true\n            };\n        } else {\n            sortModel = {\n                column: column,\n                sortMode: sortMode,\n                reversed: reversed\n            };\n        }\n        $timeout(function () {\n            $scope.$broadcast(\"newSortColumn\", sortModel.column, sortModel.sortMode, sortModel.reversed);\n        }, 10);\n        blockAndUpdate();\n    });\n\n    $scope.$on(\"filter\", function (event, column, filterModel, isActive) {\n        if (filterModel.filterValue && isActive) {\n            $scope.filterModel[column] = filterModel;\n        } else {\n            delete $scope.filterModel[column];\n        }\n        blockAndUpdate();\n    });\n\n    $scope.resort = function () {\n    };\n\n    function getCleanedTitle(element) {\n        return element.title.toLowerCase().replace(/[\\s\\-\\._]/ig, \"\");\n    }\n\n    function getGroupingString(element) {\n        var groupingString = getCleanedTitle(element);\n        if (!$scope.foo.groupTorrentAndNewznabResults) {\n            groupingString = groupingString + element.downloadType;\n        }\n        return groupingString;\n    }\n\n    function sortAndFilter(results) {\n        // console.time(\"sortAndFilter\");\n        var query;\n        var words;\n        if (\"title\" in $scope.filterModel) {\n            query = $scope.filterModel.title.filterValue;\n            words = query.toLowerCase().split(/[\\s.\\-]+/);\n        }\n\n        function filter(item) {\n            if (\"size\" in $scope.filterModel) {\n                var filterValue = $scope.filterModel.size.filterValue;\n                if (angular.isDefined(filterValue.min) && item.size / 1024 / 1024 < filterValue.min) {\n                    return false;\n                }\n                if (angular.isDefined(filterValue.max) && item.size / 1024 / 1024 > filterValue.max) {\n                    return false;\n                }\n            }\n\n            if (\"epoch\" in $scope.filterModel) {\n                var filterValue = $scope.filterModel.epoch.filterValue;\n                var ageDays = moment.utc().diff(moment.unix(item.epoch), \"days\");\n                if (angular.isDefined(filterValue.min) && ageDays < filterValue.min) {\n                    return false;\n                }\n                if (angular.isDefined(filterValue.max) && ageDays > filterValue.max) {\n                    return false;\n                }\n            }\n\n            if (\"grabs\" in $scope.filterModel) {\n                var filterValue = $scope.filterModel.grabs.filterValue;\n                if (angular.isDefined(filterValue.min)) {\n                    if ((item.seeders !== null && item.seeders < filterValue.min) || (item.seeders === null && item.grabs !== null && item.grabs < filterValue.min)) {\n                        return false;\n                    }\n                }\n                if (angular.isDefined(filterValue.max)) {\n                    if ((item.seeders !== null && item.seeders > filterValue.max) || (item.seeders === null && item.grabs !== null && item.grabs > filterValue.max)) {\n                        return false;\n                    }\n                }\n            }\n\n            if (\"title\" in $scope.filterModel) {\n                var ok = _.every(words, function (word) {\n                    return item.title.toLowerCase().indexOf(word) > -1;\n                });\n                if (!ok) return false;\n            }\n            if (\"indexer\" in $scope.filterModel) {\n                if (_.indexOf($scope.filterModel.indexer.filterValue, item.indexer) === -1) {\n                    return false;\n                }\n            }\n            if (\"category\" in $scope.filterModel) {\n                if (_.indexOf($scope.filterModel.category.filterValue, item.category) === -1) {\n                    return false;\n                }\n            }\n            if ($scope.filterButtonsModel.source !== null) {\n                var mustContain = [];\n                _.each($scope.filterButtonsModel.source, function (value, key) { //key is something like 'camts', value is true or false\n                    if (value) {\n                        Array.prototype.push.apply(mustContain, $scope.filterButtonsModelMap[key]);\n                    }\n                });\n                if (mustContain.length > 0) {\n                    var containsAtLeastOne = _.any(mustContain, function (word) {\n                        return item.title.toLowerCase().indexOf(word) > -1\n                    });\n                    if (!containsAtLeastOne) {\n                        return false;\n                    }\n                }\n            }\n            if ($scope.filterButtonsModel.quality !== null && !_.isEmpty($scope.filterButtonsModel.quality)) {\n                var containsAtLeastOne = false;\n                var anyRequired = false;\n                _.each($scope.filterButtonsModel.quality, function (value, key) { //key is something like 'q720p', value is true or false\n                    anyRequired = anyRequired || value;\n                    if (value && item.title.toLowerCase().indexOf(key.substring(1)) > -1) {\n                        containsAtLeastOne = true;\n                    }\n                });\n                return !anyRequired || containsAtLeastOne;\n            }\n\n            return true;\n        }\n\n\n\n        var sortPredicateKey = sortModel.column;\n        var sortReversed = sortModel.reversed;\n\n        function getSortPredicateValue(containgObject) {\n            var sortPredicateValue;\n            if (sortPredicateKey === \"grabs\") {\n                if (containgObject[\"seeders\"] !== null) {\n                    sortPredicateValue = containgObject[\"seeders\"];\n                } else if (containgObject[\"grabs\"] !== null) {\n                    sortPredicateValue = containgObject[\"grabs\"];\n                } else {\n                    sortPredicateValue = 0;\n                }\n            } else if (sortPredicateKey === \"title\") {\n                sortPredicateValue = getCleanedTitle(containgObject);\n            } else if (sortPredicateKey === \"indexer\") {\n                sortPredicateValue = containgObject[\"indexer\"].toLowerCase();\n            } else {\n                sortPredicateValue = containgObject[sortPredicateKey];\n            }\n            return sortPredicateValue;\n        }\n\n        function createSortedHashgroups(titleGroup) {\n            function createHashGroup(hashGroup) {\n                //Sorting hash group's contents should not matter for size and age and title but might for category (we might remove this, it's probably mostly unnecessary)\n                var sortedHashGroup = _.sortBy(hashGroup, function (item) {\n                    var sortPredicateValue = getSortPredicateValue(item);\n                    return sortReversed ? -sortPredicateValue : sortPredicateValue;\n                });\n                //Now sort the hash group by indexer score (inverted) so that the result with the highest indexer score is shown on top (or as the only one of a hash group if it's collapsed)\n                sortedHashGroup = _.sortBy(sortedHashGroup, function (item) {\n                    return item.indexerscore * -1;\n                });\n                return sortedHashGroup;\n            }\n\n            function getHashGroupFirstElementSortPredicate(hashGroup) {\n                if (sortPredicateKey === \"title\") {\n                    //Sorting a title group internally by title doesn't make sense so fall back to sorting by age so that newest result is at the top\n                    return hashGroup[0][\"epoch\"] * -1;\n                }\n                var sortPredicateValue = getSortPredicateValue(hashGroup[0]);\n                return sortPredicateValue;\n            }\n\n            var grouped = _.groupBy(titleGroup, \"hash\");\n            var mapped = _.map(grouped, createHashGroup);\n            var sorted = _.sortBy(mapped, getHashGroupFirstElementSortPredicate);\n            if (sortModel.sortMode === 2 && sortPredicateKey !== \"title\") {\n                sorted = sorted.reverse();\n            }\n\n            return sorted;\n        }\n\n        function getTitleGroupFirstElementsSortPredicate(titleGroup) {\n            var sortPredicateValue;\n            if (sortPredicateKey === \"grabs\" && $scope.foo.sumGrabs) {\n                var sumOfGrabs = 0;\n                _.each(titleGroup, function (element1) {\n                    _.each(element1, function (element2) {\n                        sumOfGrabs += getSortPredicateValue(element2);\n                    })\n                });\n\n                sortPredicateValue = sumOfGrabs;\n            } else {\n                sortPredicateValue = getSortPredicateValue(titleGroup[0][0]);\n            }\n            return sortPredicateValue\n        }\n\n        var filtered = _.filter(results, filter);\n        var newSelected = $scope.selected;\n        _.forEach($scope.selected, function (x) {\n            if (filtered.indexOf(x) === -1) {\n                console.log(\"Removing \" + x.title + \" from selected results because it's being hidden\");\n                $scope.$broadcast(\"toggleSelection\", x, false);\n                newSelected.splice($scope.selected.indexOf(x), 1);\n            }\n        });\n        $scope.selected = newSelected;\n\n        var grouped = _.groupBy(filtered, getGroupingString);\n        var mapped = _.map(grouped, createSortedHashgroups);\n        var sorted = _.sortBy(mapped, getTitleGroupFirstElementsSortPredicate);\n        if (sortModel.sortMode === 2) {\n            sorted = sorted.reverse();\n        }\n\n        $scope.lastClickedRowIndex = null;\n\n        var filteredResults = [];\n        _.forEach(sorted, function (titleGroup) {\n            var titleGroupIndex = 0;\n            _.forEach(titleGroup, function (duplicateGroup) {\n                var duplicateIndex = 0;\n                _.forEach(duplicateGroup, function (result) {\n                    result.titleGroupIndicator = getGroupingString(result);\n                    result.titleGroupIndex = titleGroupIndex;\n                    result.duplicateGroupIndex = duplicateIndex;\n                    result.duplicatesLength = duplicateGroup.length;\n                    result.titlesLength = titleGroup.length;\n                    filteredResults.push(result);\n                    duplicateIndex += 1;\n                });\n                titleGroupIndex += 1;\n            });\n        });\n\n        $scope.$broadcast(\"calculateDisplayState\");\n\n        // console.timeEnd(\"sortAndFilter\");\n        return filteredResults;\n    }\n\n    $scope.toggleTitlegroupExpand = function toggleTitlegroupExpand(titleGroup) {\n        $scope.groupExpanded[titleGroup[0][0].title] = !$scope.groupExpanded[titleGroup[0][0].title];\n        $scope.groupExpanded[titleGroup[0][0].hash] = !$scope.groupExpanded[titleGroup[0][0].hash];\n    };\n\n    $scope.stopBlocking = stopBlocking;\n\n    function stopBlocking() {\n        blockUI.reset();\n    }\n\n    function setDataFromSearchResult(data, previousSearchResults) {\n        // console.time(\"setDataFromSearchResult\");\n        allSearchResults = previousSearchResults.concat(data.searchResults);\n        allSearchResults = uniq(allSearchResults);\n        $scope.filteredResults = sortAndFilter(allSearchResults);\n\n        $scope.numberOfAvailableResults = data.numberOfAvailableResults;\n        $scope.rejectedReasonsMap = data.rejectedReasonsMap;\n        $scope.anyResultsRejected = !_.isEmpty(data.rejectedReasonsMap);\n        $scope.anyIndexersSearchedSuccessfully = _.any(data.indexerSearchMetaDatas, function (x) {\n            return x.wasSuccessful;\n        });\n        $scope.numberOfAcceptedResults = data.numberOfAcceptedResults;\n        $scope.numberOfRejectedResults = data.numberOfRejectedResults;\n        $scope.numberOfProcessedResults = data.numberOfProcessedResults;\n        $scope.numberOfLoadedResults = allSearchResults.length;\n        $scope.indexersearches = data.indexerSearchMetaDatas;\n\n        $scope.loadMoreEnabled = ($scope.numberOfLoadedResults + $scope.numberOfRejectedResults < $scope.numberOfAvailableResults) || _.any(data.indexerSearchMetaDatas, function (x) {\n            return x.hasMoreResults;\n        });\n        $scope.totalAvailableUnknown = _.any(data.indexerSearchMetaDatas, function (x) {\n            return !x.totalResultsKnown;\n        });\n\n        if (!$scope.foo.indexerStatusesExpanded && _.any(data.indexerSearchMetaDatas, function (x) {\n                return !x.wasSuccessful;\n            })) {\n            growl.info(\"Errors occurred during searching, Check indexer statuses\")\n        }\n        //Only show those categories in filter that are actually present in the results\n        $scope.categoriesForFiltering = [];\n        var allUsedCategories = _.uniq(_.pluck(allSearchResults, \"category\"));\n        _.forEach(CategoriesService.getWithoutAll(), function (category) {\n            if (allUsedCategories.indexOf(category.name) > -1) {\n                $scope.categoriesForFiltering.push({label: category.name, id: category.name})\n            }\n        });\n        // console.timeEnd(\"setDataFromSearchResult\");\n    }\n\n    function uniq(searchResults) {\n        var seen = {};\n        var out = [];\n        var len = searchResults.length;\n        var j = 0;\n        for (var i = 0; i < len; i++) {\n            var item = searchResults[i];\n            if (seen[item.searchResultId] !== 1) {\n                seen[item.searchResultId] = 1;\n                out[j++] = item;\n            }\n        }\n        return out;\n    }\n\n    $scope.loadMore = loadMore;\n\n    function loadMore(loadAll) {\n        startBlocking(loadAll ? \"Loading all results...\" : \"Loading more results...\").then(function () {\n            var limit = loadAll ? $scope.numberOfAvailableResults - $scope.numberOfProcessedResults : null;\n            SearchService.loadMore($scope.numberOfLoadedResults, limit, loadAll).then(function (data) {\n                setDataFromSearchResult(data, allSearchResults);\n                //stopBlocking();\n            });\n        });\n    }\n\n\n    $scope.countResults = countResults;\n\n    function countResults() {\n        return allSearchResults.length;\n    }\n\n    $scope.invertSelection = function invertSelection() {\n        $scope.$broadcast(\"invertSelection\");\n    };\n\n    $scope.deselectAll = function deselectAll() {\n        $scope.$broadcast(\"deselectAll\");\n    };\n\n    $scope.selectAll = function selectAll() {\n        $scope.$broadcast(\"selectAll\");\n    };\n\n    $scope.toggleIndexerStatuses = function () {\n        $scope.foo.indexerStatusesExpanded = !$scope.foo.indexerStatusesExpanded;\n        localStorageService.set(\"indexerStatusesExpanded\", $scope.foo.indexerStatusesExpanded);\n    };\n\n    $scope.getRejectedReasonsTooltip = function () {\n        if (_.isEmpty($scope.rejectedReasonsMap)) {\n            return \"No rejected results\";\n        } else {\n            var tooltip = \"<span >Rejected results:<span><br>\";\n            tooltip += '<table class=\"rejected-tooltip-table\"><thead><tr><th width=\"50px\">Count</th><th>Reason</th></tr></thead>';\n            _.forEach($scope.rejectedReasonsMap, function (count, reason) {\n                tooltip += '<tr><td>' + count + '</td><td>' + reason + '</td></tr>';\n            });\n            tooltip += '</table>';\n            return tooltip;\n        }\n    };\n\n    $scope.$on(\"checkboxClicked\", function (event, originalEvent, rowIndex, newCheckedValue, clickTargetElement) {\n        if (originalEvent.shiftKey && $scope.lastClickedRowIndex !== null) {\n            $scope.$broadcast(\"shiftClick\", Number($scope.lastClickedRowIndex), Number(rowIndex), Number($scope.lastClickedValue), $scope.lastClickedElement, clickTargetElement);\n        }\n        $scope.lastClickedRowIndex = rowIndex;\n        $scope.lastClickedElement = clickTargetElement;\n        $scope.lastClickedValue = newCheckedValue;\n    });\n\n    $scope.$on(\"toggleTitleExpansionUp\", function ($event, value, titleGroupIndicator) {\n        $scope.$broadcast(\"toggleTitleExpansionDown\", value, titleGroupIndicator);\n    });\n\n    $scope.$on(\"toggleDuplicateExpansionUp\", function ($event, value, hash) {\n        $scope.$broadcast(\"toggleDuplicateExpansionDown\", value, hash);\n    });\n\n    $scope.$on(\"selectionUp\", function ($event, result, value) {\n        var index = $scope.selected.indexOf(result);\n        if (value && index === -1) {\n            $scope.selected.push(result);\n        } else if (!value && index > -1) {\n            $scope.selected.splice(index, 1);\n        }\n        $scope.$broadcast(\"selectionDown\", result, value);\n    });\n\n    $scope.downloadNzbsCallback = function (addedIds) {\n        if (addedIds !== null && addedIds.length > 0) {\n            growl.info(\"Removing downloaded NZBs from selection\");\n            var toRemove = _.filter($scope.selected, function (x) {\n                return addedIds.indexOf(Number(x.searchResultId)) > -1;\n            });\n            var newSelected = $scope.selected;\n            _.forEach(toRemove, function (x) {\n                $scope.$broadcast(\"toggleSelection\", x, false);\n                newSelected.splice($scope.selected.indexOf(x), 1);\n            });\n            $scope.selected = newSelected;\n        }\n    };\n\n\n    $scope.filterRejectedZero = function () {\n        return function (entry) {\n            return entry[1] > 0;\n        }\n    };\n\n    $scope.$on(\"onFinishRender\", function () {\n        // console.log(\"Last rendered\");\n        $scope.doShowResults = true;\n        $timeout(function () {\n            if ($scope.foo.scrollToResults) {\n                var searchResultsElement = angular.element(document.getElementById('display-options'));\n                $document.scrollToElement(searchResultsElement, 0, 500);\n            }\n            stopBlocking();\n            SearchService.getModalInstance().close();\n        }, 1);\n    });\n\n    $timeout(function () {\n        DebugService.print();\n    }, 3000);\n\n    $timeout(function () {\n        function getWatchers(root) {\n            root = angular.element(root || document.documentElement);\n            var watcherCount = 0;\n            var ids = [];\n\n            function getElemWatchers(element, ids) {\n                var isolateWatchers = getWatchersFromScope(element.data().$isolateScope, ids);\n                var scopeWatchers = getWatchersFromScope(element.data().$scope, ids);\n                var watchers = scopeWatchers.concat(isolateWatchers);\n                angular.forEach(element.children(), function (childElement) {\n                    watchers = watchers.concat(getElemWatchers(angular.element(childElement), ids));\n                });\n                return watchers;\n            }\n\n            function getWatchersFromScope(scope, ids) {\n                if (scope) {\n                    if (_.indexOf(ids, scope.$id) > -1) {\n                        return [];\n                    }\n                    ids.push(scope.$id);\n                    if (scope.$$watchers) {\n                        if (scope.$$watchers.length > 1) {\n                            var a;\n                            a = 1;\n                        }\n                        return scope.$$watchers;\n                    }\n                    {\n                        return [];\n                    }\n\n                } else {\n                    return [];\n                }\n            }\n\n            return getElemWatchers(root, ids);\n        }\n\n    }, 100);\nconsole.log(\"end\");\n}\n\n","\r\nSearchHistoryService.$inject = [\"$filter\", \"$http\"];angular\r\n    .module('nzbhydraApp')\r\n    .factory('SearchHistoryService', SearchHistoryService);\r\n\r\nfunction SearchHistoryService($filter, $http) {\r\n\r\n    return {\r\n        getSearchHistory: getSearchHistory,\r\n        getSearchHistoryForSearching: getSearchHistoryForSearching,\r\n        formatRequest: formatRequest,\r\n        getStateParamsForRepeatedSearch: getStateParamsForRepeatedSearch\r\n    };\r\n\r\n    function getSearchHistoryForSearching() {\r\n        return $http.post(\"internalapi/history/searches/forsearching\").success(function (response) {\r\n            return {\r\n                searchRequests: response\r\n            }\r\n        });\r\n    }\r\n\r\n    function getSearchHistory(pageNumber, limit, filterModel, sortModel, distinct, onlyCurrentUser) {\r\n        var params = {\r\n            page: pageNumber,\r\n            limit: limit,\r\n            filterModel: filterModel,\r\n            distinct: distinct,\r\n            onlyCurrentUser: onlyCurrentUser\r\n        };\r\n        if (angular.isUndefined(pageNumber)) {\r\n            params.page = 1;\r\n        }\r\n        if (angular.isUndefined(limit)) {\r\n            params.limit = 100;\r\n        }\r\n        if (angular.isUndefined(filterModel)) {\r\n            params.filterModel = {}\r\n        }\r\n        if (!angular.isUndefined(sortModel)) {\r\n            params.sortModel = sortModel;\r\n        } else {\r\n            params.sortModel = {\r\n                column: \"time\",\r\n                sortMode: 2\r\n            };\r\n        }\r\n        return $http.post(\"internalapi/history/searches\", params).success(function (response) {\r\n            return {\r\n                searchRequests: response.content,\r\n                totalRequests: response.totalElements\r\n            }\r\n        });\r\n    }\r\n\r\n    function formatRequest(request, includeIdLink, includequery, describeEmptySearch, includeTitle) {\r\n        var result = [];\r\n        result.push('<span class=\"history-title\">Category: </span>' + request.categoryName);\r\n        if (includequery && request.query) {\r\n            result.push('<span class=\"history-title\">Query: </span>' + request.query);\r\n        }\r\n        if (request.title && includeTitle) {\r\n            result.push('<span class=\"history-title\">Title: </span>' + request.title);\r\n        } //Only include identifiers if title is unknown\r\n        else if (request.identifiers.length > 0) {\r\n            var href;\r\n            var key;\r\n            var value;\r\n            var identifiers = _.indexBy(request.identifiers, 'identifierKey');\r\n            if (\"IMDB\" in identifiers) {\r\n                key = \"IMDB ID\";\r\n                value = identifiers.IMDB.identifierValue;\r\n                href = \"https://www.imdb.com/title/tt\" + value;\r\n            } else if (\"TVDB\" in identifiers) {\r\n                key = \"TVDB ID\";\r\n                value = identifiers.TVDB.identifierValue;\r\n                href = \"https://thetvdb.com/?tab=series&id=\" + value;\r\n            } else if (\"TVRAGE\" in identifiers) {\r\n                key = \"TVRage ID\";\r\n                value = identifiers.TVRAGE.identifierValue;\r\n                href = \"internalapi/redirect_rid?rid=\" + value;\r\n            } else if (\"TMDB\" in identifiers) {\r\n                key = \"TMDB ID\";\r\n                value = identifiers.TMDB.identifierValue;\r\n                href = \"https://www.themoviedb.org/movie/\" + value;\r\n            }\r\n            href = $filter(\"dereferer\")(href);\r\n            if (includeIdLink) {\r\n                result.push('<span class=\"history-title\">' + key + ': </span><a target=\"_blank\" href=\"' + href + '\">' + value + \"</a>\");\r\n            } else {\r\n                result.push('<span class=\"history-title\">' + key + \": </span>\" + value);\r\n            }\r\n        }\r\n        if (request.season) {\r\n            result.push('<span class=\"history-title\">Season: </span>' + request.season);\r\n        }\r\n        if (request.episode) {\r\n            result.push('<span class=\"history-title\">Episode: </span>' + request.episode);\r\n        }\r\n        if (request.author) {\r\n            result.push('<span class=\"history-title\">Author: </span>' + request.author);\r\n        }\r\n        if (result.length === 0 && describeEmptySearch) {\r\n            result = ['<span class=\"history-title\">Empty search</span>'];\r\n        }\r\n\r\n        return result.join(\", \");\r\n\r\n    }\r\n\r\n    function getStateParamsForRepeatedSearch(request) {\r\n        var stateParams = {};\r\n        stateParams.mode = \"search\";\r\n        var availableIdentifiers = _.pluck(request.identifiers, \"identifierKey\");\r\n        if (availableIdentifiers.indexOf(\"TMDB\") > -1 || availableIdentifiers.indexOf(\"IMDB\") > -1) {\r\n            stateParams.mode = \"movie\";\r\n        } else if (availableIdentifiers.indexOf(\"TVRAGE\") > -1 || availableIdentifiers.indexOf(\"TVMAZE\") > -1 || availableIdentifiers.indexOf(\"TVDB\") > -1) {\r\n            stateParams.mode = \"tvsearch\";\r\n        }\r\n        if (request.season) {\r\n            stateParams.season = request.season;\r\n        }\r\n        if (request.episode) {\r\n            stateParams.episode = request.episode;\r\n        }\r\n\r\n        _.each(request.identifiers, function(entry) {\r\n            switch(entry.identifierKey) {\r\n                case \"TMDB\":\r\n                    stateParams.tmdbid = entry.identifierValue;\r\n                    break;\r\n                case \"IMDB\":\r\n                    stateParams.imdbid = entry.identifierValue;\r\n                    break;\r\n                case \"TVMAZE\":\r\n                    stateParams.tvmazeid = entry.identifierValue;\r\n                    break;\r\n                case \"TVRAGE\":\r\n                    stateParams.tvrageid = entry.identifierValue;\r\n                    break;\r\n                case \"TVDB\":\r\n                    stateParams.tvdbid = entry.identifierValue;\r\n                    break;\r\n            }\r\n        });\r\n\r\n\r\n        if (request.query !== \"\") {\r\n            stateParams.query = request.query;\r\n        }\r\n\r\n        if (request.title) {\r\n            stateParams.title = request.title;\r\n        }\r\n\r\n        if (request.categoryName) {\r\n            stateParams.category = request.categoryName;\r\n        }\r\n\r\n        return stateParams;\r\n    }\r\n\r\n\r\n}","\r\nSearchHistoryController.$inject = [\"$scope\", \"$state\", \"SearchHistoryService\", \"ConfigService\", \"history\", \"$sce\", \"$filter\", \"$timeout\", \"$http\", \"$uibModal\"];angular\r\n    .module('nzbhydraApp')\r\n    .controller('SearchHistoryController', SearchHistoryController);\r\n\r\n\r\nfunction SearchHistoryController($scope, $state, SearchHistoryService, ConfigService, history, $sce, $filter, $timeout, $http, $uibModal) {\r\n    $scope.limit = 100;\r\n    $scope.pagination = {\r\n        current: 1\r\n    };\r\n    var sortModel = {\r\n        column: \"time\",\r\n        sortMode: 2\r\n    };\r\n    $timeout(function () {\r\n        $scope.$broadcast(\"newSortColumn\", sortModel.column, sortModel.sortMode);\r\n    }, 10);\r\n    $scope.filterModel = {};\r\n\r\n    //Filter options\r\n    $scope.categoriesForFiltering = [];\r\n    _.forEach(ConfigService.getSafe().categoriesConfig.categories, function (category) {\r\n        $scope.categoriesForFiltering.push({label: category.name, id: category.name})\r\n    });\r\n    $scope.preselectedTimeInterval = {beforeDate: null, afterDate: null};\r\n    $scope.accessOptionsForFiltering = [{label: \"All\", value: \"all\"}, {label: \"API\", value: 'API'}, {label: \"Internal\", value: 'INTERNAL'}];\r\n\r\n    //Preloaded data\r\n    $scope.searchRequests = history.data.content;\r\n    $scope.totalRequests = history.data.totalElements;\r\n\r\n    var anyUsername = false;\r\n    var anyIp = false;\r\n    for (var request in $scope.searchRequests) {\r\n        if (request.username) {\r\n            anyUsername = true;\r\n        }\r\n        if (request.ip) {\r\n            anyIp = true;\r\n        }\r\n        if (anyIp && anyUsername) {\r\n            break;\r\n        }\r\n    }\r\n    $scope.columnSizes = {\r\n        time: 10,\r\n        query: 30,\r\n        category: 10,\r\n        additionalParameters: 22,\r\n        source: 8,\r\n        username: 10,\r\n        ip: 10\r\n    };\r\n    if (ConfigService.getSafe().logging.historyUserInfoType === \"NONE\" || (!anyUsername && !anyIp)) {\r\n        $scope.columnSizes.username = 0;\r\n        $scope.columnSizes.ip = 0;\r\n        $scope.columnSizes.query += 10;\r\n        $scope.columnSizes.additionalParameters += 10;\r\n    } else if (ConfigService.getSafe().logging.historyUserInfoType === \"IP\") {\r\n        $scope.columnSizes.username = 0;\r\n        $scope.columnSizes.query += 5;\r\n        $scope.columnSizes.additionalParameters += 5;\r\n    } else if (ConfigService.getSafe().logging.historyUserInfoType === \"USERNAME\") {\r\n        $scope.columnSizes.ip = 0;\r\n        $scope.columnSizes.query += 5;\r\n        $scope.columnSizes.additionalParameters += 5;\r\n    }\r\n\r\n    $scope.update = function () {\r\n        SearchHistoryService.getSearchHistory($scope.pagination.current, $scope.limit, $scope.filterModel, sortModel).then(function (history) {\r\n            $scope.searchRequests = history.data.content;\r\n            $scope.totalRequests = history.data.totalElements;\r\n        });\r\n    };\r\n\r\n    $scope.$on(\"sort\", function (event, column, sortMode) {\r\n        if (sortMode === 0) {\r\n            sortModel = {\r\n                column: \"time\",\r\n                sortMode: 2\r\n            };\r\n        } else {\r\n            sortModel = {\r\n                column: column,\r\n                sortMode: sortMode\r\n            };\r\n        }\r\n        $scope.$broadcast(\"newSortColumn\", sortModel.column, sortModel.sortMode);\r\n        $scope.update();\r\n    });\r\n\r\n    $scope.$on(\"filter\", function (event, column, filterModel, isActive) {\r\n        if (filterModel.filterValue) {\r\n            $scope.filterModel[column] = filterModel;\r\n        } else {\r\n            delete $scope.filterModel[column];\r\n        }\r\n        $scope.update();\r\n    });\r\n\r\n\r\n    $scope.openSearch = function (request) {\r\n        $state.go(\"root.search\", SearchHistoryService.getStateParamsForRepeatedSearch(request), {inherit: false, notify: true, reload: true});\r\n    };\r\n\r\n    $scope.formatQuery = function (request) {\r\n        if (request.title) {\r\n            return request.title;\r\n        }\r\n\r\n        if (!request.query && request.identifiers.length === 0 && !request.season && !request.episode) {\r\n            return \"Update query\";\r\n        }\r\n        return request.query;\r\n    };\r\n\r\n    $scope.formatAdditional = function (request) {\r\n        var result = [];\r\n        if (request.identifiers.length > 0) {\r\n            var href;\r\n            var key;\r\n            var value;\r\n            var pair = _.find(request.identifiers, function (pair) {\r\n                return pair.identifierKey === \"TMDB\"\r\n            });\r\n            if (angular.isDefined(pair)) {\r\n                key = \"TMDB ID\";\r\n                href = \"https://www.themoviedb.org/movie/\" + pair.identifierValue;\r\n                href = $filter(\"dereferer\")(href);\r\n                value = pair.identifierValue;\r\n            }\r\n\r\n            pair = _.find(request.identifiers, function (pair) {\r\n                return pair.identifierKey === \"IMDB\"\r\n            });\r\n            if (angular.isDefined(pair)) {\r\n                key = \"IMDB ID\";\r\n                href = \"https://www.imdb.com/title/tt\" + pair.identifierValue;\r\n                href = $filter(\"dereferer\")(href);\r\n                value = pair.identifierValue;\r\n            }\r\n\r\n            pair = _.find(request.identifiers, function (pair) {\r\n                return pair.identifierKey === \"TVDB\"\r\n            });\r\n            if (angular.isDefined(pair)) {\r\n                key = \"TVDB ID\";\r\n                href = \"https://thetvdb.com/?tab=series&id=\" + pair.identifierValue;\r\n                href = $filter(\"dereferer\")(href);\r\n                value = pair.identifierValue;\r\n            }\r\n\r\n            pair = _.find(request.identifiers, function (pair) {\r\n                return pair.identifierKey === \"TVRAGE\"\r\n            });\r\n            if (angular.isDefined(pair)) {\r\n                key = \"TVRage ID\";\r\n                href = \"internalapi/redirectRid/\" + pair.identifierValue;\r\n                value = pair.identifierValue;\r\n            }\r\n\r\n            result.push(key + \": \" + '<a target=\"_blank\" href=\"' + href + '\">' + value + \"</a>\");\r\n        }\r\n        if (request.season) {\r\n            result.push(\"Season: \" + request.season);\r\n        }\r\n        if (request.episode) {\r\n            result.push(\"Episode: \" + request.episode);\r\n        }\r\n        if (request.author) {\r\n            result.push(\"Author: \" + request.author);\r\n        }\r\n        return $sce.trustAsHtml(result.join(\", \"));\r\n    };\r\n\r\n    $scope.showDetails = function (searchId) {\r\n\r\n        ModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"$http\", \"searchId\"];\r\n        function ModalInstanceCtrl($scope, $uibModalInstance, $http, searchId) {\r\n            $http.get(\"internalapi/history/searches/details/\" + searchId).then(function (data) {\r\n                $scope.details = data.data;\r\n            });\r\n        }\r\n\r\n        $uibModal.open({\r\n            templateUrl: 'static/html/search-history-details-modal.html',\r\n            controller: ModalInstanceCtrl,\r\n            size: \"md\",\r\n            resolve: {\r\n                searchId: function () {\r\n                    return searchId;\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n","\r\nSearchController.$inject = [\"$scope\", \"$http\", \"$stateParams\", \"$state\", \"$uibModal\", \"$timeout\", \"$sce\", \"growl\", \"SearchService\", \"focus\", \"ConfigService\", \"HydraAuthService\", \"CategoriesService\", \"$element\", \"SearchHistoryService\"];\r\nSearchUpdateModalInstanceCtrl.$inject = [\"$scope\", \"$interval\", \"SearchService\", \"$uibModalInstance\", \"searchRequestId\", \"onCancel\"];angular\r\n    .module('nzbhydraApp')\r\n    .controller('SearchController', SearchController);\r\n\r\nfunction SearchController($scope, $http, $stateParams, $state, $uibModal, $timeout, $sce, growl, SearchService, focus, ConfigService, HydraAuthService, CategoriesService, $element, SearchHistoryService) {\r\n\r\n    function getNumberOrUndefined(number) {\r\n        if (_.isUndefined(number) || _.isNaN(number) || number === \"\") {\r\n            return undefined;\r\n        }\r\n        number = parseInt(number);\r\n        if (_.isNumber(number)) {\r\n            return number;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    var searchRequestId = 0;\r\n    var isSearchCancelled = false;\r\n    var epochEnter;\r\n\r\n    //Fill the form with the search values we got from the state params (so that their values are the same as in the current url)\r\n    $scope.mode = $stateParams.mode;\r\n    $scope.query = \"\";\r\n    $scope.selectedItem = null;\r\n    $scope.categories = _.filter(CategoriesService.getAllCategories(), function (c) {\r\n        return c.mayBeSelected && !(c.ignoreResultsFrom === \"INTERNAL\" || c.ignoreResultsFrom === \"BOTH\");\r\n    });\r\n    if (angular.isDefined($stateParams.category) && $stateParams.category) {\r\n        $scope.category = CategoriesService.getByName($stateParams.category);\r\n    } else {\r\n        $scope.category = CategoriesService.getDefault();\r\n    }\r\n    $scope.category = (_.isUndefined($stateParams.category) || $stateParams.category === \"\") ? CategoriesService.getDefault() : CategoriesService.getByName($stateParams.category);\r\n    $scope.season = $stateParams.season;\r\n    $scope.episode = $stateParams.episode;\r\n    $scope.query = $stateParams.query;\r\n    $scope.minsize = getNumberOrUndefined($stateParams.minsize);\r\n    $scope.maxsize = getNumberOrUndefined($stateParams.maxsize);\r\n    $scope.minage = getNumberOrUndefined($stateParams.minage);\r\n    $scope.maxage = getNumberOrUndefined($stateParams.maxage);\r\n    if (angular.isDefined($stateParams.indexers)) {\r\n        $scope.indexers = decodeURIComponent($stateParams.indexers).split(\",\");\r\n    }\r\n    if (angular.isDefined($stateParams.title) && (angular.isDefined($stateParams.tmdbid) || angular.isDefined($stateParams.imdbid) || angular.isDefined($stateParams.tvmazeid) || angular.isDefined($stateParams.rid) || angular.isDefined($stateParams.tvdbid))) {\r\n        $scope.selectedItem = {\r\n            tmdbId: $stateParams.tmdbid,\r\n            imdbId: $stateParams.imdbid,\r\n            tvmazeId: $stateParams.tvmazeid,\r\n            rid: $stateParams.rid,\r\n            tvdbId: $stateParams.tvdbid,\r\n            title: $stateParams.title\r\n        }\r\n    }\r\n\r\n    $scope.showIndexers = {};\r\n\r\n    $scope.searchHistory = [];\r\n\r\n    var safeConfig = ConfigService.getSafe();\r\n    $scope.showIndexerSelection = HydraAuthService.getUserInfos().showIndexerSelection;\r\n\r\n\r\n    $scope.typeAheadWait = 300;\r\n\r\n    $scope.autocompleteLoading = false;\r\n    $scope.isAskById = $scope.category.searchType === \"TVSEARCH\" || $scope.category.searchType === \"MOVIE\";\r\n    $scope.isById = {value: $scope.selectedItem !== null || angular.isUndefined($scope.mode) || $scope.mode === null}; //If true the user wants to search by id so we enable autosearch. Was unable to achieve this using a simple boolean. Set to false if last search was not by ID\r\n    $scope.availableIndexers = [];\r\n    $scope.selectedIndexers = [];\r\n    $scope.autocompleteClass = \"autocompletePosterMovies\";\r\n\r\n    $scope.toggleCategory = function (searchCategory) {\r\n        var oldCategory = $scope.category;\r\n        $scope.category = searchCategory;\r\n\r\n        //Show checkbox to ask if the user wants to search by ID (using autocomplete)\r\n        if ($scope.category.searchType === \"TVSEARCH\" || $scope.category.searchType === \"MOVIE\") {\r\n            $scope.isAskById = true;\r\n            $scope.isById.value = true;\r\n        } else {\r\n            $scope.isAskById = false;\r\n            $scope.isById.value = false;\r\n        }\r\n\r\n        if (oldCategory.searchType !== searchCategory.searchType) {\r\n            $scope.selectedItem = null;\r\n        }\r\n\r\n        focus('searchfield');\r\n\r\n        //Hacky way of triggering the autocomplete loading\r\n        var searchModel = $element.find(\"#searchfield\").controller(\"ngModel\");\r\n        if (angular.isDefined(searchModel.$viewValue)) {\r\n            searchModel.$setViewValue(searchModel.$viewValue + \" \");\r\n        }\r\n\r\n        if (safeConfig.categoriesConfig.enableCategorySizes) {\r\n            var min = searchCategory.minSizePreset;\r\n            var max = searchCategory.maxSizePreset;\r\n            if (_.isNumber(min)) {\r\n                $scope.minsize = min;\r\n            } else {\r\n                $scope.minsize = \"\";\r\n            }\r\n            if (_.isNumber(max)) {\r\n                $scope.maxsize = max;\r\n            } else {\r\n                $scope.maxsize = \"\";\r\n            }\r\n        }\r\n\r\n        $scope.availableIndexers = getAvailableIndexers();\r\n    };\r\n\r\n\r\n    // Any function returning a promise object can be used to load values asynchronously\r\n    $scope.getAutocomplete = function (val) {\r\n        $scope.autocompleteLoading = true;\r\n        //Expected model returned from API:\r\n        //label: What to show in the results\r\n        //title: Will be used for file search\r\n        //value: Will be used as extraInfo (ttid oder tvdb id)\r\n        //poster: url of poster to show\r\n\r\n        //Don't use autocomplete if checkbox is disabled\r\n        if (!$scope.isById.value || $scope.selectedItem) {\r\n            return {};\r\n        }\r\n\r\n        if ($scope.category.searchType === \"MOVIE\") {\r\n            return $http.get('internalapi/autocomplete/MOVIE/' + val).then(function (response) {\r\n                $scope.autocompleteLoading = false;\r\n                return response.data;\r\n            });\r\n        } else if ($scope.category.searchType === \"TVSEARCH\") {\r\n            return $http.get('internalapi/autocomplete/TV/' + val).then(function (response) {\r\n                $scope.autocompleteLoading = false;\r\n                return response.data;\r\n            });\r\n        } else {\r\n            return {};\r\n        }\r\n    };\r\n\r\n    $scope.onTypeAheadEnter = function () {\r\n        if (angular.isDefined(epochEnter)) {\r\n            //Very hacky way of preventing a press of \"enter\" to select an autocomplete item from triggering a search\r\n            //This is called *after* selectAutoComplete() is called\r\n            var epochEnterNow = (new Date).getTime();\r\n            var diff = epochEnterNow - epochEnter;\r\n            if (diff > 50) {\r\n                $scope.initiateSearch();\r\n            }\r\n        } else {\r\n            $scope.initiateSearch();\r\n        }\r\n    };\r\n\r\n    $scope.onTypeAheadKeyDown = function (event) {\r\n        if (event.keyCode === 8) {\r\n            if ($scope.query === \"\") {\r\n                $scope.clearAutocomplete();\r\n            }\r\n        }\r\n    };\r\n\r\n    //Is called when the search page is opened with params, either because the user initiated the search (which triggered a goTo to this page) or because a search URL was entered\r\n    $scope.startSearch = function () {\r\n        // console.time(\"searchonly\");\r\n        // console.time(\"searchall\");\r\n        isSearchCancelled = false;\r\n        searchRequestId = Math.round(Math.random() * 999999);\r\n        var modalInstance = $scope.openModal(searchRequestId);\r\n\r\n        var indexers = angular.isUndefined($scope.indexers) ? undefined : $scope.indexers.join(\",\");\r\n        SearchService.search(searchRequestId, $scope.category.name, $scope.query, $scope.selectedItem, $scope.season, $scope.episode, $scope.minsize, $scope.maxsize, $scope.minage, $scope.maxage, indexers, $scope.mode).then(function () {\r\n                //modalInstance.close();\r\n                SearchService.setModalInstance(modalInstance);\r\n                if (!isSearchCancelled) {\r\n                    $state.go(\"root.search.results\", {\r\n                        minsize: $scope.minsize,\r\n                        maxsize: $scope.maxsize,\r\n                        minage: $scope.minage,\r\n                        maxage: $scope.maxage\r\n                    }, {\r\n                        inherit: true\r\n                    });\r\n                }\r\n            },\r\n            function () {\r\n                modalInstance.close();\r\n            });\r\n    };\r\n\r\n    $scope.openModal = function openModal(searchRequestId) {\r\n        return $uibModal.open({\r\n            templateUrl: 'static/html/search-state.html',\r\n            controller: SearchUpdateModalInstanceCtrl,\r\n            size: \"md\",\r\n            backdrop: \"static\",\r\n            backdropClass: \"waiting-cursor\",\r\n            resolve: {\r\n                searchRequestId: function () {\r\n                    return searchRequestId;\r\n                },\r\n                onCancel: function () {\r\n                    function cancel() {\r\n                        isSearchCancelled = true;\r\n                    }\r\n\r\n                    return cancel;\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.goToSearchUrl = function () {\r\n        //State params (query parameters) should all be lowercase\r\n        var stateParams = {};\r\n        stateParams.mode = $scope.category.searchType.toLowerCase();\r\n        stateParams.imdbid = $scope.selectedItem === null ? null : $scope.selectedItem.imdbId;\r\n        stateParams.tmdbid = $scope.selectedItem === null ? null : $scope.selectedItem.tmdbId;\r\n        stateParams.tvdbid = $scope.selectedItem === null ? null : $scope.selectedItem.tvdbId;\r\n        stateParams.tvrageid = $scope.selectedItem === null ? null : $scope.selectedItem.tvrageId;\r\n        stateParams.tvmazeid = $scope.selectedItem === null ? null : $scope.selectedItem.tvmazeId;\r\n        stateParams.title = $scope.selectedItem === null ? null : $scope.selectedItem.title;\r\n        stateParams.season = $scope.season;\r\n        stateParams.episode = $scope.episode;\r\n        stateParams.query = $scope.query;\r\n        stateParams.minsize = $scope.minsize;\r\n        stateParams.maxsize = $scope.maxsize;\r\n        stateParams.minage = $scope.minage;\r\n        stateParams.maxage = $scope.maxage;\r\n        stateParams.category = $scope.category.name;\r\n        stateParams.indexers = encodeURIComponent($scope.selectedIndexers.join(\",\"));\r\n        $state.go(\"root.search\", stateParams, {inherit: false, notify: true, reload: true});\r\n    };\r\n\r\n    $scope.repeatSearch = function (request) {\r\n        var stateParams = SearchHistoryService.getStateParamsForRepeatedSearch(request);\r\n        stateParams.indexers = encodeURIComponent($scope.selectedIndexers.join(\",\"));\r\n        $state.go(\"root.search\", stateParams, {inherit: false, notify: true, reload: true});\r\n    };\r\n\r\n    $scope.searchBoxTooltip = \"Prefix terms with -- to exclude'\";\r\n    $scope.$watchGroup(['isAskById', 'selectedItem'], function () {\r\n        if (!$scope.isAskById) {\r\n            $scope.searchBoxTooltip = \"Prefix terms with -- to exclude\";\r\n        } else if ($scope.selectedItem === null) {\r\n            $scope.searchBoxTooltip = \"Enter search terms for autocomplete\";\r\n        } else {\r\n            $scope.searchBoxTooltip = \"Enter additional search terms to limit the query\";\r\n        }\r\n    });\r\n\r\n    $scope.clearAutocomplete = function () {\r\n        $scope.selectedItem = null;\r\n        $scope.query = \"\"; //Input is now for autocomplete and not for limiting the results\r\n        focus('searchfield');\r\n    };\r\n\r\n    $scope.selectAutocompleteItem = function ($item) {\r\n        $scope.selectedItem = $item;\r\n        $scope.query = \"\";\r\n        epochEnter = (new Date).getTime();\r\n    };\r\n\r\n    $scope.initiateSearch = function () {\r\n        if ($scope.selectedItem) {\r\n            //Movie or tv show was selected\r\n            $scope.goToSearchUrl();\r\n        } else {\r\n            //Simple query search\r\n            $scope.goToSearchUrl();\r\n        }\r\n    };\r\n\r\n    $scope.autocompleteActive = function () {\r\n        return $scope.isAskById;\r\n    };\r\n\r\n    $scope.seriesSelected = function () {\r\n        return $scope.category.searchType === \"TVSEARCH\";\r\n    };\r\n\r\n    $scope.toggleIndexer = function (indexer) {\r\n        $scope.availableIndexers[indexer.name].activated = !$scope.availableIndexers[indexer.name].activated;\r\n    };\r\n\r\n    function isIndexerPreselected(indexer) {\r\n        if (angular.isUndefined($scope.indexers)) {\r\n            return indexer.preselect;\r\n        } else {\r\n            return _.contains($scope.indexers, indexer.name);\r\n        }\r\n    }\r\n\r\n    function getAvailableIndexers() {\r\n        var alreadySelected = $scope.selectedIndexers;\r\n        var previouslyAvailable = _.pluck($scope.availableIndexers, \"name\");\r\n        $scope.selectedIndexers = [];\r\n        var availableIndexersList = _.chain(safeConfig.indexers).filter(function (indexer) {\r\n            return indexer.enabled && indexer.showOnSearch && (angular.isUndefined(indexer.categories) || indexer.categories.length === 0 || $scope.category.name.toLowerCase() === \"all\" || indexer.categories.indexOf($scope.category.name) > -1);\r\n        }).sortBy(function (indexer) {\r\n            return indexer.name.toLowerCase();\r\n        })\r\n            .map(function (indexer) {\r\n                return {name: indexer.name, activated: isIndexerPreselected(indexer), preselect: indexer.preselect, categories: indexer.categories, searchModuleType: indexer.searchModuleType};\r\n            }).value();\r\n        _.forEach(availableIndexersList, function (x) {\r\n            var deselectedBefore = (_.indexOf(previouslyAvailable, x.name) > -1 && _.indexOf(alreadySelected, x.name) === -1);\r\n            var selectedBefore = (_.indexOf(previouslyAvailable, x.name) > -1 && _.indexOf(alreadySelected, x.name) > -1);\r\n            if ((x.activated && !deselectedBefore) || selectedBefore) {\r\n                $scope.selectedIndexers.push(x.name);\r\n            }\r\n        });\r\n        return availableIndexersList;\r\n    }\r\n\r\n\r\n    $scope.formatRequest = function (request) {\r\n        return $sce.trustAsHtml(SearchHistoryService.formatRequest(request, false, true, true, true));\r\n    };\r\n\r\n    $scope.availableIndexers = getAvailableIndexers();\r\n\r\n    function getAndSetSearchRequests() {\r\n        SearchHistoryService.getSearchHistoryForSearching().success(function (data) {\r\n            $scope.searchHistory = data;\r\n        });\r\n    }\r\n\r\n    if ($scope.mode) {\r\n        $scope.startSearch();\r\n    } else {\r\n        //Getting the search history only makes sense when we're not currently searching\r\n        _.defer(getAndSetSearchRequests);\r\n    }\r\n\r\n    $scope.$on(\"searchResultsShown\", function () {\r\n        _.defer(getAndSetSearchRequests); //Defer because otherwise the results are only shown when this returns which may take a while with big databases\r\n    });\r\n\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('SearchUpdateModalInstanceCtrl', SearchUpdateModalInstanceCtrl);\r\n\r\nfunction SearchUpdateModalInstanceCtrl($scope, $interval, SearchService, $uibModalInstance, searchRequestId, onCancel) {\r\n\r\n    var updateSearchMessagesInterval = undefined;\r\n    var loggedSearchFinished = false;\r\n    $scope.messages = [];\r\n    $scope.indexerSelectionFinished = false;\r\n    $scope.indexersSelected = 0;\r\n    $scope.indexersFinished = 0;\r\n\r\n    updateSearchMessagesInterval = $interval(function () {\r\n        SearchService.getSearchState(searchRequestId).then(function (data) {\r\n                $scope.indexerSelectionFinished = data.data.indexerSelectionFinished;\r\n                $scope.searchFinished = data.data.searchFinished;\r\n                $scope.indexersSelected = data.data.indexersSelected;\r\n                $scope.indexersFinished = data.data.indexersFinished;\r\n                $scope.progressMax = data.data.indexersSelected;\r\n                if ($scope.progressMax > data.data.indexersSelected) {\r\n                    $scope.progressMax = \">=\" + data.data.indexersSelected;\r\n                }\r\n                if (data.data.messages) {\r\n                    $scope.messages = data.data.messages;\r\n                }\r\n                if ($scope.searchFinished && !loggedSearchFinished) {\r\n                    $scope.messages.push(\"Finished searching. Preparing results...\");\r\n                    loggedSearchFinished = true;\r\n                }\r\n            },\r\n            function () {\r\n                $interval.cancel(updateSearchMessagesInterval);\r\n            }\r\n        );\r\n    }, 100);\r\n\r\n    $scope.cancelSearch = function () {\r\n        if (angular.isDefined(updateSearchMessagesInterval)) {\r\n            $interval.cancel(updateSearchMessagesInterval);\r\n        }\r\n        onCancel();\r\n        $uibModalInstance.dismiss();\r\n    };\r\n\r\n\r\n    $scope.$on('$destroy', function () {\r\n        if (angular.isDefined(updateSearchMessagesInterval)) {\r\n            $interval.cancel(updateSearchMessagesInterval);\r\n        }\r\n    });\r\n}\r\n","\r\nRestartService.$inject = [\"growl\", \"NzbHydraControlService\", \"$uibModal\"];\r\nRestartModalInstanceCtrl.$inject = [\"$scope\", \"$timeout\", \"$http\", \"$window\", \"RequestsErrorHandler\", \"message\", \"baseUrl\"];angular\r\n    .module('nzbhydraApp')\r\n    .factory('RestartService', RestartService);\r\n\r\nfunction RestartService(growl, NzbHydraControlService, $uibModal) {\r\n\r\n    return {\r\n        restart: restart,\r\n        startCountdown: startCountdown\r\n    };\r\n\r\n\r\n    function restart(message) {\r\n        NzbHydraControlService.restart().then(function (data) {\r\n            startCountdown(message, data.data.message);\r\n        }, function () {\r\n            growl.info(\"Unable to send restart command.\");\r\n        })\r\n    }\r\n\r\n    function startCountdown(message, baseUrl) {\r\n        $uibModal.open({\r\n            templateUrl: 'static/html/restart-modal.html',\r\n            controller: RestartModalInstanceCtrl,\r\n            size: \"md\",\r\n            backdrop: 'static',\r\n            keyboard: false,\r\n            resolve: {\r\n                message: function () {\r\n                    return message;\r\n                },\r\n                baseUrl: function () {\r\n                    return baseUrl;\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('RestartModalInstanceCtrl', RestartModalInstanceCtrl);\r\n\r\nfunction RestartModalInstanceCtrl($scope, $timeout, $http, $window, RequestsErrorHandler, message, baseUrl) {\r\n\r\n    message = (angular.isDefined(message) ? message : \"\");\r\n    $scope.message = message + \"Will reload page when NZBHydra is back\";\r\n    $scope.baseUrl = baseUrl;\r\n    $scope.pingUrl = angular.isDefined(baseUrl) ? (baseUrl + \"/internalapi/control/ping\") : \"internalapi/control/ping\";\r\n\r\n    $scope.internalCaR = function (message, timer) {\r\n        if (timer === 45) {\r\n            $scope.message = message + \" Restarting takes longer than expected. You might want to check the log to see what's going on.\";\r\n        } else {\r\n            $scope.message = message + \" Will reload page when NZBHydra is back.\";\r\n            $timeout(function () {\r\n                RequestsErrorHandler.specificallyHandled(function () {\r\n                    $http.get($scope.pingUrl, {ignoreLoadingBar: true}).then(\r\n                        function () {\r\n                            $timeout(function () {\r\n                                $scope.message = \"Reloading page...\";\r\n                                if (angular.isDefined($scope.baseUrl)) {\r\n                                    $window.location.href = $scope.baseUrl;\r\n                                } else {\r\n                                    $window.location.reload();\r\n                                }\r\n                            }, 2000); //Give Hydra some time to load in the background, it might return the ping but not be completely up yet\r\n                        }, function () {\r\n                            $scope.internalCaR(message, timer + 1);\r\n                        });\r\n                });\r\n            }, 1000);\r\n            $scope.message = message + \" Will reload page when NZBHydra is back.\";\r\n        }\r\n    };\r\n\r\n    //Wait three seconds because otherwise the currently running instance will be found\r\n    $timeout(function () {\r\n        $scope.internalCaR(message, 0);\r\n    }, 3000)\r\n}","\r\nNzbHydraControlService.$inject = [\"$http\"];angular\r\n    .module('nzbhydraApp')\r\n    .factory('NzbHydraControlService', NzbHydraControlService);\r\n\r\nfunction NzbHydraControlService($http) {\r\n\r\n    return {\r\n        restart: restart,\r\n        shutdown: shutdown\r\n    };\r\n\r\n    function restart() {\r\n        return $http.get(\"internalapi/control/restart\");\r\n    }\r\n\r\n    function shutdown() {\r\n        return $http.get(\"internalapi/control/shutdown\");\r\n    }\r\n\r\n}\r\n","\r\nNzbDownloadService.$inject = [\"$http\", \"ConfigService\", \"DownloaderCategoriesService\"];angular\r\n    .module('nzbhydraApp')\r\n    .factory('NzbDownloadService', NzbDownloadService);\r\n\r\nfunction NzbDownloadService($http, ConfigService, DownloaderCategoriesService) {\r\n\r\n    var service = {\r\n        download: download,\r\n        getEnabledDownloaders: getEnabledDownloaders\r\n    };\r\n\r\n    return service;\r\n\r\n    function sendNzbAddCommand(downloader, searchResults, category) {\r\n        var params = {downloaderName: downloader.name, searchResults: searchResults, category: category === \"No category\" ? \"\" : category};\r\n        return $http.put(\"internalapi/downloader/addNzbs\", params);\r\n    }\r\n\r\n    function download(downloader, searchResults, alwaysAsk) {\r\n        var category = downloader.defaultCategory;\r\n        if (alwaysAsk || ((_.isUndefined(category) || category === \"\" || category === null) && category !== \"No category\")) {\r\n            return DownloaderCategoriesService.openCategorySelection(downloader).then(function (category) {\r\n                return sendNzbAddCommand(downloader, searchResults, category);\r\n            }, function (result) {\r\n                return result;\r\n            });\r\n        } else {\r\n            return sendNzbAddCommand(downloader, searchResults, category)\r\n        }\r\n    }\r\n\r\n    function getEnabledDownloaders() {\r\n        return _.filter(ConfigService.getSafe().downloading.downloaders, \"enabled\");\r\n    }\r\n}\r\n\r\n","\r\nModalService.$inject = [\"$uibModal\"];\r\nModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"headline\", \"message\", \"params\", \"textAlign\"];angular\r\n    .module('nzbhydraApp')\r\n    .factory('ModalService', ModalService);\r\n\r\nfunction ModalService($uibModal) {\r\n\r\n    return {\r\n        open: open\r\n    };\r\n\r\n    function open(headline, message, params, size, textAlign) {\r\n        //params example:\r\n        /*\r\n         var p =\r\n         {\r\n         yes: {\r\n         text: \"Yes\",    //default: Ok\r\n         onYes: function() {}\r\n         },\r\n         no: {               //default: Empty\r\n         text: \"No\",\r\n         onNo: function () {\r\n         }\r\n         },\r\n         cancel: {\r\n         text: \"Cancel\", //default: Cancel\r\n         onCancel: function () {\r\n         }\r\n         }\r\n         };\r\n         */\r\n        if (angular.isUndefined(textAlign)) {\r\n            textAlign = \"center\";\r\n        }\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'static/html/modal.html',\r\n            controller: 'ModalInstanceCtrl',\r\n            size: angular.isDefined(size) ? size : \"md\",\r\n            resolve: {\r\n                headline: function () {\r\n                    return headline;\r\n                },\r\n                message: function () {\r\n                    return message;\r\n                },\r\n                params: function () {\r\n                    return params;\r\n                },\r\n                textAlign: function () {\r\n                    return textAlign;\r\n                }\r\n            }\r\n        });\r\n\r\n        modalInstance.result.then(function () {\r\n\r\n        }, function () {\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('ModalInstanceCtrl', ModalInstanceCtrl);\r\n\r\nfunction ModalInstanceCtrl($scope, $uibModalInstance, headline, message, params, textAlign) {\r\n\r\n    $scope.message = message;\r\n    $scope.headline = headline;\r\n    $scope.params = params;\r\n    $scope.showCancel = angular.isDefined(params) && angular.isDefined(params.cancel);\r\n    $scope.showNo = angular.isDefined(params) && angular.isDefined(params.no);\r\n    $scope.textAlign = textAlign;\r\n\r\n    if (angular.isUndefined(params) || angular.isUndefined(params.yes)) {\r\n        $scope.params = {\r\n            yes: {\r\n                text: \"Ok\"\r\n            }\r\n        }\r\n    } else if (angular.isUndefined(params.yes.text)) {\r\n        params.yes.text = \"Yes\";\r\n    }\r\n\r\n    if (angular.isDefined(params) && angular.isDefined(params.no) && angular.isUndefined($scope.params.no.text)) {\r\n        $scope.params.no.text = \"No\";\r\n    }\r\n\r\n    if (angular.isDefined(params) && angular.isDefined(params.cancel) && angular.isUndefined($scope.params.cancel.text)) {\r\n        $scope.params.cancel.text = \"Cancel\";\r\n    }\r\n\r\n    $scope.yes = function () {\r\n        $uibModalInstance.close();\r\n        if (angular.isDefined(params) && angular.isDefined(params.yes) && angular.isDefined($scope.params.yes.onYes)) {\r\n            $scope.params.yes.onYes();\r\n        }\r\n    };\r\n\r\n    $scope.no = function () {\r\n        $uibModalInstance.close();\r\n        if (angular.isDefined(params) && angular.isDefined(params.no) && angular.isDefined($scope.params.no.onNo)) {\r\n            $scope.params.no.onNo($uibModalInstance);\r\n        }\r\n    };\r\n\r\n    $scope.cancel = function () {\r\n        $uibModalInstance.dismiss();\r\n        if (angular.isDefined(params.cancel) && angular.isDefined($scope.params.cancel.onCancel)) {\r\n            $scope.params.cancel.onCancel();\r\n        }\r\n    };\r\n\r\n    $scope.$on(\"modal.closing\", function (targetScope, reason, c) {\r\n        if (reason == \"backdrop click\") {\r\n            $scope.cancel();\r\n        }\r\n    });\r\n}\r\n","angular\n    .module('nzbhydraApp')\n    .service('GeneralModalService', GeneralModalService);\n\nfunction GeneralModalService() {\n\n\n    this.open = function (msg, template, templateUrl, size, data) {\n\n        //Prevent circular dependency\n        var myInjector = angular.injector([\"ng\", \"ui.bootstrap\"]);\n        var $uibModal = myInjector.get(\"$uibModal\");\n        var params = {};\n\n        if (angular.isUndefined(size)) {\n            params[\"size\"] = size;\n        }\n        if (angular.isUndefined(template)) {\n            if (angular.isUndefined(templateUrl)) {\n                params[\"template\"] = '<pre style=\"margin:0\">' + msg + '</pre>';\n            } else {\n                params[\"templateUrl\"] = templateUrl;\n            }\n        } else {\n            params[\"template\"] = template;\n        }\n        params[\"resolve\"] =\n            {\n                data: function () {\n                    return data;\n                }\n            };\n\n        var modalInstance = $uibModal.open(params);\n\n        modalInstance.result.then();\n\n    };\n\n\n}","\nMigrationService.$inject = [\"$uibModal\"];\nMigrationModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"$interval\", \"$http\", \"blockUI\", \"ModalService\"];angular\n    .module('nzbhydraApp')\n    .factory('MigrationService', MigrationService);\n\nfunction MigrationService($uibModal) {\n\n    return {\n        migrate: migrate\n    };\n\n    function migrate() {\n        var modalInstance = $uibModal.open({\n            templateUrl: 'static/html/migration-modal.html',\n            controller: 'MigrationModalInstanceCtrl',\n            size: \"md\",\n            backdrop: 'static',\n            keyboard: false\n        });\n\n        modalInstance.result.then(function () {\n            ConfigService.reloadConfig();\n        }, function () {\n        });\n    }\n}\n\nangular\n    .module('nzbhydraApp')\n    .controller('MigrationModalInstanceCtrl', MigrationModalInstanceCtrl);\n\nfunction MigrationModalInstanceCtrl($scope, $uibModalInstance, $interval, $http, blockUI, ModalService) {\n\n    $scope.baseUrl = \"http://127.0.0.1:5075\";\n\n    $scope.foo = {isMigrating: false, baseUrl: $scope.baseUrl};\n    $scope.doMigrateDatabase = true;\n\n    $scope.yes = function () {\n        var params;\n        var url;\n        if ($scope.foo.baseUrl && $scope.foo.isFileBasedOpen) {\n            $scope.foo.baseUrl = null;\n        }\n        //blockUI.start(\"Starting migration. This may take a while...\");\n        if ($scope.foo.isUrlBasedOpen) {\n            url = \"internalapi/migration/url\";\n            params = {baseurl: $scope.foo.baseUrl, doMigrateDatabase: $scope.doMigrateDatabase};\n        } else {\n            url = \"internalapi/migration/files\";\n            params = {settingsCfgFile: $scope.foo.settingsCfgFile, dbFile: $scope.foo.nzbhydraDbFile, doMigrateDatabase: $scope.doMigrateDatabase};\n        }\n\n        $scope.foo.isMigrating = true;\n\n        var updateMigrationMessagesInterval = $interval(function () {\n            $http.get(\"internalapi/migration/messages\").then(function (data) {\n                    $scope.foo.messages = data.data;\n                },\n                function () {\n                    $interval.cancel(updateMigrationMessagesInterval);\n                    $scope.foo.isMigrating = false;\n                }\n            );\n        }, 500);\n\n        $http.get(url, {params: params}).then(function (response) {\n                var message;\n                blockUI.stop();\n                var data = response.data;\n                if (!data.requirementsMet) {\n                    $interval.cancel(updateMigrationMessagesInterval);\n                    $scope.foo.isMigrating = false;\n                    ModalService.open(\"Requirements not met\", \"An error occurred while preparing the migration:<br>\" + data.error, {\n                        yes: {\n                            text: \"OK\"\n                        }\n                    });\n                } else if (!data.configMigrated) {\n                    $interval.cancel(updateMigrationMessagesInterval);\n                    $uibModalInstance.dismiss();\n                    $scope.foo.isMigrating = false;\n                    ModalService.open(\"Config migration failed\", \"An error occurred while migrating the config. Migration failed:<br>\" + data.error, {\n                        yes: {\n                            text: \"OK\"\n                        }\n                    });\n                } else if (!data.databaseMigrated) {\n                    $interval.cancel(updateMigrationMessagesInterval);\n                    $uibModalInstance.dismiss();\n                    $scope.foo.isMigrating = false;\n                    message = \"An error occurred while migrating the database.<br>\" + data.error + \"<br>. The config was migrated successfully though.\";\n                    if (data.messages.length > 0) {\n                        message += '<br><br><span class=\"warning\">The following warnings resulted from the config migration:<ul style=\"list-style: none\">';\n                        _.forEach(data.messages, function (msg) {\n                            message += \"<li>\" + msg + \"</li>\";\n                        });\n                        message += \"</ul></span>\";\n                    }\n                    ModalService.open(\"Database migration failed\", message, {\n                        yes: {\n                            text: \"OK\"\n                        }\n                    });\n                } else {\n                    $interval.cancel(updateMigrationMessagesInterval);\n                    $uibModalInstance.dismiss();\n                    $scope.foo.isMigrating = false;\n                    message = \"The migration was completed successfully.\";\n                    if (data.warningMessages.length > 0) {\n                        message += '<br><br><span class=\"warning\">The following warnings resulted from the config migration:<ul style=\"list-style: none\">';\n                        _.forEach(data.warningMessages, function (msg) {\n                            message += \"<li>\" + msg + \"</li>\";\n                        });\n                        message += \"</ul></span>\";\n                    }\n                    message += \"<br><br>NZBHydra needs to restart for the changes to be effective.\";\n                    ModalService.open(\"Migration successful\", message, {\n                        yes: {\n                            onYes: function () {\n                                RestartService.startCountdown();\n                            },\n                            text: \"Restart\"\n                        },\n                        cancel: {\n                            onCancel: function () {\n\n                            },\n                            text: \"Not now\"\n                        }\n                    });\n                }\n            }, function (data) {\n                $interval.cancel(updateMigrationMessagesInterval);\n                //$scope.foo.isMigrating = false;\n                $scope.foo.messages = [data.data.message];\n            }\n        );\n\n        $scope.$on('$destroy', function () {\n            if (angular.isDefined(updateMigrationMessagesInterval)) {\n                $interval.cancel(updateMigrationMessagesInterval);\n            }\n        });\n\n    };\n\n    $scope.cancel = function () {\n        $uibModalInstance.dismiss();\n    };\n\n}\n","\r\nLoginController.$inject = [\"$scope\", \"RequestsErrorHandler\", \"$state\", \"HydraAuthService\", \"growl\"];angular\r\n    .module('nzbhydraApp')\r\n    .controller('LoginController', LoginController);\r\n\r\nfunction LoginController($scope, RequestsErrorHandler, $state, HydraAuthService, growl) {\r\n    $scope.user = {};\r\n    $scope.login = function () {\r\n        RequestsErrorHandler.specificallyHandled(function () {\r\n            HydraAuthService.login($scope.user.username, $scope.user.password).then(function () {\r\n                HydraAuthService.setLoggedInByForm();\r\n                growl.info(\"Login successful!\");\r\n                $state.go(\"root.search\");\r\n            }, function () {\r\n                growl.error(\"Login failed!\")\r\n            });\r\n        });\r\n    }\r\n}\r\n","\nIndexerStatusesController.$inject = [\"$scope\", \"$http\", \"statuses\"];\nformatDate.$inject = [\"dateFilter\"];angular\n    .module('nzbhydraApp')\n    .controller('IndexerStatusesController', IndexerStatusesController);\n\nfunction IndexerStatusesController($scope, $http, statuses) {\n    $scope.statuses = statuses.data;\n\n    $scope.isInPast = function (epochSeconds) {\n        return epochSeconds < moment().unix();\n    };\n\n    $scope.enable = function (indexerName) {\n        $http.post(\"internalapi/indexerstatuses/enable/\" + encodeURI(indexerName)).then(function (response) {\n            $scope.statuses = response.data;\n        });\n    }\n}\n\nangular\n    .module('nzbhydraApp')\n    .filter('formatDate', formatDate);\n\nfunction formatDate(dateFilter) {\n    return function (timestamp, hidePast) {\n        if (timestamp) {\n            if (timestamp * 1000 < (new Date).getTime() && hidePast) {\n                return \"\"; //\n            }\n\n            var t = timestamp * 1000;\n            t = dateFilter(t, 'yyyy-MM-dd HH:mm');\n            return t;\n        } else {\n            return \"\";\n        }\n    }\n}\n\nangular\n    .module('nzbhydraApp')\n    .filter('reformatDate', reformatDate);\n\nfunction reformatDate() {\n    return function (date, format) {\n        if (angular.isUndefined(format)) {\n            format = \"YYYY-MM-DD HH:mm\";\n        }\n        //Date in database is saved as UTC without timezone information\n        return moment.unix(date).local().format(format);\n    }\n}\nangular\n    .module('nzbhydraApp')\n    .filter('reformatDateSeconds', reformatDateSeconds);\n\nfunction reformatDateSeconds() {\n    return function (date, format) {\n        return moment.unix(date).local().format(\"YYYY-MM-DD HH:mm:ss\");\n    }\n}\n\n\nangular\n    .module('nzbhydraApp')\n    .filter('humanizeDate', humanizeDate);\n\nfunction humanizeDate() {\n    return function (date) {\n        return moment().to(moment.unix(date));\n\n    }\n}","\r\nIndexController.$inject = [\"$scope\", \"$http\", \"$stateParams\", \"$state\"];angular\r\n    .module('nzbhydraApp')\r\n    .controller('IndexController', IndexController);\r\n\r\nfunction IndexController($scope, $http, $stateParams, $state) {\r\n\r\n    $state.go(\"root.search\");\r\n}\r\n","\r\nHydraAuthService.$inject = [\"$q\", \"$rootScope\", \"$http\", \"bootstrapped\", \"$httpParamSerializerJQLike\", \"$state\"];angular\r\n    .module('nzbhydraApp')\r\n    .factory('HydraAuthService', HydraAuthService);\r\n\r\nfunction HydraAuthService($q, $rootScope, $http, bootstrapped, $httpParamSerializerJQLike, $state) {\r\n\r\n    var loggedIn = bootstrapped.username;\r\n\r\n\r\n    return {\r\n        isLoggedIn: isLoggedIn,\r\n        login: login,\r\n        askForPassword: askForPassword,\r\n        logout: logout,\r\n        setLoggedInByForm: setLoggedInByForm,\r\n        getUserRights: getUserRights,\r\n        setLoggedInByBasic: setLoggedInByBasic,\r\n        getUserName: getUserName,\r\n        getUserInfos: getUserInfos\r\n    };\r\n\r\n    function getUserInfos() {\r\n        return bootstrapped;\r\n    }\r\n\r\n    function isLoggedIn() {\r\n        return bootstrapped.username;\r\n    }\r\n\r\n    function setLoggedInByForm() {\r\n        $rootScope.$broadcast(\"user:loggedIn\");\r\n    }\r\n\r\n\r\n    function setLoggedInByBasic(_maySeeStats, _maySeeAdmin, _username) {\r\n    }\r\n\r\n    function login(username, password) {\r\n        var deferred = $q.defer();\r\n        //return $http.post(\"login\", data = {username: username, password: password})\r\n        return $http({\r\n            url: \"login\",\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded' // Note the appropriate header\r\n            },\r\n            data: $httpParamSerializerJQLike({username: username, password: password})\r\n        })\r\n            .then(function () {\r\n                $http.get(\"internalapi/userinfos\").then(function (data) {\r\n                    bootstrapped = data.data;\r\n                    loggedIn = true;\r\n                    $rootScope.$broadcast(\"user:loggedIn\");\r\n                    deferred.resolve();\r\n                });\r\n            });\r\n    }\r\n\r\n    function askForPassword(params) {\r\n        return $http.get(\"internalapi/askpassword\", {params: params}).then(function (data) {\r\n            bootstrapped = data.data;\r\n            return bootstrapped;\r\n        });\r\n    }\r\n\r\n    function logout() {\r\n        var deferred = $q.defer();\r\n        return $http.post(\"logout\").then(function () {\r\n            $http.get(\"internalapi/userinfos\").then(function (data) {\r\n                bootstrapped = data.data;\r\n                $rootScope.$broadcast(\"user:loggedOut\");\r\n                loggedIn = false;\r\n                if (bootstrapped.maySeeSearch) {\r\n                    $state.go(\"root.search\");\r\n                } else {\r\n                    $state.go(\"root.login\");\r\n                }\r\n                //window.location.reload(false);\r\n                deferred.resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    function getUserRights() {\r\n        var userInfos = getUserInfos();\r\n        return {maySeeStats: userInfos.maySeeStats, maySeeAdmin: userInfos.maySeeAdmin, maySeeSearch: userInfos.maySeeSearch};\r\n    }\r\n\r\n    function getUserName() {\r\n        return bootstrapped.username;\r\n    }\r\n\r\n\r\n}","\r\nHeaderController.$inject = [\"$scope\", \"$state\", \"growl\", \"HydraAuthService\", \"$state\"];angular\r\n    .module('nzbhydraApp')\r\n    .controller('HeaderController', HeaderController);\r\n\r\nfunction HeaderController($scope, $state, growl, HydraAuthService, $state) {\r\n\r\n\r\n    $scope.showLoginout = false;\r\n    $scope.oldUserName = null;\r\n\r\n    function update(event) {\r\n\r\n        $scope.userInfos = HydraAuthService.getUserInfos();\r\n        if (!$scope.userInfos.authConfigured) {\r\n            $scope.showSearch = true;\r\n            $scope.showAdmin = true;\r\n            $scope.showStats = true;\r\n            $scope.showLoginout = false;\r\n        } else {\r\n            if ($scope.userInfos.username) {\r\n                $scope.showSearch = true;\r\n                $scope.showAdmin = $scope.userInfos.maySeeAdmin || !$scope.userInfos.adminRestricted;\r\n                $scope.showStats = $scope.userInfos.maySeeStats || !$scope.userInfos.statsRestricted;\r\n                $scope.showLoginout = true;\r\n                $scope.username = $scope.userInfos.username;\r\n                $scope.loginlogoutText = \"Logout \" + $scope.username;\r\n                $scope.oldUserName = $scope.username;\r\n            } else {\r\n                $scope.showAdmin = !$scope.userInfos.adminRestricted;\r\n                $scope.showStats = !$scope.userInfos.statsRestricted;\r\n                $scope.showSearch = !$scope.userInfos.searchRestricted;\r\n                $scope.loginlogoutText = \"Login\";\r\n                $scope.showLoginout = ($scope.userInfos.adminRestricted || $scope.userInfos.statsRestricted || $scope.userInfos.searchRestricted) && event !== \"loggedOut\" && !$state.is(\"root.login\");\r\n                $scope.username = \"\";\r\n            }\r\n        }\r\n    }\r\n\r\n    update();\r\n\r\n\r\n    $scope.$on(\"user:loggedIn\", function (event, data) {\r\n        update(\"loggedIn\");\r\n    });\r\n\r\n    $scope.$on(\"user:loggedOut\", function (event, data) {\r\n        update(\"loggedOut\");\r\n    });\r\n\r\n    $scope.loginout = function () {\r\n        if (HydraAuthService.isLoggedIn()) {\r\n            HydraAuthService.logout().then(function () {\r\n                if ($scope.userInfos.authType === \"BASIC\") {\r\n                    growl.info(\"Logged out. Close your browser to make sure session is closed.\");\r\n                }\r\n                else if ($scope.userInfos.authType === \"FORM\") {\r\n                    growl.info(\"Logged out\");\r\n                }\r\n                update();\r\n                //$state.go(\"root.search\", null, {reload: true});\r\n            });\r\n\r\n        } else {\r\n            if ($scope.userInfos.authType === \"BASIC\") {\r\n                var params = {};\r\n                if ($scope.oldUserName) {\r\n                    params = {\r\n                        old_username: $scope.oldUserName\r\n                    }\r\n                }\r\n                HydraAuthService.askForPassword(params).then(function () {\r\n                    growl.info(\"Login successful!\");\r\n                    $scope.oldUserName = null;\r\n                    update(\"loggedIn\");\r\n                    $state.go(\"root.search\");\r\n                })\r\n            } else if ($scope.userInfos.authType === \"FORM\") {\r\n                $state.go(\"root.login\");\r\n            } else {\r\n                growl.info(\"You shouldn't need to login but here you go!\");\r\n            }\r\n        }\r\n\r\n    };\r\n}\r\n","angular\r\n    .module('nzbhydraApp').directive(\"keepFocus\", ['$timeout', function ($timeout) {\r\n    /*\r\n     Intended use:\r\n     <input keep-focus ng-model='someModel.value'></input>\r\n     */\r\n    return {\r\n        restrict: 'A',\r\n        require: 'ngModel',\r\n        link: function ($scope, $element, attrs, ngModel) {\r\n\r\n            ngModel.$parsers.unshift(function (value) {\r\n                $timeout(function () {\r\n                    $element[0].focus();\r\n                });\r\n                return value;\r\n            });\r\n\r\n        }\r\n    };\r\n}])","var HEADER_NAME = 'NzbHydra2-Handle-Errors-Generically';\nvar specificallyHandleInProgress = false;\n\nnzbhydraapp.factory('RequestsErrorHandler', [\"$q\", \"growl\", \"blockUI\", \"GeneralModalService\", function ($q, growl, blockUI, GeneralModalService) {\n    return {\n        // --- The user's API for claiming responsiblity for requests ---\n        specificallyHandled: function (specificallyHandledBlock) {\n            specificallyHandleInProgress = true;\n            try {\n                return specificallyHandledBlock();\n            } finally {\n                specificallyHandleInProgress = false;\n            }\n        },\n\n        // --- Response interceptor for handling errors generically ---\n        responseError: function (rejection) {\n            blockUI.reset();\n            var shouldHandle = (rejection && rejection.config && rejection.status !== 403 && rejection.config.headers && rejection.config.headers[HEADER_NAME] && !rejection.config.url.contains(\"logerror\") && !rejection.config.url.contains(\"/ping\") && !rejection.config.alreadyHandled);\n            if (shouldHandle) {\n                if (rejection.data) {\n\n                    var message = \"An error occurred:<br>\" + rejection.data.status + \": \" + rejection.data.error;\n                    if (rejection.data.path) {\n                        message += \"<br><br>Path: \" + rejection.data.path;\n                    }\n                    if (message !== \"No message available\") {\n                        message += \"<br><br>Message: \" + rejection.data.message;\n                    } else {\n                        message += \"<br><br>Exception: \" + rejection.data.exception;\n                    }\n                } else {\n                    message = \"An unknown error occurred while communicating with NZBHydra:<br><br>\" + JSON.stringify(rejection);\n                }\n                GeneralModalService.open(message);\n\n            } else if (rejection && rejection.config && rejection.config.headers && rejection.config.headers[HEADER_NAME] && rejection.config.url.contains(\"logerror\")) {\n                console.log(\"Not handling connection error while sending exception to server\");\n            }\n\n            return $q.reject(rejection);\n        }\n    };\n}]);\n\nnzbhydraapp.config(['$provide', '$httpProvider', function ($provide, $httpProvider) {\n    $httpProvider.interceptors.push('RequestsErrorHandler');\n\n    // --- Decorate $http to add a special header by default ---\n\n    function addHeaderToConfig(config) {\n        config = config || {};\n        config.headers = config.headers || {};\n\n        // Add the header unless user asked to handle errors himself\n        if (!specificallyHandleInProgress) {\n            config.headers[HEADER_NAME] = true;\n        }\n\n        return config;\n    }\n\n    // The rest here is mostly boilerplate needed to decorate $http safely\n    $provide.decorator('$http', ['$delegate', function ($delegate) {\n        function decorateRegularCall(method) {\n            return function (url, config) {\n                return $delegate[method](url, addHeaderToConfig(config));\n            };\n        }\n\n        function decorateDataCall(method) {\n            return function (url, data, config) {\n                return $delegate[method](url, data, addHeaderToConfig(config));\n            };\n        }\n\n        function copyNotOverriddenAttributes(newHttp) {\n            for (var attr in $delegate) {\n                if (!newHttp.hasOwnProperty(attr)) {\n                    if (typeof($delegate[attr]) === 'function') {\n                        newHttp[attr] = function () {\n                            return $delegate.apply($delegate, arguments);\n                        };\n                    } else {\n                        newHttp[attr] = $delegate[attr];\n                    }\n                }\n            }\n        }\n\n        var newHttp = function (config) {\n            return $delegate(addHeaderToConfig(config));\n        };\n\n        newHttp.get = decorateRegularCall('get');\n        newHttp.delete = decorateRegularCall('delete');\n        newHttp.head = decorateRegularCall('head');\n        newHttp.jsonp = decorateRegularCall('jsonp');\n        newHttp.post = decorateDataCall('post');\n        newHttp.put = decorateDataCall('put');\n\n        copyNotOverriddenAttributes(newHttp);\n\n        return newHttp;\n    }]);\n}]);","\nConfigBoxService.$inject = [\"$http\", \"$q\", \"$uibModal\"];\nCheckCapsModalInstanceCtrl.$inject = [\"$scope\", \"$interval\", \"$http\", \"$timeout\", \"growl\", \"capsCheckRequest\"];hashCode = function (s) {\n    return s.split(\"\").reduce(function (a, b) {\n        a = ((a << 5) - a) + b.charCodeAt(0);\n        return a & a\n    }, 0);\n};\n\nangular\n    .module('nzbhydraApp').run([\"formlyConfig\", \"formlyValidationMessages\", function (formlyConfig, formlyValidationMessages) {\n    formlyValidationMessages.addStringMessage('required', 'This field is required');\n    formlyConfig.extras.errorExistsAndShouldBeVisibleExpression = 'fc.$touched || form.$submitted';\n\n}]);\n\nangular\n    .module('nzbhydraApp')\n    .config([\"formlyConfigProvider\", function config(formlyConfigProvider) {\n        formlyConfigProvider.extras.removeChromeAutoComplete = true;\n        formlyConfigProvider.extras.explicitAsync = true;\n        formlyConfigProvider.disableWarnings = window.onProd;\n\n\n        formlyConfigProvider.setWrapper({\n            name: 'settingWrapper',\n            templateUrl: 'setting-wrapper.html'\n        });\n\n\n        formlyConfigProvider.setWrapper({\n            name: 'fieldset',\n            template: [\n                '<fieldset>',\n                '<legend><span class=\"config-fieldset-legend\">{{options.templateOptions.label}}</span></legend>',\n                '<formly-transclude></formly-transclude>',\n                '</fieldset>'\n            ].join(' ')\n        });\n\n        formlyConfigProvider.setType({\n            name: 'help',\n            template: [\n                //'<div class=\"panel panel-default\" style=\"margin-top: ' + options.templateOptions.marginTop + 'margin-bottom:' + options.templateOptions.marginBottom + ';\">',\n                '<div class=\"panel panel-default\" style=\"margin-top: {{options.templateOptions.marginTop}}; margin-bottom: {{options.templateOptions.marginBottom}} ;\">',\n                '<div class=\"panel-body {{options.templateOptions.class}}\">',\n                '<div ng-repeat=\"line in options.templateOptions.lines\"><h5>{{ line }}</h5></div>',\n                '</div>',\n                '</div>'\n            ].join(' ')\n        });\n\n\n        formlyConfigProvider.setWrapper({\n            name: 'logicalGroup',\n            template: [\n                '<formly-transclude></formly-transclude>'\n            ].join(' ')\n        });\n\n        formlyConfigProvider.setType({\n            name: 'horizontalInput',\n            extends: 'input',\n            wrapper: ['settingWrapper', 'bootstrapHasError']\n        });\n\n        formlyConfigProvider.setType({\n            name: 'timeOfDay',\n            extends: 'horizontalInput',\n            controller: ['$scope', function ($scope) {\n                $scope.model[$scope.options.key] = moment.utc($scope.model[$scope.options.key]).toDate();\n            }]\n        });\n\n        formlyConfigProvider.setType({\n            name: 'passwordSwitch',\n            extends: 'horizontalInput',\n            template: [\n                '<div class=\"input-group\">',\n                '<input ng-attr-type=\"{{ hidePassword ? \\'password\\' : \\'text\\' }}\" class=\"form-control\" ng-model=\"model[options.key]\"/>',\n                '<span class=\"input-group-btn input-group-btn2\">',\n                '<button class=\"btn btn-default\" type=\"button\" ng-click=\"hidePassword=!hidePassword\"><span class=\"glyphicon glyphicon-eye-open\" ng-class=\"{\\'glyphicon-eye-open\\': hidePassword, \\'glyphicon-eye-close\\': !hidePassword}\"></span></button>',\n                '</div>'\n            ].join(' '),\n            controller: function ($scope) {\n                $scope.hidePassword = true;\n            }\n        });\n\n        formlyConfigProvider.setType({\n            name: 'horizontalChips',\n            extends: 'horizontalInput',\n            template: '<chips ng-model=\"model[options.key]\" class=\"chips form-control\">' +\n            '            <chip-tmpl class=\"chip-tmp\">' +\n            '                <div class=\"default-chip\">' +\n            '                    {{chip}}' +\n            '                    <span class=\"glyphicon glyphicon-remove remove-chip\" remove-chip></span>' +\n            '                </div>' +\n            '            </chip-tmpl>' +\n            '            <input chip-control class=\"chip-control\"></input>' +\n            '        </chips>'\n        });\n\n        formlyConfigProvider.setType({\n            name: 'percentInput',\n            template: [\n                '<input type=\"number\" class=\"form-control\" placeholder=\"Percent\" ng-model=\"model[options.key]\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" required />'\n            ].join(' ')\n        });\n\n        formlyConfigProvider.setType({\n            name: 'apiKeyInput',\n            template: [\n                '<div class=\"input-group\">',\n                '<input type=\"text\" class=\"form-control\" ng-model=\"model[options.key]\"/>',\n                '<span class=\"input-group-btn input-group-btn2\">',\n                '<button class=\"btn btn-default\" type=\"button\" ng-click=\"generate()\"><span class=\"glyphicon glyphicon-refresh\"></span></button>',\n                '</div>'\n            ].join(' '),\n            controller: function ($scope) {\n                $scope.generate = function () {\n                    var result = \"\";\n                    var length = 24;\n                    var chars = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n                    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n                    $scope.model[$scope.options.key] = result;\n                }\n            }\n        });\n\n        formlyConfigProvider.setType({\n            name: 'fileInput',\n            extends: 'horizontalInput',\n            template: [\n                '<div class=\"input-group\">',\n                '<input type=\"text\" class=\"form-control\" ng-model=\"model[options.key]\"/>',\n                '<span class=\"input-group-btn input-group-btn2\">',\n                '<button class=\"btn btn-default\" type=\"button\" ng-click=\"open()\">...</button>',\n                '</div>'\n            ].join(' '),\n            controller: function ($scope, FileSelectionService) {\n                $scope.open = function () {\n                    FileSelectionService.open($scope.model[$scope.options.key], $scope.to.type).then(function (selection) {\n                        $scope.model[$scope.options.key] = selection;\n                    });\n                }\n            }\n        });\n\n        formlyConfigProvider.setType({\n            name: 'testConnection',\n            templateUrl: 'button-test-connection.html'\n        });\n\n        formlyConfigProvider.setType({\n            name: 'horizontalTestConnection',\n            extends: 'testConnection',\n            wrapper: ['settingWrapper', 'bootstrapHasError']\n        });\n\n        function updateIndexerModel(model, indexerConfig) {\n            model.supportedSearchIds = indexerConfig.supportedSearchIds;\n            model.supportedSearchTypes = indexerConfig.supportedSearchTypes;\n            model.categoryMapping = indexerConfig.categoryMapping;\n            model.configComplete = indexerConfig.configComplete;\n            model.allCapsChecked = indexerConfig.allCapsChecked;\n            model.enabled = indexerConfig.enabled;\n        }\n\n        formlyConfigProvider.setType({\n            //BUtton\n            name: 'checkCaps',\n            templateUrl: 'button-check-caps.html',\n            controller: function ($scope, ConfigBoxService, ModalService, growl) {\n                $scope.message = \"\";\n                $scope.uniqueId = hashCode($scope.model.name) + hashCode($scope.model.host);\n\n                var testButton = \"#button-check-caps-\" + $scope.uniqueId;\n                var testMessage = \"#message-check-caps-\" + $scope.uniqueId;\n\n                function showSuccess() {\n                    angular.element(testButton).removeClass(\"btn-default\");\n                    angular.element(testButton).removeClass(\"btn-danger\");\n                    angular.element(testButton).removeClass(\"btn-warning\");\n                    angular.element(testButton).addClass(\"btn-success\");\n                }\n\n                function showError() {\n                    angular.element(testButton).removeClass(\"btn-default\");\n                    angular.element(testButton).removeClass(\"btn-warning\");\n                    angular.element(testButton).removeClass(\"btn-success\");\n                    angular.element(testButton).addClass(\"btn-danger\");\n                }\n\n                function showWarning() {\n                    angular.element(testButton).removeClass(\"btn-default\");\n                    angular.element(testButton).removeClass(\"btn-danger\");\n                    angular.element(testButton).removeClass(\"btn-success\");\n                    angular.element(testButton).addClass(\"btn-warning\");\n                }\n\n\n                //When button is clicked\n                $scope.checkCaps = function () {\n                    angular.element(testButton).addClass(\"glyphicon-refresh-animate\");\n                    ConfigBoxService.checkCaps({indexerConfig: $scope.model, checkType: \"SINGLE\"}).then(function (data) {\n                        data = data[0]; //We get a list of results (with one result because the check type is single)\n                        //Formly doesn't allow replacing the model so we need to set all the relevant values ourselves\n                        updateIndexerModel($scope.model, data.indexerConfig);\n                        if (data.indexerConfig.supportedSearchIds.length > 0) {\n                            var message = \"Supports \" + data.indexerConfig.supportedSearchIds;\n                            angular.element(testMessage).text(message);\n                        }\n                        if (data.indexerConfig.allCapsChecked && data.indexerConfig.configComplete) {\n                            showSuccess();\n                            growl.info(\"Successfully tested capabilites of indexer\");\n                            $scope.form.capsChecked = true;\n                        } else if (!data.indexerConfig.allCapsChecked && data.indexerConfig.configComplete) {\n                            showWarning();\n                            ModalService.open(\"Incomplete caps check\", \"The capabilities of the indexer could not be checked completely. You may use it but it's recommended to repeat the check at another time.<br>Until then some search types or IDs may not be usable.\", {}, \"md\", \"left\");\n                            $scope.form.capsChecked = true;\n                        } else if (!data.configComplete) {\n                            showError();\n                            ModalService.open(\"Error testing capabilities\", \"An error occurred while contacting the indexer. It will not be usable until the caps check has been executed. You can trigger it manually from the indexer config box\", {}, \"md\", \"left\");\n                        }\n                    }, function (message) {\n                        angular.element(testMessage).text(message);\n                        showError();\n                        ModalService.open(\"Error testing capabilities\", \"An error occurred while contacting the indexer. It will not be usable until the caps check has been executed. You can trigger it manually from the indexer config box\", {}, \"md\", \"left\");\n                    }).finally(function () {\n                        angular.element(testButton).removeClass(\"glyphicon-refresh-animate\");\n                    });\n                }\n            }\n        });\n\n        formlyConfigProvider.setType({\n            name: 'horizontalCheckCaps',\n            extends: 'checkCaps',\n            wrapper: ['settingWrapper', 'bootstrapHasError']\n        });\n\n\n        formlyConfigProvider.setType({\n            name: 'horizontalApiKeyInput',\n            extends: 'apiKeyInput',\n            wrapper: ['settingWrapper', 'bootstrapHasError']\n        });\n\n        formlyConfigProvider.setType({\n            name: 'horizontalPercentInput',\n            extends: 'percentInput',\n            wrapper: ['settingWrapper', 'bootstrapHasError']\n        });\n\n\n        formlyConfigProvider.setType({\n            name: 'switch',\n            template: '<div style=\"text-align:left\"><input bs-switch type=\"checkbox\" ng-model=\"model[options.key]\"/></div>'\n        });\n\n\n        formlyConfigProvider.setType({\n            name: 'duoSetting',\n            extends: 'input',\n            defaultOptions: {\n                className: 'col-md-9',\n                templateOptions: {\n                    type: 'number',\n                    noRow: true,\n                    label: ''\n                }\n            }\n        });\n\n        formlyConfigProvider.setType({\n            name: 'horizontalSwitch',\n            extends: 'switch',\n            wrapper: ['settingWrapper', 'bootstrapHasError']\n        });\n\n        formlyConfigProvider.setType({\n            name: 'horizontalSelect',\n            extends: 'select',\n            wrapper: ['settingWrapper', 'bootstrapHasError']\n        });\n\n\n        formlyConfigProvider.setType({\n            name: 'horizontalMultiselect',\n            defaultOptions: {\n                templateOptions: {\n                    optionsAttr: 'bs-options',\n                    ngOptions: 'option[to.valueProp] as option in to.options | filter: $select.search'\n                }\n            },\n            template: '<span multiselect-dropdown options=\"to.options\" selected-model=\"model[options.key]\" settings=\"settings\" events=\"events\"></span>',\n            controller: function ($scope) {\n                var settings = $scope.to.settings || [];\n                settings.classes = settings.classes || [];\n                angular.extend(settings.classes, [\"form-control\"]);\n                $scope.settings = settings;\n                $scope.events = {\n                    onToggleItem: function (item, newValue) {\n                        $scope.form.$setDirty(true);\n                    }\n                }\n            },\n            wrapper: ['settingWrapper', 'bootstrapHasError']\n        });\n\n        formlyConfigProvider.setType({\n            name: 'label',\n            template: '<label class=\"control-label\">{{to.label}}</label>'\n        });\n\n        formlyConfigProvider.setType({\n            name: 'duolabel',\n            extends: 'label',\n            defaultOptions: {\n                className: 'col-md-2',\n                templateOptions: {\n                    label: '-'\n                }\n            }\n        });\n\n        formlyConfigProvider.setType({\n            name: 'repeatSection',\n            templateUrl: 'repeatSection.html',\n            controller: function ($scope) {\n                $scope.formOptions = {formState: $scope.formState};\n                $scope.addNew = addNew;\n                $scope.remove = remove;\n                $scope.copyFields = copyFields;\n\n                function copyFields(fields) {\n                    fields = angular.copy(fields);\n                    $scope.repeatfields = fields;\n                    return fields;\n                }\n\n                $scope.clear = function (field) {\n                    return _.mapObject(field, function (key, val) {\n                        if (typeof val === 'object') {\n                            return $scope.clear(val);\n                        }\n                        return undefined;\n\n                    });\n                };\n\n                function addNew() {\n                    $scope.form.$setDirty(true);\n                    $scope.model[$scope.options.key] = $scope.model[$scope.options.key] || [];\n                    var repeatsection = $scope.model[$scope.options.key];\n                    var newsection = angular.copy($scope.options.templateOptions.defaultModel);\n                    repeatsection.push(newsection);\n                }\n\n                function remove($index) {\n                    $scope.model[$scope.options.key].splice($index, 1);\n                    $scope.form.$setDirty(true);\n                }\n            }\n        });\n\n        formlyConfigProvider.setType({\n            name: 'arrayConfig',\n            templateUrl: 'arrayConfig.html',\n            controller: function ($scope, $uibModal, growl, CategoriesService) {\n                $scope.formOptions = {formState: $scope.formState};\n                $scope._showBox = _showBox;\n                $scope.showBox = showBox;\n                $scope.isInitial = false;\n                $scope.presets = $scope.options.data.presets($scope.model);\n\n                function _showBox(model, parentModel, isInitial, callback) {\n                    var modalInstance = $uibModal.open({\n                        templateUrl: 'configBox.html',\n                        controller: 'ConfigBoxInstanceController',\n                        size: 'lg',\n                        resolve: {\n                            model: function () {\n                                return model;\n                            },\n                            fields: function () {\n                                return $scope.options.data.fieldsFunction(model, parentModel, isInitial, angular.injector(), CategoriesService);\n                            },\n                            isInitial: function () {\n                                return isInitial\n                            },\n                            parentModel: function () {\n                                return parentModel;\n                            },\n                            data: function () {\n                                return $scope.options.data;\n                            }\n                        }\n                    });\n\n\n                    modalInstance.result.then(function (returnedModel) {\n                        $scope.form.$setDirty(true);\n                        if (angular.isDefined(callback)) {\n                            callback(true, returnedModel);\n                        }\n                    }, function () {\n                        if (angular.isDefined(callback)) {\n                            callback(false);\n                        }\n                    });\n                }\n\n                function showBox(model, parentModel) {\n                    $scope._showBox(model, parentModel, false)\n                }\n\n                $scope.addEntry = function (entriesCollection, preset) {\n                    if ($scope.options.data.checkAddingAllowed(entriesCollection, preset)) {\n                        var model = angular.copy($scope.options.data.defaultModel);\n                        if (angular.isDefined(preset)) {\n                            _.extend(model, preset);\n                        }\n\n                        $scope.isInitial = true;\n\n                        $scope._showBox(model, entriesCollection, true, function (isSubmitted, returnedModel) {\n                            if (isSubmitted) {\n                                //Here is where the entry is actually added to the model\n                                entriesCollection.push(angular.isDefined(returnedModel) ? returnedModel : model);\n                            }\n                        });\n                    } else {\n                        growl.error(\"That predefined indexer is already configured.\"); //For now this is the only case where adding is forbidden so we use this hardcoded message \"for now\"... (;-))\n                    }\n                };\n            }\n        });\n\n        formlyConfigProvider.setType({\n            name: 'recheckAllCaps',\n            templateUrl: 'recheckAllCaps.html',\n            controller: function ($scope, $uibModal, growl, ConfigBoxService) {\n                $scope.recheck = function (checkType) {\n                    ConfigBoxService.checkCaps({checkType: checkType}).then(function (listOfResults) {\n                        //A bit ugly, but we have to update the current model with the new data from the list\n                        for (var i=0; i<$scope.model.length;i++) {\n                            for (var j = 0; j< listOfResults.length; j++) {\n                                if ($scope.model[i].name === listOfResults[j].indexerConfig.name) {\n                                    updateIndexerModel($scope.model[i], listOfResults[j].indexerConfig);\n                                    $scope.form.$setDirty(true);\n                                }\n                            }\n                        }\n                    });\n                }\n            }\n\n        });\n\n\n    }]);\n\n\nangular.module('nzbhydraApp').controller('ConfigBoxInstanceController', [\"$scope\", \"$q\", \"$uibModalInstance\", \"$http\", \"model\", \"fields\", \"isInitial\", \"parentModel\", \"data\", \"growl\", function ($scope, $q, $uibModalInstance, $http, model, fields, isInitial, parentModel, data, growl) {\n\n    $scope.model = model;\n    $scope.fields = fields;\n    $scope.isInitial = isInitial;\n    $scope.allowDelete = data.allowDeleteFunction(model);\n    $scope.spinnerActive = false;\n    $scope.needsConnectionTest = false;\n\n    $scope.obSubmit = function () {\n        if ($scope.form.$valid) {\n            var a = data.checkBeforeClose($scope, model).then(function (data) {\n                if (angular.isDefined(data)) {\n                    $scope.model = data;\n                }\n                $uibModalInstance.close(data);\n            });\n        } else {\n            growl.error(\"Config invalid. Please check your settings.\");\n            angular.forEach($scope.form.$error, function (error) {\n                angular.forEach(error, function (field) {\n                    field.$setTouched();\n                });\n            });\n        }\n    };\n\n    $scope.cancel = function () {\n        $uibModalInstance.dismiss();\n    };\n\n    $scope.deleteEntry = function () {\n        parentModel.splice(parentModel.indexOf(model), 1);\n        $uibModalInstance.close($scope);\n    };\n\n    $scope.reset = function () {\n        if (angular.isDefined(data.resetFunction)) {\n            data.resetFunction($scope);\n        }\n    };\n\n    $scope.$on(\"modal.closing\", function (targetScope, reason) {\n        if (reason === \"backdrop click\") {\n            $scope.reset($scope);\n        }\n    });\n}]);\n\nangular\n    .module('nzbhydraApp')\n    .factory('ConfigBoxService', ConfigBoxService);\n\nfunction ConfigBoxService($http, $q, $uibModal) {\n\n    return {\n        checkConnection: checkConnection,\n        checkCaps: checkCaps\n    };\n\n    function checkConnection(url, settings) {\n        var deferred = $q.defer();\n\n        $http.post(url, settings).success(function (result) {\n            //Using ng-class and a scope variable doesn't work for some reason, is only updated at second click \n            if (result.successful) {\n                deferred.resolve({checked: true, message: null, model: result});\n            } else {\n                deferred.reject({checked: true, message: result.message});\n            }\n        }).error(function (result) {\n            deferred.reject({checked: false, message: result.message});\n        });\n\n        return deferred.promise;\n    }\n\n    function checkCaps(capsCheckRequest) {\n        var deferred = $q.defer();\n\n        var result = $uibModal.open({\n            templateUrl: 'static/html/checker-state.html',\n            controller: CheckCapsModalInstanceCtrl,\n            size: \"md\",\n            backdrop: \"static\",\n            backdropClass: \"waiting-cursor\",\n            resolve: {\n                capsCheckRequest: function () {\n                    return capsCheckRequest;\n                }\n            }\n        });\n\n        result.result.then(function (data) {\n            deferred.resolve(data[0], data[1]);\n        }, function (message) {\n            deferred.reject(message);\n        });\n\n        return deferred.promise;\n    }\n\n}\n\nangular\n    .module('nzbhydraApp')\n    .controller('CheckCapsModalInstanceCtrl', CheckCapsModalInstanceCtrl);\n\nfunction CheckCapsModalInstanceCtrl($scope, $interval, $http, $timeout, growl, capsCheckRequest) {\n\n    var updateMessagesInterval = undefined;\n\n    $scope.messages = undefined;\n    $http.post(\"internalapi/indexer/checkCaps\", capsCheckRequest).success(function (data) {\n        $scope.$close([data, capsCheckRequest.indexerConfig]);\n        if (data.length === 0) {\n            growl.info(\"No indexers were checked\");\n        }\n    }).error(function () {\n        $scope.$dismiss(\"Unknown error\")\n    });\n\n    $timeout(\n        updateMessagesInterval = $interval(function () {\n            $http.get(\"internalapi/indexer/checkCapsMessages\").then(function (data) {\n                var map = data.data;\n                var messages = [];\n                for (var name in map) {\n                    if (map.hasOwnProperty(name)) {\n                        for (var i = 0; i < map[name].length; i++) {\n                            var message = \"\";\n                            if (capsCheckRequest.checkType !== \"SINGLE\") {\n                                message += name + \": \";\n                            }\n                            message += map[name][i];\n                            messages.push(message);\n                        }\n                    }\n                }\n                $scope.messages = messages;\n            });\n\n        }, 500),\n        500);\n\n\n    $scope.$on('$destroy', function () {\n        if (angular.isDefined(updateMessagesInterval)) {\n            $interval.cancel(updateMessagesInterval);\n        }\n    });\n\n\n}\n\n\n\n\n","var filters = angular.module('filters', []);\r\n\r\nfilters.filter('bytes', function () {\r\n    return function (bytes) {\r\n        return filesize(bytes);\r\n    }\r\n});\r\n\r\nfilters\r\n    .filter('unsafe', ['$sce', function($sce){\r\n        return function(text) {\r\n            return $sce.trustAsHtml(text);\r\n        };\r\n    }]);\r\n\r\n","\r\nFileSelectionService.$inject = [\"$http\", \"$q\", \"$uibModal\"];angular\r\n    .module('nzbhydraApp')\r\n    .factory('FileSelectionService', FileSelectionService);\r\n\r\nfunction FileSelectionService($http, $q, $uibModal) {\r\n\r\n    var categories = {};\r\n    var selectedCategory = {};\r\n\r\n    var service = {\r\n        open: open\r\n    };\r\n\r\n    var deferred;\r\n\r\n    return service;\r\n\r\n\r\n    function open(fullPath, type) {\r\n        var instance = $uibModal.open({\r\n            templateUrl: 'static/html/file-selection.html',\r\n            controller: 'FileSelectionModalController',\r\n            size: \"md\",\r\n            resolve: {\r\n                data: function () {\r\n                    return $http.post(\"internalapi/config/folderlisting\", {fullPath: angular.isDefined(fullPath) ? fullPath : null, goUp: false, type: type});\r\n                },\r\n                type: function () {\r\n                    return type;\r\n                }\r\n            }\r\n        });\r\n\r\n        instance.result.then(function (selection) {\r\n                deferred.resolve(selection);\r\n            }, function () {\r\n                deferred.reject(\"dismissed\");\r\n            }\r\n        );\r\n        deferred = $q.defer();\r\n        return deferred.promise;\r\n    }\r\n\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp').controller('FileSelectionModalController', [\"$scope\", \"$http\", \"$uibModalInstance\", \"FileSelectionService\", \"data\", \"type\", function ($scope, $http, $uibModalInstance, FileSelectionService, data, type) {\r\n\r\n    $scope.type = type;\r\n    $scope.showType = type === \"file\" ? \"File\" : \"Folder\";\r\n    $scope.data = data.data;\r\n\r\n    $scope.select = function (fileOrFolder, selectType) {\r\n        if (selectType === \"file\" && type === \"file\") {\r\n            $uibModalInstance.close(fileOrFolder.fullPath);\r\n        } else if (selectType === \"folder\") {\r\n            $http.post(\"internalapi/config/folderlisting\", {fullPath: fileOrFolder.fullPath, type: type, goUp: false}).then(function (data) {\r\n                $scope.data = data.data;\r\n            })\r\n        }\r\n    };\r\n\r\n    $scope.goUp = function () {\r\n        $http.post(\"internalapi/config/folderlisting\", {fullPath: $scope.data.fullPath, type: type, goUp: true}).then(function (data) {\r\n            $scope.data = data.data;\r\n        })\r\n    };\r\n\r\n    $scope.submit = function () {\r\n        $uibModalInstance.close($scope.data.fullPath);\r\n    }\r\n\r\n}]);","\r\nFileDownloadService.$inject = [\"$http\", \"growl\"];angular\r\n    .module('nzbhydraApp')\r\n    .factory('FileDownloadService', FileDownloadService);\r\n\r\nfunction FileDownloadService($http, growl) {\r\n\r\n    var service = {\r\n        downloadFile: downloadFile\r\n    };\r\n\r\n    return service;\r\n\r\n    function downloadFile(link, filename, method, data) {\r\n        return $http({method: method, url: link, data: data, responseType: 'arraybuffer'}).success(function (data, status, headers, config) {\r\n            var a = document.createElement('a');\r\n            var blob = new Blob([data], {'type': \"application/octet-stream\"});\r\n            a.href = URL.createObjectURL(blob);\r\n            a.download = filename;\r\n\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n        }).error(function (data, status, headers, config) {\r\n            growl.error(status);\r\n        });\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n","\r\nDownloaderCategoriesService.$inject = [\"$http\", \"$q\", \"$uibModal\"];angular\r\n    .module('nzbhydraApp')\r\n    .factory('DownloaderCategoriesService', DownloaderCategoriesService);\r\n\r\nfunction DownloaderCategoriesService($http, $q, $uibModal) {\r\n\r\n    var categories = {};\r\n    var selectedCategory = {};\r\n\r\n    var service = {\r\n        get: getCategories,\r\n        invalidate: invalidate,\r\n        select: select,\r\n        openCategorySelection: openCategorySelection\r\n    };\r\n\r\n    var deferred;\r\n\r\n    return service;\r\n\r\n\r\n    function getCategories(downloader) {\r\n        function loadAll() {\r\n            if (downloader.name in categories) {\r\n                var deferred = $q.defer();\r\n                deferred.resolve(categories[downloader.name]);\r\n                return deferred.promise;\r\n            }\r\n\r\n            return $http.get(encodeURI('internalapi/downloader/' + downloader.name + \"/categories\"))\r\n                .then(function (categoriesResponse) {\r\n                    categories[downloader.name] = categoriesResponse.data;\r\n                    return categoriesResponse.data;\r\n\r\n                }, function (error) {\r\n                    throw error;\r\n                });\r\n        }\r\n\r\n        return loadAll().then(function (categories) {\r\n            return categories;\r\n        }, function (error) {\r\n            throw error;\r\n        });\r\n    }\r\n\r\n\r\n    function openCategorySelection(downloader) {\r\n        var instance = $uibModal.open({\r\n            templateUrl: 'static/html/directives/addable-nzb-modal.html',\r\n            controller: 'DownloaderCategorySelectionController',\r\n            size: \"sm\",\r\n            resolve: {\r\n                categories: function () {\r\n                    return getCategories(downloader)\r\n                }\r\n            }\r\n        });\r\n\r\n        instance.result.then(function() {}, function() {\r\n            deferred.reject(\"dismissed\");\r\n            }\r\n        );\r\n        deferred = $q.defer();\r\n        return deferred.promise;\r\n    }\r\n\r\n    function select(category) {\r\n        selectedCategory = category;\r\n\r\n        deferred.resolve(category);\r\n    }\r\n\r\n    function invalidate() {\r\n        categories = {};\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp').controller('DownloaderCategorySelectionController', [\"$scope\", \"$uibModalInstance\", \"DownloaderCategoriesService\", \"categories\", function ($scope, $uibModalInstance, DownloaderCategoriesService, categories) {\r\n\r\n    $scope.categories = categories;\r\n    $scope.select = function (category) {\r\n        DownloaderCategoriesService.select(category);\r\n        $uibModalInstance.close($scope);\r\n    }\r\n}]);","\nDownloadHistoryController.$inject = [\"$scope\", \"StatsService\", \"downloads\", \"ConfigService\", \"$timeout\", \"$sce\"];angular\n    .module('nzbhydraApp')\n    .controller('DownloadHistoryController', DownloadHistoryController);\n\n\nfunction DownloadHistoryController($scope, StatsService, downloads, ConfigService, $timeout, $sce) {\n    $scope.limit = 100;\n    $scope.pagination = {\n        current: 1\n    };\n    var sortModel = {\n        column: \"time\",\n        sortMode: 2\n    };\n    $timeout(function () {\n        $scope.$broadcast(\"newSortColumn\", sortModel.column, sortModel.sortMode);\n    }, 10);\n    $scope.filterModel = {};\n\n    //Filter options\n    $scope.indexersForFiltering = [];\n    _.forEach(ConfigService.getSafe().indexers, function (indexer) {\n        $scope.indexersForFiltering.push({label: indexer.name, id: indexer.name})\n    });\n    $scope.preselectedTimeInterval = {beforeDate: null, afterDate: null};\n    $scope.statusesForFiltering = [\n        {label: \"None\", id: 'NONE'},\n        {label: \"Requested\", id: 'REQUESTED'},\n        {label: \"Internal error\", id: 'INTERNAL_ERROR'},\n        {label: \"NZB downloaded successful\", id: 'NZB_DOWNLOAD_SUCCESSFUL'},\n        {label: \"NZB download error\", id: 'NZB_DOWNLOAD_ERROR'},\n        {label: \"NZB added\", id: 'NZB_ADDED'},\n        {label: \"NZB not added\", id: 'NZB_NOT_ADDED'},\n        {label: \"NZB add error\", id: 'NZB_ADD_ERROR'},\n        {label: \"NZB add rejected\", id: 'NZB_ADD_REJECTED'},\n        {label: \"Content download successful\", id: 'CONTENT_DOWNLOAD_SUCCESSFUL'},\n        {label: \"Content download warning\", id: 'CONTENT_DOWNLOAD_WARNING'},\n        {label: \"Content download error\", id: 'CONTENT_DOWNLOAD_ERROR'}\n        ];\n    $scope.accessOptionsForFiltering = [{label: \"All\", value: \"all\"}, {label: \"API\", value: 'API'}, {label: \"Internal\", value: 'INTERNAL'}];\n\n\n    //Preloaded data\n    $scope.nzbDownloads = downloads.data.content;\n    $scope.totalDownloads = downloads.data.totalElements;\n\n    $scope.columnSizes = {\n        time: 10,\n        indexer: 10,\n        title: 37,\n        result: 9,\n        source: 8,\n        age: 6,\n        username: 10,\n        ip: 10\n    };\n    var anyUsername = false;\n    var anyIp = false;\n    for (var download in $scope.nzbDownloads) {\n        if (download.username) {\n            anyUsername = true;\n        }\n        if (download.ip) {\n            anyIp = true;\n        }\n        if (anyIp && anyUsername) {\n            break;\n        }\n    }\n\n    if (ConfigService.getSafe().logging.historyUserInfoType === \"NONE\" || (!anyUsername && !anyIp)) {\n        $scope.columnSizes.username = 0;\n        $scope.columnSizes.ip = 0;\n        $scope.columnSizes.title += 20;\n    } else if (ConfigService.getSafe().logging.historyUserInfoType === \"IP\") {\n        $scope.columnSizes.username = 0;\n        $scope.columnSizes.title += 10;\n    } else if (ConfigService.getSafe().logging.historyUserInfoType === \"USERNAME\") {\n        $scope.columnSizes.ip = 0;\n        $scope.columnSizes.title += 10;\n    }\n\n\n    $scope.update = function () {\n        StatsService.getDownloadHistory($scope.pagination.current, $scope.limit, $scope.filterModel, sortModel).then(function (downloads) {\n            $scope.nzbDownloads = downloads.data.content;\n            $scope.totalDownloads = downloads.data.totalElements;\n        });\n    };\n\n\n    $scope.$on(\"sort\", function (event, column, sortMode) {\n        if (sortMode === 0) {\n            column = \"time\";\n            sortMode = 2;\n        }\n        sortModel = {\n            column: column,\n            sortMode: sortMode\n        };\n        $scope.$broadcast(\"newSortColumn\", sortModel.column, sortModel.sortMode);\n        $scope.update();\n    });\n\n    $scope.getStatusIcon = function (result) {\n        var spans;\n        if (result === \"NONE\" || result === \"REQUESTED\") {\n            spans = '<span class=\"glyphicon glyphicon-question-sign\"></span>'\n        }\n        if (result === \"INTERNAL_ERROR\") {\n            spans = '<span class=\"glyphicon glyphicon-remove\"></span>'\n        }\n        if (result === \"INTERNAL_ERROR\") {\n            spans = '<span class=\"glyphicon glyphicon-remove\"></span>'\n        }\n        if (result === 'NZB_DOWNLOAD_SUCCESSFUL') {\n            spans = '<span class=\"glyphicon glyphicon-ok\"></span>';\n        }\n        if (result === 'NZB_DOWNLOAD_ERROR') {\n            spans = '<span class=\"glyphicon glyphicon-remove\"></span>';\n        }\n        if (result === 'NZB_ADDED') {\n            spans = '<span class=\"glyphicon glyphicon-ok\" style=\"margin-right: 3px\"></span><span class=\"glyphicon glyphicon-question-sign\"></span>';\n        }\n        if (result === 'NZB_NOT_ADDED' || result === 'NZB_ADD_ERROR' || result === 'NZB_ADD_REJECTED') {\n            spans = '<span class=\"glyphicon glyphicon-ok\" style=\"margin-right: 3px\"></span><span class=\"glyphicon glyphicon-remove\"></span>';\n        }\n        if (result === 'CONTENT_DOWNLOAD_SUCCESSFUL') {\n            spans = '<span class=\"glyphicon glyphicon-ok\" style=\"margin-right: 3px\"><span class=\"glyphicon glyphicon-ok\"></span><span class=\"glyphicon glyphicon-ok\"></span>';\n        }\n        if (result === 'CONTENT_DOWNLOAD_ERROR' || result === 'CONTENT_DOWNLOAD_WARNING') {\n            spans = '<span class=\"glyphicon glyphicon-ok\" style=\"margin-right: 3px\"><span class=\"glyphicon glyphicon-ok\"></span><span class=\"glyphicon glyphicon-remove\"></span>';\n        }\n        return $sce.trustAsHtml('<span tooltip-placement=\"auto top\" uib-tooltip=\"' + result + '\">' + spans + '</span>');\n\n    };\n\n\n    $scope.$on(\"filter\", function (event, column, filterModel, isActive) {\n        if (filterModel.filterValue) {\n            $scope.filterModel[column] = filterModel;\n        } else {\n            delete $scope.filterModel[column];\n        }\n        $scope.update();\n    })\n\n}\n\nangular\n    .module('nzbhydraApp')\n    .filter('reformatDateEpoch', reformatDateEpoch);\n\nfunction reformatDateEpoch() {\n    return function (date) {\n        return moment.unix(date).local().format(\"YYYY-MM-DD HH:mm\");\n\n    }\n}\n","/*\r\n *  (C) Copyright 2017 TheOtherP (theotherp@gmx.de)\r\n *\r\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *  you may not use this file except in compliance with the License.\r\n *  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *  Unless required by applicable law or agreed to in writing, software\r\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *  See the License for the specific language governing permissions and\r\n *  limitations under the License.\r\n */\r\n\r\nDebugService.$inject = [\"$filter\"];\r\nangular\r\n    .module('nzbhydraApp')\r\n    .factory('DebugService', DebugService);\r\n\r\nfunction DebugService($filter) {\r\n\r\n    var debug = {};\r\n\r\n    return {\r\n        log: log,\r\n        print: print\r\n    };\r\n\r\n    function log(name) {\r\n        if (!(name in debug)) {\r\n            debug[name] = {first: new Date().getTime(), last: new Date().getTime()};\r\n        } else {\r\n            debug[name][\"last\"] = new Date().getTime();\r\n        }\r\n    }\r\n    \r\n    function print() {\r\n        return; //Re-enable if necessary\r\n        for (var key in debug) {\r\n            if (debug.hasOwnProperty(key)) {\r\n                console.log(\"First \" + key + \": \" + $filter(\"date\")(new Date(debug[key][\"first\"]), \"h:mm:ss:sss\"));\r\n                console.log(\"Last \" + key + \": \" + $filter(\"date\")(new Date(debug[key][\"last\"]), \"h:mm:ss:sss\"));\r\n                console.log(\"Diff: \" + (debug[key][\"last\"] - debug[key][\"first\"]));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n}","\r\nConfigService.$inject = [\"$http\", \"$q\", \"$cacheFactory\", \"bootstrapped\"];angular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigService', ConfigService);\r\n\r\nfunction ConfigService($http, $q, $cacheFactory, bootstrapped) {\r\n\r\n    var cache = $cacheFactory(\"nzbhydra\");\r\n    var safeConfig = bootstrapped.safeConfig;\r\n\r\n    return {\r\n        set: set,\r\n        get: get,\r\n        getSafe: getSafe,\r\n        invalidateSafe: invalidateSafe,\r\n        maySeeAdminArea: maySeeAdminArea,\r\n        reloadConfig: reloadConfig\r\n    };\r\n\r\n    function set(newConfig, ignoreWarnings) {\r\n        var deferred = $q.defer();\r\n        $http.put('internalapi/config', newConfig)\r\n            .then(function (response) {\r\n                if (response.data.ok && (ignoreWarnings || response.data.warningMessages.length === 0)) {\r\n                    cache.put(\"config\", newConfig);\r\n                    invalidateSafe();\r\n                }\r\n                deferred.resolve(response);\r\n\r\n            }, function (errorresponse) {\r\n                console.log(\"Error saving settings:\");\r\n                console.log(errorresponse);\r\n                deferred.reject(errorresponse);\r\n            });\r\n        return deferred.promise;\r\n    }\r\n\r\n    function reloadConfig() {\r\n        return $http.get('internalapi/config/reload').then(function (data) {\r\n            return data.data;\r\n        });\r\n    }\r\n\r\n    function get() {\r\n        var config = cache.get(\"config\");\r\n        if (angular.isUndefined(config)) {\r\n            config = $http.get('internalapi/config').then(function (data) {\r\n                return data.data;\r\n            });\r\n            cache.put(\"config\", config);\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    function getSafe() {\r\n        return safeConfig;\r\n    }\r\n\r\n    function invalidateSafe() {\r\n        $http.get('internalapi/config/safe').then(function (data) {\r\n            safeConfig = data.data;\r\n        });\r\n    }\r\n\r\n    function maySeeAdminArea() {\r\n        function loadAll() {\r\n            var maySeeAdminArea = cache.get(\"maySeeAdminArea\");\r\n            if (!angular.isUndefined(maySeeAdminArea)) {\r\n                var deferred = $q.defer();\r\n                deferred.resolve(maySeeAdminArea);\r\n                return deferred.promise;\r\n            }\r\n\r\n            return $http.get('internalapi/mayseeadminarea')\r\n                .then(function (configResponse) {\r\n                    var config = configResponse.data;\r\n                    cache.put(\"maySeeAdminArea\", config);\r\n                    return configResponse.data;\r\n                });\r\n        }\r\n\r\n        return loadAll().then(function (maySeeAdminArea) {\r\n            return maySeeAdminArea;\r\n        });\r\n    }\r\n}","\nConfigFields.$inject = [\"$injector\"];\nIndexerCheckBeforeCloseService.$inject = [\"$q\", \"ModalService\", \"ConfigBoxService\", \"growl\", \"blockUI\"];\nDownloaderCheckBeforeCloseService.$inject = [\"$q\", \"ConfigBoxService\", \"growl\", \"ModalService\", \"blockUI\"];angular\n    .module('nzbhydraApp')\n    .factory('ConfigFields', ConfigFields);\n\nfunction ConfigFields($injector) {\n\n    return {\n        getFields: getFields\n    };\n\n\n    function ipValidator() {\n        return {\n            expression: function ($viewValue, $modelValue) {\n                var value = $modelValue || $viewValue;\n                if (value) {\n                    return /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/.test(value)\n                        || /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/.test(value);\n                }\n                return true;\n            },\n            message: '$viewValue + \" is not a valid IP Address\"'\n        };\n    }\n\n    function regexValidator(regex, message, prefixViewValue) {\n        return {\n            expression: function ($viewValue, $modelValue) {\n                var value = $modelValue || $viewValue;\n                if (value) {\n                    return regex.test(value);\n                }\n                return true;\n            },\n            message: (prefixViewValue ? '$viewValue + \" ' : '\" ') + message + '\"'\n        };\n    }\n\n    function getFields(rootModel) {\n        return {\n            main: [\n                {\n                    wrapper: 'fieldset',\n                    templateOptions: {label: 'Hosting'},\n                    fieldGroup: [\n                        {\n                            key: 'host',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Host',\n                                required: true,\n                                placeholder: 'IPv4 address to bind to',\n                                help: 'I strongly recommend <a href=\"https://github.com/theotherp/nzbhydra2/wiki/Exposing-Hydra-to-the-internet-and-using-reverse-proxies\" target=\"_blank\">using a reverse proxy</a> instead of exposing this directly. Requires restart.'\n                            },\n                            validators: {\n                                ipAddress: ipValidator()\n                            }\n                        },\n                        {\n                            key: 'port',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'number',\n                                label: 'Port',\n                                required: true,\n                                placeholder: '5056',\n                                help: 'Requires restart'\n                            },\n                            validators: {\n                                port: regexValidator(/^\\d{1,5}$/, \"is no valid port\", true)\n                            }\n                        },\n                        {\n                            key: 'urlBase',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'URL base',\n                                placeholder: '/nzbhydra',\n                                help: 'Adapt when using a reverse proxy. See <a href=\"https://github.com/theotherp/nzbhydra2/wiki/Exposing-Hydra-to-the-internet-and-using-reverse-proxies\" target=\"_blank\">wiki</a>. Always use when calling Hydra, even locally.'\n                            }\n                        },\n                        {\n                            key: 'ssl',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Use SSL',\n                                help: 'Requires restart.'\n                            }\n                        },\n                        {\n                            key: 'sslKeyStore',\n                            hideExpression: '!model.ssl',\n                            type: 'fileInput',\n                            templateOptions: {\n                                label: 'SSL keystore file',\n                                required: true,\n                                type: \"file\",\n                                help: 'Requires restart. See <a href=\"https://github.com/theotherp/nzbhydra2/wiki/SSL\" target=\"_blank\">wiki</a>'\n                            }\n                        },\n                        {\n                            key: 'sslKeyStorePassword',\n                            hideExpression: '!model.ssl',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'password',\n                                label: 'SSL keystore password',\n                                required: true,\n                                help: 'Requires restart.'\n                            }\n                        },\n\n                        {\n                            wrapper: 'fieldset',\n                            templateOptions: {\n                                label: 'Proxy'\n                            }\n                            ,\n                            fieldGroup: [\n                                {\n                                    key: 'proxyType',\n                                    type: 'horizontalSelect',\n                                    templateOptions: {\n                                        type: 'select',\n                                        label: 'Use proxy',\n                                        options: [\n                                            {name: 'None', value: 'NONE'},\n                                            {name: 'SOCKS', value: 'SOCKS'},\n                                            {name: 'HTTP(S)', value: 'HTTP'}\n                                        ]\n                                    }\n                                },\n                                {\n                                    key: 'proxyHost',\n                                    type: 'horizontalInput',\n                                    hideExpression: 'model.proxyType===\"NONE\"',\n                                    templateOptions: {\n                                        type: 'text',\n                                        label: 'SOCKS proxy host',\n                                        placeholder: 'Set to use a SOCKS proxy',\n                                        help: \"IPv4 only\"\n                                    }\n                                },\n                                {\n                                    key: 'proxyPort',\n                                    type: 'horizontalInput',\n                                    hideExpression: 'model.proxyType===\"NONE\"',\n                                    templateOptions: {\n                                        type: 'number',\n                                        label: 'Proxy port',\n                                        placeholder: '1080'\n                                    }\n                                },\n                                {\n                                    key: 'proxyUsername',\n                                    type: 'horizontalInput',\n                                    hideExpression: 'model.proxyType===\"NONE\"',\n                                    templateOptions: {\n                                        type: 'text',\n                                        label: 'Proxy username'\n                                    }\n                                },\n                                {\n                                    key: 'proxyPassword',\n                                    type: 'passwordSwitch',\n                                    hideExpression: 'model.proxyType===\"NONE\"',\n                                    templateOptions: {\n                                        type: 'text',\n                                        label: 'Proxy password'\n                                    }\n                                },\n                                {\n                                    key: 'proxyIgnoreLocal',\n                                    type: 'horizontalSwitch',\n                                    hideExpression: 'model.proxyType===\"NONE\"',\n                                    templateOptions: {\n                                        type: 'switch',\n                                        label: 'Bypass local addresses'\n                                    }\n                                },\n                                {\n                                    key: 'proxyIgnoreDomains',\n                                    type: 'horizontalInput',\n                                    hideExpression: 'model.proxyType===\"NONE\"',\n                                    templateOptions: {\n                                        type: 'text',\n                                        help: 'Separate by comma. You can use wildcards (*). Case insensitive',\n                                        label: 'Bypass domains'\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {\n                    wrapper: 'fieldset',\n                    templateOptions: {label: 'UI'},\n                    fieldGroup: [\n\n                        {\n                            key: 'theme',\n                            type: 'horizontalSelect',\n                            templateOptions: {\n                                type: 'select',\n                                label: 'Theme',\n                                help: 'Reload page after restart',\n                                options: [\n                                    {name: 'Grey', value: 'grey'},\n                                    {name: 'Bright', value: 'bright'},\n                                    {name: 'Dark', value: 'dark'}\n                                ]\n                            }\n                        }\n                    ]\n                },\n                {\n                    wrapper: 'fieldset',\n                    templateOptions: {label: 'Security'},\n                    fieldGroup: [\n\n                        {\n                            key: 'apiKey',\n                            type: 'horizontalApiKeyInput',\n                            templateOptions: {\n                                label: 'API key',\n                                help: 'Alphanumeric only',\n                                required: true\n                            },\n                            validators: {\n                                apiKey: regexValidator(/^[a-zA-Z0-9]*$/, \"API key must only contain numbers and digits\", false)\n                            }\n                        },\n                        {\n                            key: 'dereferer',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Dereferer',\n                                help: 'Redirect external links to hide your instance. Insert $s for target URL.'\n                            }\n                        },\n                        {\n                            key: 'verifySsl',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                label: 'Verify SSL certificates',\n                                help: 'If enabled only valid/known SSL certificates will be accepted when accessing indexers. Change requires restart. See <a href=\"https://github.com/theotherp/nzbhydra2/wiki/SSL-verification-errors\" target=\"_blank\">wiki</a>'\n                            }\n                        },\n                        {\n                            key: 'sniDisabledFor',\n                            type: 'horizontalChips',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Disable SNI',\n                                help: 'Add a host if you get an \"unrecognized_name\" error. Apply words with return key. See <a href=\"https://github.com/theotherp/nzbhydra2/wiki/SSL-verification-errors\" target=\"_blank\">wiki</a>'\n                            }\n                        },\n                        {\n                            key: 'useCsrf',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                label: 'Use CSRF protection',\n                                help: 'Use <a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\" target=\"_blank\">CSRF protection</a>'\n                            }\n                        }\n                    ]\n                },\n\n                {\n                    wrapper: 'fieldset',\n                    key: 'logging',\n                    templateOptions: {label: 'Logging'},\n                    fieldGroup: [\n                        {\n                            key: 'logfilelevel',\n                            type: 'horizontalSelect',\n                            templateOptions: {\n                                type: 'select',\n                                label: 'Logfile level',\n                                options: [\n                                    {name: 'Error', value: 'ERROR'},\n                                    {name: 'Warning', value: 'WARN'},\n                                    {name: 'Info', value: 'INFO'},\n                                    {name: 'Debug', value: 'DEBUG'}\n                                ]\n                            }\n                        },\n                        {\n                            key: 'logMaxHistory',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'number',\n                                label: 'Max log history',\n                                help: 'How many daily log files will be kept'\n                            }\n                        },\n                        {\n                            key: 'consolelevel',\n                            type: 'horizontalSelect',\n                            templateOptions: {\n                                type: 'select',\n                                label: 'Console log level',\n                                options: [\n                                    {name: 'Error', value: 'ERROR'},\n                                    {name: 'Warning', value: 'WARN'},\n                                    {name: 'Info', value: 'INFO'},\n                                    {name: 'Debug', value: 'DEBUG'}\n                                ]\n                            }\n                        },\n                        {\n                            key: 'logIpAddresses',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Log IP addresses'\n                            }\n                        },\n                        {\n                            key: 'logUsername',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Log user names'\n                            }\n                        },\n                        {\n                            key: 'historyUserInfoType',\n                            type: 'horizontalSelect',\n                            templateOptions: {\n                                type: 'select',\n                                label: 'History user info',\n                                options: [\n                                    {name: 'IP and username', value: 'BOTH'},\n                                    {name: 'IP address', value: 'IP'},\n                                    {name: 'Username', value: 'USERNAME'},\n                                    {name: 'None', value: 'NONE'}\n                                ],\n                                help: 'Only affects if value is displayed in the search/download history'\n                            }\n                        },\n                        {\n                            key: 'markersToLog',\n                            type: 'horizontalMultiselect',\n                            templateOptions: {\n                                label: 'Log markers',\n                                help: 'Select certain sections for more output on debug level',\n                                options: [\n                                    {label: 'Removed trailing words', id: 'TRAILING'},\n                                    {label: 'Rejected results', id: 'RESULT_ACCEPTOR'},\n                                    {label: 'Performance', id: 'PERFORMANCE'},\n                                    {label: 'Duplicate detection', id: 'DUPLICATES'},\n                                    {label: 'Indexer scheduler', id: 'SCHEDULER'},\n                                    {label: 'User agent mapping', id: 'USER_AGENT'},\n                                    {label: 'Download status updating', id: 'DOWNLOAD_STATUS_UPDATE'},\n                                    {label: 'URL calculation', id: 'URL_CALCULATION'}\n                                ],\n                                hideExpression: 'model.consolelevel !== \"DEBUG\" && model.logfilelevel !== \"DEBUG\"', //Doesn't work...\n                                buttonText: \"None\"\n                            }\n                        }\n                    ]\n                },\n                {\n                    wrapper: 'fieldset',\n                    templateOptions: {label: 'Other'},\n                    fieldGroup: [\n                        {\n                            key: 'startupBrowser',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Open browser on startup'\n                            }\n                        },\n                        {\n                            key: 'backupEverySunday',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Backup every sunday'\n                            }\n                        },\n                        {\n                            key: 'backupBeforeUpdate',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Backup before update'\n                            }\n                        },\n                        {\n                            key: 'showNews',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Show news',\n                                help: \"Hydra will occasionally show news when opened. You can always find them in the system section\"\n                            }\n                        },\n                        {\n                            key: 'xmx',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'number',\n                                label: 'JVM memory',\n                                addonRight: {\n                                    text: 'MB'\n                                },\n                                help: '128M should suffice except when working with big databases / many indexers. See <a href=\"https://github.com/theotherp/nzbhydra2/wiki/Memory-requirements\" target=\"_blank\">wiki</a>'\n                            }\n                        }\n                    ]\n\n                }\n            ],\n\n            searching: [\n                {\n                    wrapper: 'fieldset',\n                    templateOptions: {\n                        label: 'Indexer access'\n                    },\n                    fieldGroup: [\n                        {\n                            key: 'timeout',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'number',\n                                label: 'Timeout when accessing indexers',\n                                help: 'Any web call to an indexer taking longer than this is aborted',\n                                addonRight: {\n                                    text: 'seconds'\n                                }\n                            }\n                        },\n                        {\n                            key: 'ignoreTemporarilyDisabled',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Ignore temporarily disabled',\n                                help: \"If enabled access to indexers will never be paused after an error occurred\"\n                            }\n                        },\n                        {\n                            key: 'generateQueries',\n                            type: 'horizontalSelect',\n                            templateOptions: {\n                                label: 'Generate queries',\n                                options: [\n                                    {name: 'Internal searches', value: 'INTERNAL'},\n                                    {name: 'API searches', value: 'API'},\n                                    {name: 'All searches', value: 'BOTH'},\n                                    {name: 'Never', value: 'NONE'}\n                                ],\n                                help: \"Generate queries for indexers which do not support ID based searches\"\n                            }\n                        },\n                        {\n                            key: 'idFallbackToQueryGeneration',\n                            type: 'horizontalSelect',\n                            templateOptions: {\n                                label: 'Fallback to generated queries',\n                                options: [\n                                    {name: 'Internal searches', value: 'INTERNAL'},\n                                    {name: 'API searches', value: 'API'},\n                                    {name: 'All searches', value: 'BOTH'},\n                                    {name: 'Never', value: 'NONE'}\n                                ],\n                                help: \"When no results were found for a query ID search again using a generated query (on indexer level)\"\n                            }\n                        },\n                        {\n                            key: 'language',\n                            type: 'horizontalSelect',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Language',\n                                required: true,\n                                help: 'Used for movie query generation and autocomplete only.',\n                                options: [{\"name\": \"Abkhaz\", value: \"ab\"}, {\"name\": \"Afar\", value: \"aa\"}, {\"name\": \"Afrikaans\", value: \"af\"}, {\"name\": \"Akan\", value: \"ak\"}, {\n                                    \"name\": \"Albanian\",\n                                    value: \"sq\"\n                                }, {\"name\": \"Amharic\", value: \"am\"}, {\"name\": \"Arabic\", value: \"ar\"}, {\"name\": \"Aragonese\", value: \"an\"}, {\"name\": \"Armenian\", value: \"hy\"}, {\n                                    \"name\": \"Assamese\",\n                                    value: \"as\"\n                                }, {\"name\": \"Avaric\", value: \"av\"}, {\"name\": \"Avestan\", value: \"ae\"}, {\"name\": \"Aymara\", value: \"ay\"}, {\"name\": \"Azerbaijani\", value: \"az\"}, {\n                                    \"name\": \"Bambara\",\n                                    value: \"bm\"\n                                }, {\"name\": \"Bashkir\", value: \"ba\"}, {\"name\": \"Basque\", value: \"eu\"}, {\"name\": \"Belarusian\", value: \"be\"}, {\"name\": \"Bengali\", value: \"bn\"}, {\n                                    \"name\": \"Bihari\",\n                                    value: \"bh\"\n                                }, {\"name\": \"Bislama\", value: \"bi\"}, {\"name\": \"Bosnian\", value: \"bs\"}, {\"name\": \"Breton\", value: \"br\"}, {\"name\": \"Bulgarian\", value: \"bg\"}, {\n                                    \"name\": \"Burmese\",\n                                    value: \"my\"\n                                }, {\"name\": \"Catalan\", value: \"ca\"}, {\"name\": \"Chamorro\", value: \"ch\"}, {\"name\": \"Chechen\", value: \"ce\"}, {\"name\": \"Chichewa\", value: \"ny\"}, {\n                                    \"name\": \"Chinese\",\n                                    value: \"zh\"\n                                }, {\"name\": \"Chuvash\", value: \"cv\"}, {\"name\": \"Cornish\", value: \"kw\"}, {\"name\": \"Corsican\", value: \"co\"}, {\"name\": \"Cree\", value: \"cr\"}, {\n                                    \"name\": \"Croatian\",\n                                    value: \"hr\"\n                                }, {\"name\": \"Czech\", value: \"cs\"}, {\"name\": \"Danish\", value: \"da\"}, {\"name\": \"Divehi\", value: \"dv\"}, {\"name\": \"Dutch\", value: \"nl\"}, {\n                                    \"name\": \"Dzongkha\",\n                                    value: \"dz\"\n                                }, {\"name\": \"English\", value: \"en\"}, {\"name\": \"Esperanto\", value: \"eo\"}, {\"name\": \"Estonian\", value: \"et\"}, {\"name\": \"Ewe\", value: \"ee\"}, {\n                                    \"name\": \"Faroese\",\n                                    value: \"fo\"\n                                }, {\"name\": \"Fijian\", value: \"fj\"}, {\"name\": \"Finnish\", value: \"fi\"}, {\"name\": \"French\", value: \"fr\"}, {\"name\": \"Fula\", value: \"ff\"}, {\n                                    \"name\": \"Galician\",\n                                    value: \"gl\"\n                                }, {\"name\": \"Georgian\", value: \"ka\"}, {\"name\": \"German\", value: \"de\"}, {\"name\": \"Greek\", value: \"el\"}, {\"name\": \"Guaraní\", value: \"gn\"}, {\n                                    \"name\": \"Gujarati\",\n                                    value: \"gu\"\n                                }, {\"name\": \"Haitian\", value: \"ht\"}, {\"name\": \"Hausa\", value: \"ha\"}, {\"name\": \"Hebrew\", value: \"he\"}, {\"name\": \"Herero\", value: \"hz\"}, {\n                                    \"name\": \"Hindi\",\n                                    value: \"hi\"\n                                }, {\"name\": \"Hiri Motu\", value: \"ho\"}, {\"name\": \"Hungarian\", value: \"hu\"}, {\"name\": \"Interlingua\", value: \"ia\"}, {\n                                    \"name\": \"Indonesian\",\n                                    value: \"id\"\n                                }, {\"name\": \"Interlingue\", value: \"ie\"}, {\"name\": \"Irish\", value: \"ga\"}, {\"name\": \"Igbo\", value: \"ig\"}, {\"name\": \"Inupiaq\", value: \"ik\"}, {\n                                    \"name\": \"Ido\",\n                                    value: \"io\"\n                                }, {\"name\": \"Icelandic\", value: \"is\"}, {\"name\": \"Italian\", value: \"it\"}, {\"name\": \"Inuktitut\", value: \"iu\"}, {\"name\": \"Japanese\", value: \"ja\"}, {\n                                    \"name\": \"Javanese\",\n                                    value: \"jv\"\n                                }, {\"name\": \"Kalaallisut\", value: \"kl\"}, {\"name\": \"Kannada\", value: \"kn\"}, {\"name\": \"Kanuri\", value: \"kr\"}, {\"name\": \"Kashmiri\", value: \"ks\"}, {\n                                    \"name\": \"Kazakh\",\n                                    value: \"kk\"\n                                }, {\"name\": \"Khmer\", value: \"km\"}, {\"name\": \"Kikuyu\", value: \"ki\"}, {\"name\": \"Kinyarwanda\", value: \"rw\"}, {\"name\": \"Kyrgyz\", value: \"ky\"}, {\n                                    \"name\": \"Komi\",\n                                    value: \"kv\"\n                                }, {\"name\": \"Kongo\", value: \"kg\"}, {\"name\": \"Korean\", value: \"ko\"}, {\"name\": \"Kurdish\", value: \"ku\"}, {\"name\": \"Kwanyama\", value: \"kj\"}, {\n                                    \"name\": \"Latin\",\n                                    value: \"la\"\n                                }, {\"name\": \"Luxembourgish\", value: \"lb\"}, {\"name\": \"Ganda\", value: \"lg\"}, {\"name\": \"Limburgish\", value: \"li\"}, {\"name\": \"Lingala\", value: \"ln\"}, {\n                                    \"name\": \"Lao\",\n                                    value: \"lo\"\n                                }, {\"name\": \"Lithuanian\", value: \"lt\"}, {\"name\": \"Luba-Katanga\", value: \"lu\"}, {\"name\": \"Latvian\", value: \"lv\"}, {\"name\": \"Manx\", value: \"gv\"}, {\n                                    \"name\": \"Macedonian\",\n                                    value: \"mk\"\n                                }, {\"name\": \"Malagasy\", value: \"mg\"}, {\"name\": \"Malay\", value: \"ms\"}, {\"name\": \"Malayalam\", value: \"ml\"}, {\"name\": \"Maltese\", value: \"mt\"}, {\n                                    \"name\": \"Māori\",\n                                    value: \"mi\"\n                                }, {\"name\": \"Marathi\", value: \"mr\"}, {\"name\": \"Marshallese\", value: \"mh\"}, {\"name\": \"Mongolian\", value: \"mn\"}, {\"name\": \"Nauru\", value: \"na\"}, {\n                                    \"name\": \"Navajo\",\n                                    value: \"nv\"\n                                }, {\"name\": \"Northern Ndebele\", value: \"nd\"}, {\"name\": \"Nepali\", value: \"ne\"}, {\"name\": \"Ndonga\", value: \"ng\"}, {\n                                    \"name\": \"Norwegian Bokmål\",\n                                    value: \"nb\"\n                                }, {\"name\": \"Norwegian Nynorsk\", value: \"nn\"}, {\"name\": \"Norwegian\", value: \"no\"}, {\"name\": \"Nuosu\", value: \"ii\"}, {\n                                    \"name\": \"Southern Ndebele\",\n                                    value: \"nr\"\n                                }, {\"name\": \"Occitan\", value: \"oc\"}, {\"name\": \"Ojibwe\", value: \"oj\"}, {\"name\": \"Old Church Slavonic\", value: \"cu\"}, {\"name\": \"Oromo\", value: \"om\"}, {\n                                    \"name\": \"Oriya\",\n                                    value: \"or\"\n                                }, {\"name\": \"Ossetian\", value: \"os\"}, {\"name\": \"Panjabi\", value: \"pa\"}, {\"name\": \"Pāli\", value: \"pi\"}, {\"name\": \"Persian\", value: \"fa\"}, {\n                                    \"name\": \"Polish\",\n                                    value: \"pl\"\n                                }, {\"name\": \"Pashto\", value: \"ps\"}, {\"name\": \"Portuguese\", value: \"pt\"}, {\"name\": \"Quechua\", value: \"qu\"}, {\"name\": \"Romansh\", value: \"rm\"}, {\n                                    \"name\": \"Kirundi\",\n                                    value: \"rn\"\n                                }, {\"name\": \"Romanian\", value: \"ro\"}, {\"name\": \"Russian\", value: \"ru\"}, {\"name\": \"Sanskrit\", value: \"sa\"}, {\"name\": \"Sardinian\", value: \"sc\"}, {\n                                    \"name\": \"Sindhi\",\n                                    value: \"sd\"\n                                }, {\"name\": \"Northern Sami\", value: \"se\"}, {\"name\": \"Samoan\", value: \"sm\"}, {\"name\": \"Sango\", value: \"sg\"}, {\"name\": \"Serbian\", value: \"sr\"}, {\n                                    \"name\": \"Gaelic\",\n                                    value: \"gd\"\n                                }, {\"name\": \"Shona\", value: \"sn\"}, {\"name\": \"Sinhala\", value: \"si\"}, {\"name\": \"Slovak\", value: \"sk\"}, {\"name\": \"Slovene\", value: \"sl\"}, {\n                                    \"name\": \"Somali\",\n                                    value: \"so\"\n                                }, {\"name\": \"Southern Sotho\", value: \"st\"}, {\"name\": \"Spanish\", value: \"es\"}, {\"name\": \"Sundanese\", value: \"su\"}, {\"name\": \"Swahili\", value: \"sw\"}, {\n                                    \"name\": \"Swati\",\n                                    value: \"ss\"\n                                }, {\"name\": \"Swedish\", value: \"sv\"}, {\"name\": \"Tamil\", value: \"ta\"}, {\"name\": \"Telugu\", value: \"te\"}, {\"name\": \"Tajik\", value: \"tg\"}, {\n                                    \"name\": \"Thai\",\n                                    value: \"th\"\n                                }, {\"name\": \"Tigrinya\", value: \"ti\"}, {\"name\": \"Tibetan Standard\", value: \"bo\"}, {\"name\": \"Turkmen\", value: \"tk\"}, {\"name\": \"Tagalog\", value: \"tl\"}, {\n                                    \"name\": \"Tswana\",\n                                    value: \"tn\"\n                                }, {\"name\": \"Tonga\", value: \"to\"}, {\"name\": \"Turkish\", value: \"tr\"}, {\"name\": \"Tsonga\", value: \"ts\"}, {\"name\": \"Tatar\", value: \"tt\"}, {\n                                    \"name\": \"Twi\",\n                                    value: \"tw\"\n                                }, {\"name\": \"Tahitian\", value: \"ty\"}, {\"name\": \"Uyghur\", value: \"ug\"}, {\"name\": \"Ukrainian\", value: \"uk\"}, {\"name\": \"Urdu\", value: \"ur\"}, {\n                                    \"name\": \"Uzbek\",\n                                    value: \"uz\"\n                                }, {\"name\": \"Venda\", value: \"ve\"}, {\"name\": \"Vietnamese\", value: \"vi\"}, {\"name\": \"Volapük\", value: \"vo\"}, {\"name\": \"Walloon\", value: \"wa\"}, {\n                                    \"name\": \"Welsh\",\n                                    value: \"cy\"\n                                }, {\"name\": \"Wolof\", value: \"wo\"}, {\"name\": \"Western Frisian\", value: \"fy\"}, {\"name\": \"Xhosa\", value: \"xh\"}, {\"name\": \"Yiddish\", value: \"yi\"}, {\n                                    \"name\": \"Yoruba\",\n                                    value: \"yo\"\n                                }, {\"name\": \"Zhuang\", value: \"za\"}, {\"name\": \"Zulu\", value: \"zu\"}]\n                            }\n                        },\n                        {\n                            key: 'userAgent',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'User agent',\n                                help: 'Used when accessing indexers',\n                                required: true\n                            }\n                        },\n                        {\n                            key: 'userAgents',\n                            type: 'horizontalChips',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Map user agents',\n                                help: 'Used to map the user agent from accessing services to the service names. Apply words with return key.'\n                            }\n                        }\n                    ]\n                },\n                {\n                    wrapper: 'fieldset',\n                    templateOptions: {\n                        label: 'Result filters'\n                    },\n                    fieldGroup: [\n                        {\n                            key: 'applyRestrictions',\n                            type: 'horizontalSelect',\n                            templateOptions: {\n                                label: 'Apply word filters',\n                                options: [\n                                    {name: 'All searches', value: 'BOTH'},\n                                    {name: 'Internal searches', value: 'INTERNAL'},\n                                    {name: 'API searches', value: 'API'},\n                                    {name: 'Never', value: 'NONE'}\n                                ],\n                                help: \"For which type of search word/regex filters will be applied\"\n                            }\n                        },\n                        {\n                            key: 'forbiddenWords',\n                            type: 'horizontalChips',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Forbidden words',\n                                help: \"Results with any of these words in the title will be ignored. Title is converted to lowercase before. Apply words with return key.\"\n                            },\n                            hideExpression: function () {\n                                return rootModel.searching.applyRestrictions === \"NONE\";\n                            }\n                        },\n                        {\n                            key: 'forbiddenRegex',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Forbidden regex',\n                                help: 'Must not be present in a title (case is ignored)'\n                            },\n                            hideExpression: function () {\n                                return rootModel.searching.applyRestrictions === \"NONE\";\n                            }\n                        },\n                        {\n                            key: 'requiredWords',\n                            type: 'horizontalChips',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Required words',\n                                help: \"Only results with titles that contain *all* words will be used. Title is converted to lowercase before. Apply words with return key.\"\n                            },\n                            hideExpression: function () {\n                                return rootModel.searching.applyRestrictions === \"NONE\";\n                            }\n                        },\n                        {\n                            key: 'requiredRegex',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Required regex',\n                                help: 'Must be present in a title (case is ignored)'\n                            },\n                            hideExpression: function () {\n                                return rootModel.searching.applyRestrictions === \"NONE\";\n                            }\n                        },\n\n                        {\n                            key: 'forbiddenGroups',\n                            type: 'horizontalChips',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Forbidden groups',\n                                help: 'Posts from any groups containing any of these words will be ignored. Apply words with return key.'\n                            },\n                            hideExpression: function () {\n                                return rootModel.searching.applyRestrictions === \"NONE\";\n                            }\n                        },\n                        {\n                            key: 'forbiddenPosters',\n                            type: 'horizontalChips',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Forbidden posters',\n                                help: 'Posts from any posters containing any of these words will be ignored. Apply words with return key.'\n                            }\n                        },\n                        {\n                            key: 'maxAge',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'number',\n                                label: 'Maximum results age',\n                                help: 'Results older than this are ignored. Can be overwritten per search. Apply words with return key.',\n                                addonRight: {\n                                    text: 'days'\n                                }\n                            }\n                        },\n                        {\n                            key: 'ignorePassworded',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Ignore passworded releases',\n                                help: \"Not all indexers provide this information\"\n                            }\n                        }\n                    ]\n                },\n                {\n                    wrapper: 'fieldset',\n                    templateOptions: {\n                        label: 'Result processing'\n                    },\n                    fieldGroup: [\n                        {\n                            key: 'wrapApiErrors',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Wrap API errors in empty results page',\n                                help: 'When enabled accessing tools will think the search was completed successfully but without results'\n                            }\n                        },\n                        {\n                            key: 'duplicateSizeThresholdInPercent',\n                            type: 'horizontalPercentInput',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Duplicate size threshold',\n                                required: true,\n                                addonRight: {\n                                    text: '%'\n                                }\n\n                            }\n                        },\n                        {\n                            key: 'duplicateAgeThreshold',\n                            type: 'horizontalInput',\n                            templateOptions: {\n                                type: 'number',\n                                label: 'Duplicate age threshold',\n                                required: true,\n                                addonRight: {\n                                    text: 'hours'\n                                }\n                            }\n                        },\n                        {\n                            key: 'removeTrailing',\n                            type: 'horizontalChips',\n                            templateOptions: {\n                                type: 'text',\n                                label: 'Remove trailing...',\n                                help: 'Removed from title if it ends with either of these. Case insensitive and disregards leading/trailing spaces. Apply words with return key.'\n                            }\n                        },\n                        {\n                            key: 'useOriginalCategories',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Use original categories',\n                                help: 'Enable to use the category descriptions provided by the indexer'\n                            }\n                        },\n                        {\n                            key: 'nzbAccessType',\n                            type: 'horizontalSelect',\n                            templateOptions: {\n                                type: 'select',\n                                label: 'NZB access type',\n                                options: [\n                                    {name: 'Proxy NZBs from indexer', value: 'PROXY'},\n                                    {name: 'Redirect to the indexer', value: 'REDIRECT'}\n                                ],\n                                help: \"How access to NZBs is provided when NZBs are downloaded (by the user or external tools). Redirecting is recommended.\"\n                            }\n                        },\n                        {\n                            key: 'loadAllCachedOnInternal',\n                            type: 'horizontalSwitch',\n                            templateOptions: {\n                                type: 'switch',\n                                label: 'Load all cached results',\n                                help: 'Show all cached results when searching internally. Might make sorting / filtering slower'\n                            }\n                        },\n                        {\n                            wrapper: 'fieldset',\n                            templateOptions: {\n                                label: 'Other'\n                            },\n                            fieldGroup: [\n                                {\n                                    key: 'keepSearchResultsForDays',\n                                    type: 'horizontalInput',\n                                    templateOptions: {\n                                        type: 'number',\n                                        label: 'Store results for ...',\n                                        addonRight: {\n                                            text: 'days'\n                                        },\n                                        required: true,\n                                        help: 'Meta data from searches is stored in the database. When they\\'re deleted existing links to Hydra become invalid.'\n                                    }\n                                },\n                                {\n                                    key: 'showQuickFilterButtons',\n                                    type: 'horizontalSwitch',\n                                    templateOptions: {\n                                        type: 'switch',\n                                        label: 'Show quick filter',\n                                        help: 'Show quick filter buttons for movie and TV results'\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n\n            categoriesConfig: [\n                {\n                    key: 'enableCategorySizes',\n                    type: 'horizontalSwitch',\n                    templateOptions: {\n                        type: 'switch',\n                        label: 'Category sizes',\n                        help: \"Preset min and max sizes depending on the selected category\"\n                    }\n                },\n                {\n                    type: 'help',\n                    templateOptions: {\n                        type: 'help',\n                        lines: [\n                            \"The category configuration is not validated in any way. You can seriously fuck up Hydra's results and overall behavior so take care.\",\n                            \"Restrictions will taken from a result's category, not the search request category which may not always be the same.\"\n                        ],\n                        marginTop: '50px'\n                    }\n                },\n                {\n                    type: 'repeatSection',\n                    key: 'categories',\n                    model: rootModel.categoriesConfig,\n                    templateOptions: {\n                        btnText: 'Add new category',\n                        fields: [\n                            {\n                                key: 'name',\n                                type: 'horizontalInput',\n                                templateOptions: {\n                                    type: 'text',\n                                    label: 'Name',\n                                    help: 'Renaming categories might cause problems with repeating searches from the history',\n                                    required: true\n                                }\n                            },\n                            {\n                                key: 'searchType',\n                                type: 'horizontalSelect',\n                                templateOptions: {\n                                    label: 'Search type',\n                                    options: [\n                                        {name: 'General', value: 'SEARCH'},\n                                        {name: 'Audio', value: 'MUSIC'},\n                                        {name: 'EBook', value: 'BOOK'},\n                                        {name: 'Movie', value: 'MOVIE'},\n                                        {name: 'TV', value: 'TVSEARCH'}\n                                    ],\n                                    help: \"Determines how indexers will be searched and if autocompletion is available in the GUI\"\n                                }\n                            },\n                            {\n                                key: 'subtype',\n                                type: 'horizontalSelect',\n                                templateOptions: {\n                                    label: 'Sub type',\n                                    options: [\n                                        {name: 'Anime', value: 'ANIME'},\n                                        {name: 'Audiobook', value: 'AUDIOBOOK'},\n                                        {name: 'Comic', value: 'COMIC'},\n                                        {name: 'Ebook', value: 'EBOOK'},\n                                        {name: 'None', value: 'NONE'}\n                                    ],\n                                    help: \"Special search type. Used for indexer specific mappings between categories and newznab IDs\"\n                                }\n                            },\n                            {\n                                key: 'applyRestrictionsType',\n                                type: 'horizontalSelect',\n                                templateOptions: {\n                                    label: 'Apply restrictions',\n                                    options: [\n                                        {name: 'All searches', value: 'BOTH'},\n                                        {name: 'Internal searches', value: 'INTERNAL'},\n                                        {name: 'API searches', value: 'API'},\n                                        {name: 'Never', value: 'NONE'}\n                                    ],\n                                    help: \"For which type of search word restrictions will be applied\"\n                                }\n                            },\n                            {\n                                key: 'requiredWords',\n                                type: 'horizontalChips',\n                                templateOptions: {\n                                    type: 'text',\n                                    label: 'Required words',\n                                    help: \"Must *all* be present in a title which is converted to lowercase before. Apply words with return key.\"\n                                }\n                            },\n                            {\n                                key: 'requiredRegex',\n                                type: 'horizontalInput',\n                                templateOptions: {\n                                    type: 'text',\n                                    label: 'Required regex',\n                                    help: 'Must be present in a title (case is ignored)'\n                                }\n                            },\n                            {\n                                key: 'forbiddenWords',\n                                type: 'horizontalChips',\n                                templateOptions: {\n                                    type: 'text',\n                                    label: 'Forbidden words',\n                                    help: \"None may be present in a title which is converted to lowercase before. Apply words with return key.\"\n                                }\n                            },\n                            {\n                                key: 'forbiddenRegex',\n                                type: 'horizontalInput',\n                                templateOptions: {\n                                    type: 'text',\n                                    label: 'Forbidden regex',\n                                    help: 'Must not be present in a title (case is ignored)'\n                                }\n                            },\n                            {\n                                wrapper: 'settingWrapper',\n                                templateOptions: {\n                                    label: 'Size preset',\n                                    help: \"Will set these values on the search page\"\n                                },\n                                fieldGroup: [\n                                    {\n                                        key: 'minSizePreset',\n                                        type: 'duoSetting',\n                                        templateOptions: {\n                                            addonRight: {\n                                                text: 'MB'\n                                            }\n\n                                        }\n                                    },\n                                    {\n                                        type: 'duolabel'\n                                    },\n                                    {\n                                        key: 'maxSizePreset',\n                                        type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\n                                    }\n                                ]\n                            },\n                            {\n                                key: 'applySizeLimitsToApi',\n                                type: 'horizontalSwitch',\n                                templateOptions: {\n                                    type: 'switch',\n                                    label: 'Limit API results size',\n                                    help: \"Enable to apply the size preset to API results from this category\"\n                                }\n                            },\n                            {\n                                key: 'newznabCategories',\n                                type: 'horizontalChips',\n                                templateOptions: {\n                                    type: 'text',\n                                    label: 'Newznab categories',\n                                    help: 'Map newznab categories to Hydra categories. Used for parsing and when searching internally. Apply words with return key.'\n                                }\n                            },\n                            {\n                                key: 'ignoreResultsFrom',\n                                type: 'horizontalSelect',\n                                templateOptions: {\n                                    label: 'Ignore results',\n                                    options: [\n                                        {name: 'For all searches', value: 'BOTH'},\n                                        {name: 'For internal searches', value: 'INTERNAL'},\n                                        {name: 'For API searches', value: 'API'},\n                                        {name: 'Never', value: 'NONE'}\n                                    ],\n                                    help: \"Ignore results from this category\"\n                                }\n                            }\n\n                        ],\n                        defaultModel: {\n                            name: null,\n                            applyRestrictionsType: \"NONE\",\n                            forbiddenRegex: null,\n                            forbiddenWords: null,\n                            ignoreResultsFrom: \"NONE\",\n                            mayBeSelected: true,\n                            maxSizePreset: null,\n                            minSizePreset: null,\n                            newznabCategories: [],\n                            preselect: true,\n                            requiredRegex: null,\n                            requiredWords: null,\n                            searchType: \"SEARCH\",\n                            subType: \"NONE\"\n                        }\n                    }\n                }\n            ],\n\n            downloading: [\n                {\n                    wrapper: 'fieldset',\n                    templateOptions: {label: 'General'},\n                    fieldGroup: [\n                        {\n                            key: 'saveTorrentsTo',\n                            type: 'fileInput',\n                            templateOptions: {\n                                label: 'Torrent black hole',\n                                help: 'When the \"Torrent\" button is clicked torrents will be saved to this folder on the server. Ignored if not set.',\n                                type: \"folder\"\n                            }\n                        }\n                    ]\n\n                },\n                {\n                    wrapper: 'fieldset',\n                    key: 'downloaders',\n                    templateOptions: {label: 'Downloaders'},\n                    fieldGroup: [\n                        {\n                            type: \"arrayConfig\",\n                            data: {\n                                defaultModel: {\n                                    enabled: true\n                                },\n                                entryTemplateUrl: 'downloaderEntry.html',\n                                presets: function () {\n                                    return getDownloaderPresets();\n                                },\n                                checkAddingAllowed: function () {\n                                    return true;\n                                },\n                                presetsOnly: true,\n                                addNewText: 'Add new downloader',\n                                fieldsFunction: getDownloaderBoxFields,\n                                allowDeleteFunction: function () {\n                                    return true;\n                                },\n                                checkBeforeClose: function (scope, model) {\n                                    var DownloaderCheckBeforeCloseService = $injector.get(\"DownloaderCheckBeforeCloseService\");\n                                    return DownloaderCheckBeforeCloseService.check(scope, model);\n                                },\n                                resetFunction: function (scope) {\n                                    scope.options.resetModel();\n                                    scope.options.resetModel();\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n\n\n            indexers: [\n                {\n                    type: \"arrayConfig\",\n                    data: {\n                        defaultModel: {\n                            allCapsChecked: false,\n                            apiKey: null,\n                            backend: 'NEWZNAB',\n                            configComplete: false,\n                            categoryMapping: null,\n                            downloadLimit: null,\n                            enabled: true,\n                            enabledCategories: [],\n                            enabledForSearchSource: \"BOTH\",\n                            generalMinSize: null,\n                            hitLimit: null,\n                            hitLimitResetTime: 0,\n                            host: null,\n                            loadLimitOnRandom: null,\n                            name: null,\n                            password: null,\n                            preselect: true,\n                            score: 0,\n                            searchModuleType: 'NEWZNAB',\n                            showOnSearch: true,\n                            supportedSearchIds: undefined,\n                            supportedSearchTypes: undefined,\n                            timeout: null,\n                            username: null,\n                            userAgent: null\n                        },\n                        addNewText: 'Add new indexer',\n                        entryTemplateUrl: 'indexerEntry.html',\n                        presets: function (model) {\n                            return getIndexerPresets(model);\n                        },\n\n                        checkAddingAllowed: function (existingIndexers, preset) {\n                            if (!preset || !(preset.searchModuleType === \"ANIZB\" || preset.searchModuleType === \"BINSEARCH\" || preset.searchModuleType === \"NZBINDEX\" || preset.searchModuleType === \"NZBCLUB\")) {\n                                return true;\n                            }\n                            return !_.any(existingIndexers, function (existingEntry) {\n                                return existingEntry.name === preset.name;\n                            });\n                        },\n                        fieldsFunction: getIndexerBoxFields,\n                        allowDeleteFunction: function (model) {\n                            return true;\n                        },\n                        checkBeforeClose: function (scope, model) {\n                            var IndexerCheckBeforeCloseService = $injector.get(\"IndexerCheckBeforeCloseService\");\n                            return IndexerCheckBeforeCloseService.check(scope, model);\n                        },\n                        resetFunction: function (scope) {\n                            //Then reset the model twice (for some reason when we do it once the search types / ids fields are empty, resetting again fixes that... (wtf))\n                            scope.options.resetModel();\n                            scope.options.resetModel();\n                        }\n                    }\n                }, {\n                type: 'recheckAllCaps'\n                }\n            ],\n            auth: [\n                {\n                    key: 'authType',\n                    type: 'horizontalSelect',\n                    templateOptions: {\n                        label: 'Auth type',\n                        options: [\n                            {name: 'None', value: 'NONE'},\n                            {name: 'HTTP Basic auth', value: 'BASIC'},\n                            {name: 'Login form', value: 'FORM'}\n                        ]\n                    }\n                },\n                {\n                    key: 'restrictSearch',\n                    type: 'horizontalSwitch',\n                    templateOptions: {\n                        type: 'switch',\n                        label: 'Restrict searching',\n                        help: 'Restrict access to searching'\n                    },\n                    hideExpression: function () {\n                        return rootModel.auth.authType === \"NONE\";\n                    }\n                },\n                {\n                    key: 'restrictStats',\n                    type: 'horizontalSwitch',\n                    templateOptions: {\n                        type: 'switch',\n                        label: 'Restrict stats',\n                        help: 'Restrict access to stats'\n                    },\n                    hideExpression: function () {\n                        return rootModel.auth.authType === \"NONE\";\n                    }\n                },\n                {\n                    key: 'restrictAdmin',\n                    type: 'horizontalSwitch',\n                    templateOptions: {\n                        type: 'switch',\n                        label: 'Restrict admin',\n                        help: 'Restrict access to admin functions'\n                    },\n                    hideExpression: function () {\n                        return rootModel.auth.authType === \"NONE\";\n                    }\n                },\n                {\n                    key: 'restrictDetailsDl',\n                    type: 'horizontalSwitch',\n                    templateOptions: {\n                        type: 'switch',\n                        label: 'Restrict NZB details & DL',\n                        help: 'Restrict NZB details, comments and download links'\n                    },\n                    hideExpression: function () {\n                        return rootModel.auth.authType === \"NONE\";\n                    }\n                },\n                {\n                    key: 'restrictIndexerSelection',\n                    type: 'horizontalSwitch',\n                    templateOptions: {\n                        type: 'switch',\n                        label: 'Restrict indexer selection box',\n                        help: 'Restrict visibility of indexer selection box in search. Affects only GUI'\n                    },\n                    hideExpression: function () {\n                        return rootModel.auth.authType === \"NONE\";\n                    }\n                },\n                {\n                    key: 'rememberUsers',\n                    type: 'horizontalSwitch',\n                    templateOptions: {\n                        type: 'switch',\n                        label: 'Remember users',\n                        help: 'Remember users with cookie for 14 days'\n                    },\n                    hideExpression: function () {\n                        return rootModel.auth.authType === \"NONE\";\n                    }\n                },\n                {\n                    key: 'rememberMeValidityDays',\n                    type: 'horizontalInput',\n                    templateOptions: {\n                        type: 'number',\n                        label: 'Cookie expiry',\n                        help: 'How long users are remembered',\n                        addonRight: {\n                            text: 'days'\n                        }\n                    }\n                },\n                {\n                    type: 'repeatSection',\n                    key: 'users',\n                    model: rootModel.auth,\n                    hideExpression: function () {\n                        return rootModel.auth.authType === \"NONE\";\n                    },\n                    templateOptions: {\n\n                        btnText: 'Add new user',\n                        altLegendText: 'Authless',\n                        fields: [\n                            {\n                                key: 'username',\n                                type: 'horizontalInput',\n                                templateOptions: {\n                                    type: 'text',\n                                    label: 'Username',\n                                    required: true\n                                }\n\n                            },\n                            {\n                                key: 'password',\n                                type: 'passwordSwitch',\n                                templateOptions: {\n                                    type: 'password',\n                                    label: 'Password',\n                                    required: true\n                                }\n                            },\n                            {\n                                key: 'maySeeAdmin',\n                                type: 'horizontalSwitch',\n                                templateOptions: {\n                                    type: 'switch',\n                                    label: 'May see admin area'\n                                }\n                            },\n                            {\n                                key: 'maySeeStats',\n                                type: 'horizontalSwitch',\n                                templateOptions: {\n                                    type: 'switch',\n                                    label: 'May see stats'\n                                },\n                                hideExpression: 'model.maySeeAdmin'\n                            },\n                            {\n                                key: 'maySeeDetailsDl',\n                                type: 'horizontalSwitch',\n                                templateOptions: {\n                                    type: 'switch',\n                                    label: 'May see NZB details & DL links'\n                                },\n                                hideExpression: 'model.maySeeAdmin'\n                            },\n                            {\n                                key: 'showIndexerSelection',\n                                type: 'horizontalSwitch',\n                                templateOptions: {\n                                    type: 'switch',\n                                    label: 'May see indexer selection box'\n                                },\n                                hideExpression: 'model.maySeeAdmin'\n                            }\n                        ],\n                        defaultModel: {\n                            username: null,\n                            password: null,\n                            maySeeStats: true,\n                            maySeeAdmin: true,\n                            maySeeDetailsDl: true,\n                            showIndexerSelection: true\n                        }\n                    }\n                }\n            ]\n        }\n    }\n}\n\n\nfunction getIndexerPresets(configuredIndexers) {\n    var presets = [\n        [\n            {\n                name: \"6box\",\n                host: \"https://6box.me\"\n            },\n            {\n                name: \"6box spotweb\",\n                host: \"https://6box.me/spotweb\"\n            },\n            {\n                name: \"altHUB\",\n                host: \"https://api.althub.co.za\"\n            }, {\n            name: \"dbKitty\",\n            host: \"https://dbkitty.club\"\n        },\n            {\n                name: \"DogNZB\",\n                host: \"https://api.dognzb.cr\"\n            },\n            {\n                name: \"Drunken Slug\",\n                host: \"https://api.drunkenslug.com\"\n            },\n            {\n                name: \"FastNZB\",\n                host: \"https://fastnzb.com\"\n            },\n            {\n                name: \"LuluNZB\",\n                host: \"https://lulunzb.com\"\n            },\n            {\n                name: \"miatrix\",\n                host: \"https://www.miatrix.com\"\n            },\n            {\n                name: \"newz69.keagaming\",\n                host: \"https://newz69.keagaming.com\"\n            },\n            {\n                name: \"NewzTown\",\n                host: \"https://newztown.co.za\"\n            },\n            {\n                name: \"NZB Finder\",\n                host: \"https://nzbfinder.ws\"\n            },\n            {\n                name: \"NZBCat\",\n                host: \"https://nzb.cat\"\n            },\n            {\n                name: \"nzb.ag\",\n                host: \"https://nzb.ag\"\n            },\n            {\n                name: \"nzb.is\",\n                host: \"https://nzb.is\"\n            },\n            {\n                name: \"nzb.su\",\n                host: \"https://api.nzb.su\"\n            },\n            {\n                name: \"nzb7\",\n                host: \"https://www.nzb7.com\"\n            },\n            {\n                name: \"NZBGeek\",\n                host: \"https://api.nzbgeek.info\"\n            },\n            {\n                name: \"NzbNdx\",\n                host: \"https://www.nzbndx.com\"\n            },\n            {\n                name: \"NzBNooB\",\n                host: \"https://www.nzbnoob.com\"\n            },\n            {\n                name: \"nzbplanet\",\n                host: \"https://nzbplanet.net\"\n            },\n            {\n                name: \"NZBs.org\",\n                host: \"https://nzbs.org\"\n            },\n            {\n                name: \"NZBs.io\",\n                host: \"https://www.nzbs.io\"\n            },\n            {\n                name: \"Nzeeb\",\n                host: \"https://www.nzeeb.com\"\n            },\n            {\n                name: \"oznzb\",\n                host: \"https://api.oznzb.com\"\n            },\n            {\n                name: \"omgwtfnzbs\",\n                host: \"https://api.omgwtfnzbs.me\"\n            },\n            {\n                name: \"PFMonkey\",\n                host: \"https://www.pfmonkey.com\"\n            },\n            {\n                name: \"SimplyNZBs\",\n                host: \"https://simplynzbs.com\"\n            },\n            {\n                name: \"Tabula-Rasa\",\n                host: \"https://www.tabula-rasa.pw\"\n            },\n            {\n                name: \"Usenet-Crawler\",\n                host: \"https://www.usenet-crawler.com\"\n            }\n        ],\n        [\n            {\n                allCapsChecked: true,\n                configComplete: true,\n                name: \"Jackett/Cardigann\",\n                host: \"http://127.0.0.1:9117/api/v2.0/indexers/YOURTRACKER/results/torznab/\",\n                supportedSearchIds: undefined,\n                supportedSearchTypes: undefined,\n                searchModuleType: \"TORZNAB\",\n                enabledForSearchSource: \"BOTH\"\n            }\n        ],\n        [\n            {\n                allCapsChecked: true,\n                enabledForSearchSource: \"BOTH\",\n                categories: [\"Anime\"],\n                configComplete: true,\n                downloadLimit: null,\n                enabled: false,\n                hitLimit: null,\n                hitLimitResetTime: null,\n                host: \"https://anizb.org\",\n                loadLimitOnRandom: null,\n                name: \"anizb\",\n                password: null,\n                preselect: true,\n                score: 0,\n                supportedSearchIds: [],\n                supportedSearchTypes: [],\n                showOnSearch: true,\n                timeout: null,\n                searchModuleType: \"ANIZB\",\n                username: null\n            },\n            {\n                allCapsChecked: true,\n                enabledForSearchSource: \"INTERNAL\",\n                categories: [],\n                configComplete: true,\n                downloadLimit: null,\n                enabled: true,\n                hitLimit: null,\n                hitLimitResetTime: null,\n                host: \"https://binsearch.info\",\n                loadLimitOnRandom: null,\n                name: \"Binsearch\",\n                password: null,\n                preselect: true,\n                score: 0,\n                supportedSearchIds: [],\n                supportedSearchTypes: [],\n                showOnSearch: true,\n                timeout: null,\n                searchModuleType: \"BINSEARCH\",\n                username: null\n            },\n            {\n                allCapsChecked: true,\n                enabledForSearchSource: \"INTERNAL\",\n                categories: [],\n                configComplete: true,\n                downloadLimit: null,\n                enabled: true,\n                generalMinSize: 1,\n                hitLimit: null,\n                hitLimitResetTime: null,\n                host: \"https://nzbindex.com\",\n                loadLimitOnRandom: null,\n                name: \"NZBIndex\",\n                password: null,\n                preselect: true,\n                score: 0,\n                supportedSearchIds: [],\n                supportedSearchTypes: [],\n                showOnSearch: true,\n                timeout: null,\n                searchModuleType: \"NZBINDEX\",\n                username: null\n            }\n        ]\n    ];\n\n    return presets;\n}\n\nfunction getIndexerBoxFields(model, parentModel, isInitial, injector, CategoriesService) {\n    var fieldset = [];\n    if (model.searchModuleType === \"TORZNAB\") {\n        fieldset.push({\n            type: 'help',\n            templateOptions: {\n                type: 'help',\n                lines: [\"Torznab indexers can only be used for internal searches or dedicated searches using /torznab/api\"]\n            }\n        });\n    } else if ((model.searchModuleType === \"NEWZNAB\" || model.searchModuleType === \"TORZNAB\") && !isInitial) {\n        var message;\n        var cssClass;\n        if (!model.configComplete) {\n            message = \"The config of this indexer is incomplete. Please click the button at the bottom to check its capabilities and complete its configuration.\";\n            cssClass = \"alert alert-danger\";\n        } else {\n            message = \"The capabilities of this indexer were not checked completely. Some actually supported search types or IDs may not be usable.\";\n            cssClass = \"alert alert-warning\";\n        }\n        fieldset.push({\n            type: 'help',\n            hideExpression: 'model.allCapsChecked && model.configComplete',\n            templateOptions: {\n                type: 'help',\n                lines: [message],\n                class: cssClass\n            }\n        });\n    }\n\n    fieldset.push({\n        key: 'enabled',\n        type: 'horizontalSwitch',\n        hideExpression: '!model.configComplete',\n        templateOptions: {\n            type: 'switch',\n            label: 'Enabled'\n        }\n    });\n\n    if (model.searchModuleType === 'NEWZNAB' || model.searchModuleType === 'TORZNAB') {\n        fieldset.push(\n            {\n                key: 'name',\n                type: 'horizontalInput',\n                templateOptions: {\n                    type: 'text',\n                    label: 'Name',\n                    required: true,\n                    help: 'Used for identification. Changing the name will lose all history and stats!'\n                },\n                validators: {\n                    uniqueName: {\n                        expression: function (viewValue) {\n                            if (isInitial || viewValue !== model.name) {\n                                return _.pluck(parentModel, \"name\").indexOf(viewValue) === -1;\n                            }\n                            return true;\n                        },\n                        message: '\"Indexer \\\\\"\" + $viewValue + \"\\\\\" already exists\"'\n                    },\n                    noComma:\n                        {\n                            expression: function ($viewValue, $modelValue) {\n                                var value = $modelValue || $viewValue;\n                                if (value) {\n                                    return value.indexOf(\",\") === -1;\n                                }\n                                return true;\n                            },\n                            message: '\"Name may not contain a comma\"'\n                        }\n                }\n            })\n    }\n    if (model.searchModuleType === 'NEWZNAB' || model.searchModuleType === 'TORZNAB') {\n        var hostField = {\n            key: 'host',\n            type: 'horizontalInput',\n            templateOptions: {\n                type: 'text',\n                label: 'Host',\n                required: true,\n                placeholder: 'http://www.someindexer.com'\n            },\n            watcher: {\n                listener: function (field, newValue, oldValue, scope) {\n                    if (newValue !== oldValue) {\n                        scope.$parent.needsConnectionTest = true;\n                    }\n                }\n            }\n        };\n        if (model.searchModuleType === 'TORZNAB') {\n            hostField.templateOptions.help = 'If you use Jackett and have an external URL use that one';\n        }\n        fieldset.push(\n            hostField\n        );\n    }\n\n    if (model.searchModuleType === 'NEWZNAB' || model.searchModuleType === 'TORZNAB') {\n        fieldset.push(\n            {\n                key: 'apiKey',\n                type: 'horizontalInput',\n                templateOptions: {\n                    type: 'text',\n                    label: 'API Key'\n                },\n                watcher: {\n                    listener: function (field, newValue, oldValue, scope) {\n                        if (newValue !== oldValue) {\n                            scope.$parent.needsConnectionTest = true;\n                        }\n                    }\n                }\n            }\n        )\n    }\n\n    fieldset.push(\n        {\n            key: 'score',\n            type: 'horizontalInput',\n            templateOptions: {\n                type: 'number',\n                label: 'Priority',\n                required: true,\n                help: 'When duplicate search results are found the result from the indexer with the highest number will be selected'\n            }\n        });\n\n    fieldset.push(\n        {\n            key: 'timeout',\n            type: 'horizontalInput',\n            templateOptions: {\n                type: 'number',\n                label: 'Timeout',\n                help: 'Supercedes the general timeout in \"Searching\"'\n            }\n        },\n        {\n            key: 'schedule',\n            type: 'horizontalChips',\n            templateOptions: {\n                type: 'text',\n                label: 'Schedule',\n                help: 'Determines when an indexer should be selected. See <a href=\"https://github.com/theotherp/nzbhydra2/wiki/Indexer-schedules\" target=\"_blank\">wiki</a>. You can enter multiple time spans. Apply values with return key.'\n            }\n        }\n    );\n\n    if (model.searchModuleType === 'NEWZNAB' || model.searchModuleType === 'TORZNAB') {\n        fieldset.push(\n            {\n                key: 'hitLimit',\n                type: 'horizontalInput',\n                templateOptions: {\n                    type: 'number',\n                    label: 'API hit limit',\n                    help: 'Maximum number of API hits since \"API hit reset time\"'\n                }\n            },\n            {\n                key: 'downloadLimit',\n                type: 'horizontalInput',\n                templateOptions: {\n                    type: 'number',\n                    label: 'Download limit',\n                    help: 'When # of downloads since \"Hit reset time\" is reached indexer will not be searched.'\n                }\n            }\n        );\n        fieldset.push(\n            {\n                key: 'loadLimitOnRandom',\n                type: 'horizontalInput',\n                templateOptions: {\n                    type: 'number',\n                    label: 'Load limiting',\n                    help: 'If set indexer will only be picked for one out of x API searches (on average)'\n                },\n                validators: {\n                    greaterThanZero: {\n                        expression: function ($viewValue, $modelValue) {\n                            var value = $modelValue || $viewValue;\n                            return angular.isUndefined(value) || value === null || value === \"\" || value > 1;\n                        },\n                        message: '\"Value must be greater than 1\"'\n                    }\n\n                }\n            },\n            {\n                key: 'hitLimitResetTime',\n                type: 'horizontalInput',\n                hideExpression: '!model.hitLimit && !model.downloadLimit',\n                templateOptions: {\n                    type: 'number',\n                    label: 'Hit reset time',\n                    help: 'UTC hour of day at which the API hit counter is reset (0-23). Leave empty for a rolling reset counter'\n                },\n                validators: {\n                    timeOfDay: {\n                        expression: function ($viewValue, $modelValue) {\n                            var value = $modelValue || $viewValue;\n                            return value >= 0 && value <= 23;\n                        },\n                        message: '$viewValue + \" is not a valid hour of day (0-23)\"'\n                    }\n\n                }\n            });\n    }\n    if (model.searchModuleType === 'NEWZNAB') {\n        fieldset.push(\n            {\n                key: 'username',\n                type: 'horizontalInput',\n                templateOptions: {\n                    type: 'text',\n                    required: false,\n                    label: 'Username',\n                    help: 'Only needed if indexer requires HTTP auth for API access (rare)'\n                },\n                watcher: {\n                    listener: function (field, newValue, oldValue, scope) {\n                        if (newValue !== oldValue) {\n                            scope.$parent.needsConnectionTest = true;\n                        }\n                    }\n                }\n            }\n        );\n    }\n    if (model.searchModuleType === 'NEWZNAB') {\n        fieldset.push(\n            {\n                key: 'password',\n                type: 'passwordSwitch',\n                hideExpression: '!model.username',\n                templateOptions: {\n                    type: 'text',\n                    required: false,\n                    label: 'Password',\n                    help: 'Only needed if indexer requires HTTP auth for API access (rare)'\n                }\n            }\n        )\n    }\n\n    if (model.searchModuleType === 'NEWZNAB') {\n        fieldset.push(\n            {\n                key: 'userAgent',\n                type: 'horizontalInput',\n                templateOptions: {\n                    type: 'text',\n                    required: false,\n                    label: 'User agent',\n                    help: 'Rarely needed. Will supercede the one in the main searching settings'\n                }\n            }\n        )\n    }\n\n\n    fieldset.push(\n        {\n            key: 'preselect',\n            type: 'horizontalSwitch',\n            hideExpression: 'model.enabledForSearchSource===\"EXTERNAL\"',\n            templateOptions: {\n                type: 'switch',\n                label: 'Preselect',\n                help: 'Preselect this indexer on the search page'\n            }\n        }\n    );\n    fieldset.push(\n        {\n            key: 'enabledForSearchSource',\n            type: 'horizontalSelect',\n            templateOptions: {\n                label: 'Enable for...',\n                options: [\n                    {name: 'Internal searches only', value: 'INTERNAL'},\n                    {name: 'API searches only', value: 'API'},\n                    {name: 'Internal and API searches', value: 'BOTH'}\n                ]\n            }\n        }\n    );\n\n    if (model.searchModuleType !== \"ANIZB\") {\n        var cats = CategoriesService.getWithoutAll();\n        var options = _.map(cats, function (x) {\n            return {id: x.name, label: x.name}\n        });\n        fieldset.push(\n            {\n                key: 'enabledCategories',\n                type: 'horizontalMultiselect',\n                templateOptions: {\n                    label: 'Categories',\n                    help: 'Only use indexer when searching for these and also reject results from others. Selecting none equals selecting all',\n                    options: options,\n                    settings: {\n                        showSelectedValues: false,\n                        noSelectedText: \"None/All\"\n                    }\n                }\n            }\n        );\n    }\n\n    if (model.searchModuleType === 'NEWZNAB' || model.searchModuleType === 'TORZNAB') {\n        fieldset.push(\n            {\n                key: 'supportedSearchIds',\n                type: 'horizontalMultiselect',\n                templateOptions: {\n                    label: 'Search IDs',\n                    options: [\n                        {label: 'TVDB', id: 'TVDB'},\n                        {label: 'TVRage', id: 'TVRAGE'},\n                        {label: 'IMDB', id: 'IMDB'},\n                        {label: 'Trakt', id: 'TRAKT'},\n                        {label: 'TVMaze', id: 'TVMAZE'},\n                        {label: 'TMDB', id: 'TMDB'}\n                    ],\n                    noSelectedText: \"None\"\n                }\n            }\n        );\n    }\n    if (model.searchModuleType === 'NEWZNAB' || model.searchModuleType === 'TORZNAB') {\n        fieldset.push(\n            {\n                key: 'supportedSearchTypes',\n                type: 'horizontalMultiselect',\n                templateOptions: {\n                    label: 'Search types',\n                    options: [\n                        {label: 'Movies', id: 'MOVIE'},\n                        {label: 'TV', id: 'TVSEARCH'},\n                        {label: 'Ebooks', id: 'BOOK'},\n                        {label: 'Audio', id: 'AUDIO'}\n                    ],\n                    buttonText: \"None\"\n                }\n            }\n        )\n    }\n\n    if (model.searchModuleType === 'NEWZNAB' || model.searchModuleType === 'TORZNAB') {\n        fieldset.push(\n            {\n                type: 'horizontalCheckCaps',\n                hideExpression: '!model.host || (!model.apiKey && model.host.toLowerCase().indexOf(\"sickbeard\")===-1) || !model.name',\n                templateOptions: {\n                    label: 'Check capabilities',\n                    help: 'Find out what search types and IDs the indexer supports. Done automatically for new indexers.'\n                }\n            }\n        )\n    }\n\n    if (model.searchModuleType === 'nzbindex') {\n        fieldset.push(\n            {\n                key: 'generalMinSize',\n                type: 'horizontalInput',\n                templateOptions: {\n                    type: 'number',\n                    label: 'Min size',\n                    help: 'NZBIndex returns a lot of crap with small file sizes. Set this value and all smaller results will be filtered out no matter the category'\n                }\n            }\n        );\n    }\n\n    return fieldset;\n}\n\n\nfunction getDownloaderBoxFields(model, parentModel, isInitial) {\n    var fieldset = [];\n\n    fieldset = _.union(fieldset, [\n        {\n            key: 'enabled',\n            type: 'horizontalSwitch',\n            templateOptions: {\n                type: 'switch',\n                label: 'Enabled'\n            }\n        },\n        {\n            key: 'name',\n            type: 'horizontalInput',\n            templateOptions: {\n                type: 'text',\n                label: 'Name',\n                required: true\n            },\n            validators: {\n                uniqueName: {\n                    expression: function (viewValue) {\n                        if (isInitial || viewValue !== model.name) {\n                            return _.pluck(parentModel, \"name\").indexOf(viewValue) === -1;\n                        }\n                        return true;\n                    },\n                    message: '\"Downloader \\\\\"\" + $viewValue + \"\\\\\" already exists\"'\n                }\n            }\n\n        },\n        {\n            key: 'url',\n            type: 'horizontalInput',\n            templateOptions: {\n                type: 'text',\n                label: 'URL',\n                help: 'URL with scheme and full path',\n                required: true\n            },\n            watcher: {\n                listener: function (field, newValue, oldValue, scope) {\n                    if (newValue !== oldValue) {\n                        scope.$parent.needsConnectionTest = true;\n                    }\n                }\n            }\n        }\n    ]);\n\n\n    if (model.downloaderType === \"SABNZBD\") {\n        fieldset.push({\n            key: 'apiKey',\n            type: 'horizontalInput',\n            templateOptions: {\n                type: 'text',\n                label: 'API Key'\n            },\n            watcher: {\n                listener: function (field, newValue, oldValue, scope) {\n                    if (newValue !== oldValue) {\n                        scope.$parent.needsConnectionTest = true;\n                    }\n                }\n            }\n        })\n    } else if (model.downloaderType === \"NZBGET\") {\n        fieldset.push({\n            key: 'username',\n            type: 'horizontalInput',\n            templateOptions: {\n                type: 'text',\n                label: 'Username'\n            },\n            watcher: {\n                listener: function (field, newValue, oldValue, scope) {\n                    if (newValue !== oldValue) {\n                        scope.$parent.needsConnectionTest = true;\n                    }\n                }\n            }\n        });\n        fieldset.push({\n            key: 'password',\n            type: 'passwordSwitch',\n            templateOptions: {\n                type: 'text',\n                label: 'Password'\n            },\n            watcher: {\n                listener: function (field, newValue, oldValue, scope) {\n                    if (newValue !== oldValue) {\n                        scope.$parent.needsConnectionTest = true;\n                    }\n                }\n            }\n        })\n    }\n\n    fieldset = _.union(fieldset, [\n        {\n            key: 'defaultCategory',\n            type: 'horizontalInput',\n            templateOptions: {\n                type: 'text',\n                label: 'Default category',\n                help: 'When adding NZBs this category will be used instead of asking for the category. Write \"No category\" to let the downloader decide.',\n                placeholder: 'Ask when downloading'\n            }\n        },\n        {\n            key: 'nzbAddingType',\n            type: 'horizontalSelect',\n            templateOptions: {\n                type: 'select',\n                label: 'NZB adding type',\n                options: [\n                    {name: 'Send link', value: 'SEND_LINK'},\n                    {name: 'Upload NZB', value: 'UPLOAD'}\n                ],\n                help: \"How NZBs are added to the downloader, either by sending a link to the NZB or by uploading the NZB data. Uploading is recommended\"\n            }\n        },\n        {\n            key: 'iconCssClass',\n            type: 'horizontalInput',\n            templateOptions: {\n                type: 'text',\n                label: 'Icon CSS class',\n                help: 'Copy an icon name from http://fontawesome.io/examples/ (e.g. \"film\")',\n                placeholder: 'Default'\n            }\n        }\n    ]);\n\n    return fieldset;\n}\n\nfunction getDownloaderPresets() {\n    return [[\n        {\n            name: \"NZBGet\",\n            downloaderType: \"NZBGET\",\n            username: \"nzbgetx\",\n            nzbAddingType: \"UPLOAD\",\n            nzbAccessType: \"REDIRECT\",\n            iconCssClass: \"\",\n            downloadType: \"NZB\",\n            url: \"http://nzbget:tegbzn6789@localhost:6789\"\n        },\n        {\n            url: \"http://localhost:8086\",\n            downloaderType: \"SABNZBD\",\n            name: \"SABnzbd\",\n            nzbAddingType: \"UPLOAD\",\n            nzbAccessType: \"REDIRECT\",\n            iconCssClass: \"\",\n            downloadType: \"NZB\"\n        }\n    ]];\n}\n\nfunction handleConnectionCheckFail(ModalService, data, model, whatFailed, deferred) {\n    var message;\n    var yesText;\n    if (data.checked) {\n        message = \"The connection to the \" + whatFailed + \" failed: \" + data.message + \"<br>Do you want to add it anyway?\";\n        yesText = \"I know what I'm doing\";\n    } else {\n        message = \"The connection to the \" + whatFailed + \" could not be tested, sorry. Please check the log.\";\n        yesText = \"I'll risk it\";\n    }\n    ModalService.open(\"Connection check failed\", message, {\n        yes: {\n            onYes: function () {\n                deferred.resolve();\n            },\n            text: yesText\n        },\n        no: {\n            onNo: function () {\n                model.enabled = false;\n                deferred.resolve();\n            },\n            text: \"Add it, but disabled\"\n        },\n        cancel: {\n            onCancel: function () {\n                deferred.reject();\n            },\n            text: \"Aahh, let me try again\"\n        }\n    });\n}\n\n\nangular\n    .module('nzbhydraApp')\n    .factory('IndexerCheckBeforeCloseService', IndexerCheckBeforeCloseService);\n\nfunction IndexerCheckBeforeCloseService($q, ModalService, ConfigBoxService, growl, blockUI) {\n\n    return {\n        check: checkBeforeClose\n    };\n\n    function checkBeforeClose(scope, model) {\n        var deferred = $q.defer();\n        if (!scope.isInitial && (!scope.needsConnectionTest || scope.form.capsChecked)) {\n            checkCapsWhenClosing(scope, model).then(function () {\n                deferred.resolve(model);\n            }, function () {\n                deferred.reject();\n            });\n        } else {\n            blockUI.start(\"Testing connection...\");\n            scope.spinnerActive = true;\n            var url = \"internalapi/indexer/checkConnection\";\n            ConfigBoxService.checkConnection(url, model).then(function () {\n                    growl.info(\"Connection to the indexer tested successfully\");\n                    checkCapsWhenClosing(scope, model).then(function (data) {\n                        blockUI.reset();\n                        scope.spinnerActive = false;\n                        deferred.resolve(data);\n                    }, function () {\n                        blockUI.reset();\n                        scope.spinnerActive = false;\n                        deferred.reject();\n                    });\n                },\n                function (data) {\n                    blockUI.reset();\n                    handleConnectionCheckFail(ModalService, data, model, \"indexer\", deferred);\n                });\n        }\n        return deferred.promise;\n    }\n\n    //Called when the indexer dialog is closed\n    function checkCapsWhenClosing(scope, model) {\n        var deferred = $q.defer();\n        if (angular.isUndefined(model.supportedSearchIds) || angular.isUndefined(model.supportedSearchTypes)) {\n\n            blockUI.start(\"New indexer found. Testing its capabilities. This may take a bit...\");\n            ConfigBoxService.checkCaps({indexerConfig: model, checkType: \"SINGLE\"}).then(\n                function (data) {\n                    data = data[0]; //We get a list of results (with one result because the check type is single)\n                    blockUI.reset();\n                    scope.spinnerActive = false;\n                    if (data.allCapsChecked && data.configComplete) {\n                        growl.info(\"Successfully tested capabilites of indexer\");\n                    } else if (!data.allCapsChecked && data.configComplete) {\n                        ModalService.open(\"Incomplete caps check\", \"The capabilities of the indexer could not be checked completely. You may use it but it's recommended to repeat the check at another time.<br>Until then some search types or IDs may not be usable.\", {}, \"md\", \"left\");\n                    } else if (!data.configComplete) {\n                        ModalService.open(\"Error testing capabilities\", \"An error occurred while contacting the indexer. It will not be usable until the caps check has been executed. You can trigger it manually from the indexer config box\", {}, \"md\", \"left\");\n                    }\n\n                    deferred.resolve(data.indexerConfig);\n                },\n                function () {\n                    blockUI.reset();\n                    scope.spinnerActive = false;\n                    model.supportedSearchIds = undefined;\n                    model.supportedSearchTypes = undefined;\n                    ModalService.open(\"Error testing capabilities\", \"An error occurred while contacting the indexer. It will not be usable until the caps check has been executed. You can trigger it manually using the button below.\", {}, \"md\", \"left\");\n                    deferred.resolve();\n                }).finally(\n                function () {\n                    scope.spinnerActive = false;\n                })\n        } else {\n            deferred.resolve();\n        }\n        return deferred.promise;\n\n    }\n}\n\n\nangular\n    .module('nzbhydraApp')\n    .factory('DownloaderCheckBeforeCloseService', DownloaderCheckBeforeCloseService);\n\nfunction DownloaderCheckBeforeCloseService($q, ConfigBoxService, growl, ModalService, blockUI) {\n\n    return {\n        check: checkBeforeClose\n    };\n\n    function checkBeforeClose(scope, model) {\n        var deferred = $q.defer();\n        if (!scope.isInitial && !scope.needsConnectionTest) {\n            deferred.resolve();\n        } else {\n            scope.spinnerActive = true;\n            blockUI.start(\"Testing connection...\");\n            var url = \"internalapi/downloader/checkConnection\";\n            ConfigBoxService.checkConnection(url, JSON.stringify(model)).then(function () {\n                    blockUI.reset();\n                    scope.spinnerActive = false;\n                    growl.info(\"Connection to the downloader tested successfully\");\n                    deferred.resolve();\n                },\n                function (data) {\n                    blockUI.reset();\n                    scope.spinnerActive = false;\n                    handleConnectionCheckFail(ModalService, data, model, \"downloader\", deferred);\n                }).finally(function () {\n                scope.spinnerActive = false;\n                blockUI.reset();\n            });\n        }\n        return deferred.promise;\n    }\n\n}\n","\r\nConfigController.$inject = [\"$scope\", \"$http\", \"activeTab\", \"ConfigService\", \"config\", \"DownloaderCategoriesService\", \"ConfigFields\", \"ConfigModel\", \"ModalService\", \"RestartService\", \"localStorageService\", \"$state\", \"growl\"];angular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigModel', function () {\r\n        return {};\r\n    });\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigWatcher', function () {\r\n        var $scope;\r\n\r\n        return {\r\n            watch: watch\r\n        };\r\n\r\n        function watch(scope) {\r\n            $scope = scope;\r\n            $scope.$watchGroup([\"config.main.host\"], function () {\r\n            }, true);\r\n        }\r\n    });\r\n\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('ConfigController', ConfigController);\r\n\r\nfunction ConfigController($scope, $http, activeTab, ConfigService, config, DownloaderCategoriesService, ConfigFields, ConfigModel, ModalService, RestartService, localStorageService, $state, growl) {\r\n    $scope.config = config;\r\n    $scope.submit = submit;\r\n    $scope.activeTab = activeTab;\r\n\r\n    $scope.restartRequired = false;\r\n    $scope.ignoreSaveNeeded = false;\r\n\r\n\r\n    function updateAndAskForRestartIfNecessary() {\r\n        if (angular.isUndefined($scope.form)) {\r\n            console.error(\"Unable to determine if a restart is necessary\");\r\n            return;\r\n        }\r\n\r\n        $scope.form.$setPristine();\r\n        DownloaderCategoriesService.invalidate();\r\n        if ($scope.restartRequired) {\r\n            ModalService.open(\"Restart required\", \"The changes you have made may require a restart to be effective.<br>Do you want to restart now?\", {\r\n                yes: {\r\n                    onYes: function () {\r\n                        RestartService.restart();\r\n                    }\r\n                },\r\n                no: {\r\n                    onNo: function ($uibModalInstance) {\r\n                        //Needs to be clicked twice for some reason\r\n                        $scope.restartRequired = false;\r\n                        $uibModalInstance.dismiss();\r\n                        $uibModalInstance.dismiss();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleConfigSetResponse(response, ignoreWarnings, restartNeeded) {\r\n        if (angular.isUndefined(ignoreWarnings)) {\r\n            ignoreWarnings = localStorageService.get(\"ignoreWarnings\") !== null ? localStorageService.get(\"ignoreWarnings\") : false;\r\n        }\r\n        //Communication with server was successful but there might be validation errors and/or warnings\r\n        var warningMessages = response.data.warningMessages;\r\n        var errorMessages = response.data.errorMessages;\r\n        $scope.restartRequired = response.data.restartNeeded || (angular.isDefined(restartNeeded) ? restartNeeded : false);\r\n        var showMessage = errorMessages.length > 0 || (warningMessages.length > 0 && !ignoreWarnings);\r\n\r\n        function extendMessageWithList(message, messages) {\r\n            _.forEach(messages, function (x) {\r\n                message += \"<li>\" + x + \"</li>\";\r\n            });\r\n            message += \"</ul></span>\";\r\n            return message;\r\n        }\r\n\r\n        if (showMessage) {\r\n            var options;\r\n            var message;\r\n            var title;\r\n            if (errorMessages.length > 0) { //Actual errors which cannot be ignored\r\n                title = \"Config validation failed\";\r\n                message = '<span class=\"error\">The following errors have been found in your config. They need to be fixed.<ul>';\r\n                message = extendMessageWithList(message, response.data.errorMessages);\r\n                if (warningMessages.length > 0) {\r\n                    message += '<br><span class=\"warning\">The following warnings were found. You can ignore them if you wish.<ul>';\r\n                    message = extendMessageWithList(message, response.data.warningMessages);\r\n                }\r\n                options = {\r\n                    yes: {\r\n                        onYes: function () {\r\n                        },\r\n                        text: \"OK\"\r\n                    }\r\n                };\r\n            } else if (warningMessages.length > 0) {\r\n                title = \"Config validation warnings\";\r\n                message = '<br><span class=\"warning\">The following warnings have been found. You can ignore them if you wish. The config was already saved.<ul>';\r\n                message = extendMessageWithList(message, response.data.warningMessages);\r\n                options = {\r\n                    cancel: {\r\n                        onCancel: function () {\r\n                            $scope.form.$setPristine();\r\n                            localStorageService.set(\"ignoreWarnings\", true);\r\n                            ConfigService.set($scope.config, true).then(function (response) {\r\n                                handleConfigSetResponse(response, true, $scope.restartRequired);\r\n                                updateAndAskForRestartIfNecessary();\r\n                            }, function (response) {\r\n                                //Actual error while setting or validating config\r\n                                growl.error(response.data);\r\n                            });\r\n                        },\r\n                        text: \"OK, don't show warnings again\"\r\n                    },\r\n                    yes: {\r\n                        onYes: function () {\r\n                            handleConfigSetResponse(response, true, $scope.restartRequired);\r\n                            updateAndAskForRestartIfNecessary();\r\n                        },\r\n                        text: \"OK\"\r\n                    }\r\n                };\r\n            }\r\n\r\n            ModalService.open(title, message, options, \"md\", \"left\");\r\n        } else {\r\n            updateAndAskForRestartIfNecessary();\r\n        }\r\n    }\r\n\r\n    function submit() {\r\n        if ($scope.form.$valid) {\r\n            ConfigService.set($scope.config, true).then(function (response) {\r\n                handleConfigSetResponse(response);\r\n            }, function (response) {\r\n                //Actual error while setting or validating config\r\n                growl.error(response.data);\r\n            });\r\n\r\n        } else {\r\n            growl.error(\"Config invalid. Please check your settings.\");\r\n\r\n            //Ridiculously hacky way to make the error messages appear\r\n            try {\r\n                if (angular.isDefined(form.$error.required)) {\r\n                    _.each(form.$error.required, function (item) {\r\n                        if (angular.isDefined(item.$error.required)) {\r\n                            _.each(item.$error.required, function (item2) {\r\n                                item2.$setTouched();\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n                angular.forEach($scope.form.$error.required, function (field) {\r\n                    field.$setTouched();\r\n                });\r\n            } catch (err) {\r\n                //\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    ConfigModel = config;\r\n\r\n    $scope.fields = ConfigFields.getFields($scope.config);\r\n\r\n    $scope.allTabs = [\r\n        {\r\n            active: false,\r\n            state: 'root.config.main',\r\n            name: 'Main',\r\n            model: ConfigModel.main,\r\n            fields: $scope.fields.main,\r\n            options: {}\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.config.auth',\r\n            name: 'Authorization',\r\n            model: ConfigModel.auth,\r\n            fields: $scope.fields.auth,\r\n            options: {}\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.config.searching',\r\n            name: 'Searching',\r\n            model: ConfigModel.searching,\r\n            fields: $scope.fields.searching,\r\n            options: {}\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.config.categories',\r\n            name: 'Categories',\r\n            model: ConfigModel.categoriesConfig,\r\n            fields: $scope.fields.categoriesConfig,\r\n            options: {}\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.config.downloading',\r\n            name: 'Downloading',\r\n            model: ConfigModel.downloading,\r\n            fields: $scope.fields.downloading,\r\n            options: {}\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.config.indexers',\r\n            name: 'Indexers',\r\n            model: ConfigModel.indexers,\r\n            fields: $scope.fields.indexers,\r\n            options: {}\r\n        }\r\n    ];\r\n\r\n    $scope.isSavingNeeded = function () {\r\n        return $scope.form.$dirty && $scope.form.$valid && !$scope.ignoreSaveNeeded;\r\n    };\r\n\r\n    $scope.goToConfigState = function (index) {\r\n        $state.go($scope.allTabs[index].state, {activeTab: index}, {inherit: false, notify: true, reload: true});\r\n    };\r\n\r\n    $scope.help = function () {\r\n        var tabName = $scope.allTabs[$scope.activeTab].name;\r\n        $http.get(\"internalapi/help/\" + tabName).then(function (result) {\r\n                var html = '<span style=\"text-align: left;\">' + result.data + \"</span>\";\r\n                ModalService.open(tabName + \" - Help\", html, {}, \"lg\");\r\n            },\r\n            function () {\r\n                growl.error(\"Error while loading help\")\r\n            })\r\n    };\r\n\r\n    $scope.$on('$stateChangeStart',\r\n        function (event, toState, toParams, fromState, fromParams) {\r\n            if ($scope.isSavingNeeded()) {\r\n                event.preventDefault();\r\n                ModalService.open(\"Unsaved changed\", \"Do you want to save before leaving?\", {\r\n                    yes: {\r\n                        onYes: function () {\r\n                            $scope.submit();\r\n                            $state.go(toState);\r\n                        },\r\n                        text: \"Yes\"\r\n                    },\r\n                    no: {\r\n                        onNo: function () {\r\n                            $scope.ignoreSaveNeeded = true;\r\n                            $scope.allTabs[$scope.activeTab].options.resetModel();\r\n                            $state.go(toState);\r\n                        },\r\n                        text: \"No\"\r\n                    },\r\n                    cancel: {\r\n                        onCancel: function () {\r\n                            event.preventDefault();\r\n                        },\r\n                        text: \"Cancel\"\r\n                    }\r\n                });\r\n            }\r\n        })\r\n}\r\n\r\n\r\n","\r\nCategoriesService.$inject = [\"ConfigService\"];angular\r\n    .module('nzbhydraApp')\r\n    .factory('CategoriesService', CategoriesService);\r\n\r\nfunction CategoriesService(ConfigService) {\r\n\r\n    return {\r\n        getByName: getByName,\r\n        getAllCategories: getAllCategories,\r\n        getDefault: getDefault,\r\n        getWithoutAll: getWithoutAll\r\n    };\r\n\r\n\r\n    function getByName(name) {\r\n        for (var cat in ConfigService.getSafe().categoriesConfig.categories) {\r\n            var category = ConfigService.getSafe().categoriesConfig.categories[cat];\r\n            if (category.name === name) {\r\n                return category;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAllCategories() {\r\n        return ConfigService.getSafe().categoriesConfig.categories;\r\n    }\r\n\r\n    function getWithoutAll() {\r\n        var cats = ConfigService.getSafe().categoriesConfig.categories;\r\n        return cats.slice(1, cats.length);\r\n    }\r\n\r\n    function getDefault() {\r\n        return getAllCategories()[0];\r\n    }\r\n\r\n}","\r\nBackupService.$inject = [\"$http\"];angular\r\n    .module('nzbhydraApp')\r\n    .factory('BackupService', BackupService);\r\n\r\nfunction BackupService($http) {\r\n\r\n    return {\r\n        getBackupsList: getBackupsList,\r\n        restoreFromFile: restoreFromFile\r\n    };\r\n\r\n\r\n    function getBackupsList() {\r\n        return $http.get('internalapi/backup/list').then(function (data) {\r\n            return data.data;\r\n        });\r\n    }\r\n\r\n    function restoreFromFile(filename) {\r\n        return $http.get('internalapi/backup/restore', {params: {filename: filename}}).then(function (response) {\r\n            return response;\r\n        });\r\n    }\r\n\r\n}","//Copied from https://github.com/oblador/angular-scroll because installing it via bower caused errors\nvar duScrollDefaultEasing = function (x) {\n\n\n  if(x < 0.5) {\n    return Math.pow(x*2, 2)/2;\n  }\n  return 1-Math.pow((1-x)*2, 2)/2;\n};\n\nvar duScroll = angular.module('duScroll', [\n  'duScroll.scrollspy',\n  'duScroll.smoothScroll',\n  'duScroll.scrollContainer',\n  'duScroll.spyContext',\n  'duScroll.scrollHelpers'\n])\n  //Default animation duration for smoothScroll directive\n  .value('duScrollDuration', 350)\n  //Scrollspy debounce interval, set to 0 to disable\n  .value('duScrollSpyWait', 100)\n  //Scrollspy forced refresh interval, use if your content changes or reflows without scrolling.\n  //0 to disable\n  .value('duScrollSpyRefreshInterval', 0)\n  //Wether or not multiple scrollspies can be active at once\n  .value('duScrollGreedy', false)\n  //Default offset for smoothScroll directive\n  .value('duScrollOffset', 0)\n  //Default easing function for scroll animation\n  .value('duScrollEasing', duScrollDefaultEasing)\n  //Which events on the container (such as body) should cancel scroll animations\n  .value('duScrollCancelOnEvents', 'scroll mousedown mousewheel touchmove keydown')\n  //Whether or not to activate the last scrollspy, when page/container bottom is reached\n  .value('duScrollBottomSpy', false)\n  //Active class name\n  .value('duScrollActiveClass', 'active');\n\nif (typeof module !== 'undefined' && module && module.exports) {\n  module.exports = duScroll;\n}\n\n\nangular.module('duScroll.scrollHelpers', ['duScroll.requestAnimation'])\n.run([\"$window\", \"$q\", \"cancelAnimation\", \"requestAnimation\", \"duScrollEasing\", \"duScrollDuration\", \"duScrollOffset\", \"duScrollCancelOnEvents\", function($window, $q, cancelAnimation, requestAnimation, duScrollEasing, duScrollDuration, duScrollOffset, duScrollCancelOnEvents) {\n  'use strict';\n\n  var proto = {};\n\n  var isDocument = function(el) {\n    return (typeof HTMLDocument !== 'undefined' && el instanceof HTMLDocument) || (el.nodeType && el.nodeType === el.DOCUMENT_NODE);\n  };\n\n  var isElement = function(el) {\n    return (typeof HTMLElement !== 'undefined' && el instanceof HTMLElement) || (el.nodeType && el.nodeType === el.ELEMENT_NODE);\n  };\n\n  var unwrap = function(el) {\n    return isElement(el) || isDocument(el) ? el : el[0];\n  };\n\n  proto.duScrollTo = function(left, top, duration, easing) {\n    var aliasFn;\n    if(angular.isElement(left)) {\n      aliasFn = this.duScrollToElement;\n    } else if(angular.isDefined(duration)) {\n      aliasFn = this.duScrollToAnimated;\n    }\n    if(aliasFn) {\n      return aliasFn.apply(this, arguments);\n    }\n    var el = unwrap(this);\n    if(isDocument(el)) {\n      return $window.scrollTo(left, top);\n    }\n    el.scrollLeft = left;\n    el.scrollTop = top;\n  };\n\n  var scrollAnimation, deferred;\n  proto.duScrollToAnimated = function(left, top, duration, easing) {\n    if(duration && !easing) {\n      easing = duScrollEasing;\n    }\n    var startLeft = this.duScrollLeft(),\n        startTop = this.duScrollTop(),\n        deltaLeft = Math.round(left - startLeft),\n        deltaTop = Math.round(top - startTop);\n\n    var startTime = null, progress = 0;\n    var el = this;\n\n    var cancelScrollAnimation = function($event) {\n      if (!$event || (progress && $event.which > 0)) {\n        if(duScrollCancelOnEvents) {\n          el.unbind(duScrollCancelOnEvents, cancelScrollAnimation);\n        }\n        cancelAnimation(scrollAnimation);\n        deferred.reject();\n        scrollAnimation = null;\n      }\n    };\n\n    if(scrollAnimation) {\n      cancelScrollAnimation();\n    }\n    deferred = $q.defer();\n\n    if(duration === 0 || (!deltaLeft && !deltaTop)) {\n      if(duration === 0) {\n        el.duScrollTo(left, top);\n      }\n      deferred.resolve();\n      return deferred.promise;\n    }\n\n    var animationStep = function(timestamp) {\n      if (startTime === null) {\n        startTime = timestamp;\n      }\n\n      progress = timestamp - startTime;\n      var percent = (progress >= duration ? 1 : easing(progress/duration));\n\n      el.scrollTo(\n        startLeft + Math.ceil(deltaLeft * percent),\n        startTop + Math.ceil(deltaTop * percent)\n      );\n      if(percent < 1) {\n        scrollAnimation = requestAnimation(animationStep);\n      } else {\n        if(duScrollCancelOnEvents) {\n          el.unbind(duScrollCancelOnEvents, cancelScrollAnimation);\n        }\n        scrollAnimation = null;\n        deferred.resolve();\n      }\n    };\n\n    //Fix random mobile safari bug when scrolling to top by hitting status bar\n    el.duScrollTo(startLeft, startTop);\n\n    if(duScrollCancelOnEvents) {\n      el.bind(duScrollCancelOnEvents, cancelScrollAnimation);\n    }\n\n    scrollAnimation = requestAnimation(animationStep);\n    return deferred.promise;\n  };\n\n  proto.duScrollToElement = function(target, offset, duration, easing) {\n    var el = unwrap(this);\n    if(!angular.isNumber(offset) || isNaN(offset)) {\n      offset = duScrollOffset;\n    }\n    var top = this.duScrollTop() + unwrap(target).getBoundingClientRect().top - offset;\n    if(isElement(el)) {\n      top -= el.getBoundingClientRect().top;\n    }\n    return this.duScrollTo(0, top, duration, easing);\n  };\n\n  proto.duScrollLeft = function(value, duration, easing) {\n    if(angular.isNumber(value)) {\n      return this.duScrollTo(value, this.duScrollTop(), duration, easing);\n    }\n    var el = unwrap(this);\n    if(isDocument(el)) {\n      return $window.scrollX || document.documentElement.scrollLeft || document.body.scrollLeft;\n    }\n    return el.scrollLeft;\n  };\n  proto.duScrollTop = function(value, duration, easing) {\n    if(angular.isNumber(value)) {\n      return this.duScrollTo(this.duScrollLeft(), value, duration, easing);\n    }\n    var el = unwrap(this);\n    if(isDocument(el)) {\n      return $window.scrollY || document.documentElement.scrollTop || document.body.scrollTop;\n    }\n    return el.scrollTop;\n  };\n\n  proto.duScrollToElementAnimated = function(target, offset, duration, easing) {\n    return this.duScrollToElement(target, offset, duration || duScrollDuration, easing);\n  };\n\n  proto.duScrollTopAnimated = function(top, duration, easing) {\n    return this.duScrollTop(top, duration || duScrollDuration, easing);\n  };\n\n  proto.duScrollLeftAnimated = function(left, duration, easing) {\n    return this.duScrollLeft(left, duration || duScrollDuration, easing);\n  };\n\n  angular.forEach(proto, function(fn, key) {\n    angular.element.prototype[key] = fn;\n\n    //Remove prefix if not already claimed by jQuery / ui.utils\n    var unprefixed = key.replace(/^duScroll/, 'scroll');\n    if(angular.isUndefined(angular.element.prototype[unprefixed])) {\n      angular.element.prototype[unprefixed] = fn;\n    }\n  });\n\n}]);\n\n\n//Adapted from https://gist.github.com/paulirish/1579671\nangular.module('duScroll.polyfill', [])\n.factory('polyfill', [\"$window\", function($window) {\n  'use strict';\n\n  var vendors = ['webkit', 'moz', 'o', 'ms'];\n\n  return function(fnName, fallback) {\n    if($window[fnName]) {\n      return $window[fnName];\n    }\n    var suffix = fnName.substr(0, 1).toUpperCase() + fnName.substr(1);\n    for(var key, i = 0; i < vendors.length; i++) {\n      key = vendors[i]+suffix;\n      if($window[key]) {\n        return $window[key];\n      }\n    }\n    return fallback;\n  };\n}]);\n\nangular.module('duScroll.requestAnimation', ['duScroll.polyfill'])\n.factory('requestAnimation', [\"polyfill\", \"$timeout\", function(polyfill, $timeout) {\n  'use strict';\n\n  var lastTime = 0;\n  var fallback = function(callback, element) {\n    var currTime = new Date().getTime();\n    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n    var id = $timeout(function() { callback(currTime + timeToCall); },\n      timeToCall);\n    lastTime = currTime + timeToCall;\n    return id;\n  };\n\n  return polyfill('requestAnimationFrame', fallback);\n}])\n.factory('cancelAnimation', [\"polyfill\", \"$timeout\", function(polyfill, $timeout) {\n  'use strict';\n\n  var fallback = function(promise) {\n    $timeout.cancel(promise);\n  };\n\n  return polyfill('cancelAnimationFrame', fallback);\n}]);\n\n\nangular.module('duScroll.spyAPI', ['duScroll.scrollContainerAPI'])\n.factory('spyAPI', [\"$rootScope\", \"$timeout\", \"$interval\", \"$window\", \"$document\", \"scrollContainerAPI\", \"duScrollGreedy\", \"duScrollSpyWait\", \"duScrollSpyRefreshInterval\", \"duScrollBottomSpy\", \"duScrollActiveClass\", function($rootScope, $timeout, $interval, $window, $document, scrollContainerAPI, duScrollGreedy, duScrollSpyWait, duScrollSpyRefreshInterval, duScrollBottomSpy, duScrollActiveClass) {\n  'use strict';\n\n  var createScrollHandler = function(context) {\n    var timer = false, queued = false;\n    var handler = function() {\n      queued = false;\n      var container = context.container,\n          containerEl = container[0],\n          containerOffset = 0,\n          bottomReached;\n\n      if (typeof HTMLElement !== 'undefined' && containerEl instanceof HTMLElement || containerEl.nodeType && containerEl.nodeType === containerEl.ELEMENT_NODE) {\n        containerOffset = containerEl.getBoundingClientRect().top;\n        bottomReached = Math.round(containerEl.scrollTop + containerEl.clientHeight) >= containerEl.scrollHeight;\n      } else {\n        var documentScrollHeight = $document[0].body.scrollHeight || $document[0].documentElement.scrollHeight; // documentElement for IE11\n        bottomReached = Math.round($window.pageYOffset + $window.innerHeight) >= documentScrollHeight;\n      }\n      var compareProperty = (duScrollBottomSpy && bottomReached ? 'bottom' : 'top');\n\n      var i, currentlyActive, toBeActive, spies, spy, pos;\n      spies = context.spies;\n      currentlyActive = context.currentlyActive;\n      toBeActive = undefined;\n\n      for(i = 0; i < spies.length; i++) {\n        spy = spies[i];\n        pos = spy.getTargetPosition();\n        if (!pos || !spy.$element) continue;\n\n        if((duScrollBottomSpy && bottomReached) || (pos.top + spy.offset - containerOffset < 20 && (duScrollGreedy || pos.top*-1 + containerOffset) < pos.height)) {\n          //Find the one closest the viewport top or the page bottom if it's reached\n          if(!toBeActive || toBeActive[compareProperty] < pos[compareProperty]) {\n            toBeActive = {\n              spy: spy\n            };\n            toBeActive[compareProperty] = pos[compareProperty];\n          }\n        }\n      }\n\n      if(toBeActive) {\n        toBeActive = toBeActive.spy;\n      }\n      if(currentlyActive === toBeActive || (duScrollGreedy && !toBeActive)) return;\n      if(currentlyActive && currentlyActive.$element) {\n        currentlyActive.$element.removeClass(duScrollActiveClass);\n        $rootScope.$broadcast(\n          'duScrollspy:becameInactive',\n          currentlyActive.$element,\n          angular.element(currentlyActive.getTargetElement())\n        );\n      }\n      if(toBeActive) {\n        toBeActive.$element.addClass(duScrollActiveClass);\n        $rootScope.$broadcast(\n          'duScrollspy:becameActive',\n          toBeActive.$element,\n          angular.element(toBeActive.getTargetElement())\n        );\n      }\n      context.currentlyActive = toBeActive;\n    };\n\n    if(!duScrollSpyWait) {\n      return handler;\n    }\n\n    //Debounce for potential performance savings\n    return function() {\n      if(!timer) {\n        handler();\n        timer = $timeout(function() {\n          timer = false;\n          if(queued) {\n            handler();\n          }\n        }, duScrollSpyWait, false);\n      } else {\n        queued = true;\n      }\n    };\n  };\n\n  var contexts = {};\n\n  var createContext = function($scope) {\n    var id = $scope.$id;\n    var context = {\n      spies: []\n    };\n\n    context.handler = createScrollHandler(context);\n    contexts[id] = context;\n\n    $scope.$on('$destroy', function() {\n      destroyContext($scope);\n    });\n\n    return id;\n  };\n\n  var destroyContext = function($scope) {\n    var id = $scope.$id;\n    var context = contexts[id], container = context.container;\n    if(context.intervalPromise) {\n      $interval.cancel(context.intervalPromise);\n    }\n    if(container) {\n      container.off('scroll', context.handler);\n    }\n    delete contexts[id];\n  };\n\n  var defaultContextId = createContext($rootScope);\n\n  var getContextForScope = function(scope) {\n    if(contexts[scope.$id]) {\n      return contexts[scope.$id];\n    }\n    if(scope.$parent) {\n      return getContextForScope(scope.$parent);\n    }\n    return contexts[defaultContextId];\n  };\n\n  var getContextForSpy = function(spy) {\n    var context, contextId, scope = spy.$scope;\n    if(scope) {\n      return getContextForScope(scope);\n    }\n    //No scope, most likely destroyed\n    for(contextId in contexts) {\n      context = contexts[contextId];\n      if(context.spies.indexOf(spy) !== -1) {\n        return context;\n      }\n    }\n  };\n\n  var isElementInDocument = function(element) {\n    while (element.parentNode) {\n      element = element.parentNode;\n      if (element === document) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  var addSpy = function(spy) {\n    var context = getContextForSpy(spy);\n    if (!context) return;\n    context.spies.push(spy);\n    if (!context.container || !isElementInDocument(context.container)) {\n      if(context.container) {\n        context.container.off('scroll', context.handler);\n      }\n      context.container = scrollContainerAPI.getContainer(spy.$scope);\n      if (duScrollSpyRefreshInterval && !context.intervalPromise) {\n        context.intervalPromise = $interval(context.handler, duScrollSpyRefreshInterval, 0, false);\n      }\n      context.container.on('scroll', context.handler).triggerHandler('scroll');\n    }\n  };\n\n  var removeSpy = function(spy) {\n    var context = getContextForSpy(spy);\n    if(spy === context.currentlyActive) {\n      $rootScope.$broadcast('duScrollspy:becameInactive', context.currentlyActive.$element);\n      context.currentlyActive = null;\n    }\n    var i = context.spies.indexOf(spy);\n    if(i !== -1) {\n      context.spies.splice(i, 1);\n    }\n\t\tspy.$element = null;\n  };\n\n  return {\n    addSpy: addSpy,\n    removeSpy: removeSpy,\n    createContext: createContext,\n    destroyContext: destroyContext,\n    getContextForScope: getContextForScope\n  };\n}]);\n\n\nangular.module('duScroll.scrollContainerAPI', [])\n.factory('scrollContainerAPI', [\"$document\", function($document) {\n  'use strict';\n\n  var containers = {};\n\n  var setContainer = function(scope, element) {\n    var id = scope.$id;\n    containers[id] = element;\n    return id;\n  };\n\n  var getContainerId = function(scope) {\n    if(containers[scope.$id]) {\n      return scope.$id;\n    }\n    if(scope.$parent) {\n      return getContainerId(scope.$parent);\n    }\n    return;\n  };\n\n  var getContainer = function(scope) {\n    var id = getContainerId(scope);\n    return id ? containers[id] : $document;\n  };\n\n  var removeContainer = function(scope) {\n    var id = getContainerId(scope);\n    if(id) {\n      delete containers[id];\n    }\n  };\n\n  return {\n    getContainerId:   getContainerId,\n    getContainer:     getContainer,\n    setContainer:     setContainer,\n    removeContainer:  removeContainer\n  };\n}]);\n\n\nangular.module('duScroll.smoothScroll', ['duScroll.scrollHelpers', 'duScroll.scrollContainerAPI'])\n.directive('duSmoothScroll', [\"duScrollDuration\", \"duScrollOffset\", \"scrollContainerAPI\", function(duScrollDuration, duScrollOffset, scrollContainerAPI) {\n  'use strict';\n\n  return {\n    link : function($scope, $element, $attr) {\n      $element.on('click', function(e) {\n        if((!$attr.href || $attr.href.indexOf('#') === -1) && $attr.duSmoothScroll === '') return;\n\n        var id = $attr.href ? $attr.href.replace(/.*(?=#[^\\s]+$)/, '').substring(1) : $attr.duSmoothScroll;\n\n        var target = document.getElementById(id) || document.getElementsByName(id)[0];\n        if(!target || !target.getBoundingClientRect) return;\n\n        if (e.stopPropagation) e.stopPropagation();\n        if (e.preventDefault) e.preventDefault();\n\n        var offset    = $attr.offset ? parseInt($attr.offset, 10) : duScrollOffset;\n        var duration  = $attr.duration ? parseInt($attr.duration, 10) : duScrollDuration;\n        var container = scrollContainerAPI.getContainer($scope);\n\n        container.duScrollToElement(\n          angular.element(target),\n          isNaN(offset) ? 0 : offset,\n          isNaN(duration) ? 0 : duration\n        );\n      });\n    }\n  };\n}]);\n\n\nangular.module('duScroll.spyContext', ['duScroll.spyAPI'])\n.directive('duSpyContext', [\"spyAPI\", function(spyAPI) {\n  'use strict';\n\n  return {\n    restrict: 'A',\n    scope: true,\n    compile: function compile(tElement, tAttrs, transclude) {\n      return {\n        pre: function preLink($scope, iElement, iAttrs, controller) {\n          spyAPI.createContext($scope);\n        }\n      };\n    }\n  };\n}]);\n\n\nangular.module('duScroll.scrollContainer', ['duScroll.scrollContainerAPI'])\n.directive('duScrollContainer', [\"scrollContainerAPI\", function(scrollContainerAPI){\n  'use strict';\n\n  return {\n    restrict: 'A',\n    scope: true,\n    compile: function compile(tElement, tAttrs, transclude) {\n      return {\n        pre: function preLink($scope, iElement, iAttrs, controller) {\n          iAttrs.$observe('duScrollContainer', function(element) {\n            if(angular.isString(element)) {\n              element = document.getElementById(element);\n            }\n\n            element = (angular.isElement(element) ? angular.element(element) : iElement);\n            scrollContainerAPI.setContainer($scope, element);\n            $scope.$on('$destroy', function() {\n              scrollContainerAPI.removeContainer($scope);\n            });\n          });\n        }\n      };\n    }\n  };\n}]);\n\n\nangular.module('duScroll.scrollspy', ['duScroll.spyAPI'])\n.directive('duScrollspy', [\"spyAPI\", \"duScrollOffset\", \"$timeout\", \"$rootScope\", function(spyAPI, duScrollOffset, $timeout, $rootScope) {\n  'use strict';\n\n  var Spy = function(targetElementOrId, $scope, $element, offset) {\n    if(angular.isElement(targetElementOrId)) {\n      this.target = targetElementOrId;\n    } else if(angular.isString(targetElementOrId)) {\n      this.targetId = targetElementOrId;\n    }\n    this.$scope = $scope;\n    this.$element = $element;\n    this.offset = offset;\n  };\n\n  Spy.prototype.getTargetElement = function() {\n    if (!this.target && this.targetId) {\n      this.target = document.getElementById(this.targetId) || document.getElementsByName(this.targetId)[0];\n    }\n    return this.target;\n  };\n\n  Spy.prototype.getTargetPosition = function() {\n    var target = this.getTargetElement();\n    if(target) {\n      return target.getBoundingClientRect();\n    }\n  };\n\n  Spy.prototype.flushTargetCache = function() {\n    if(this.targetId) {\n      this.target = undefined;\n    }\n  };\n\n  return {\n    link: function ($scope, $element, $attr) {\n      var href = $attr.ngHref || $attr.href;\n      var targetId;\n\n      if (href && href.indexOf('#') !== -1) {\n        targetId = href.replace(/.*(?=#[^\\s]+$)/, '').substring(1);\n      } else if($attr.duScrollspy) {\n        targetId = $attr.duScrollspy;\n      } else if($attr.duSmoothScroll) {\n        targetId = $attr.duSmoothScroll;\n      }\n      if(!targetId) return;\n\n      // Run this in the next execution loop so that the scroll context has a chance\n      // to initialize\n      var timeoutPromise = $timeout(function() {\n        var spy = new Spy(targetId, $scope, $element, -($attr.offset ? parseInt($attr.offset, 10) : duScrollOffset));\n        spyAPI.addSpy(spy);\n\n        $scope.$on('$locationChangeSuccess', spy.flushTargetCache.bind(spy));\n        var deregisterOnStateChange = $rootScope.$on('$stateChangeSuccess', spy.flushTargetCache.bind(spy));\n        $scope.$on('$destroy', function() {\n          spyAPI.removeSpy(spy);\n          deregisterOnStateChange();\n        });\n      }, 0, false);\n      $scope.$on('$destroy', function() {$timeout.cancel(timeoutPromise);});\n    }\n  };\n}]);\n"]}